------------------------------------------------------------------------
r1725 | atze | 2009-11-16 11:00:24 +0100 (Mon, 16 Nov 2009) | 3 lines

- Simple annotation mechanism for Core, in particular to annotate types where desired. This is not the equivalent of typed core, as typed core has to check correct w.r.t. types. Annotations here just are optional info to be used for annotation driven code optimisations, a temporary solution until typed core has grown up. Currently used to remove overhead for Int constants. This must go (according to the Haskell report) via fromInteger, but can be shortcutted after type inference, if the Integral value indeed is known to be an Int. If Int constants are used locally in functions this makes a big difference in runtime cost, as to be expected, e.g. rfib-int (bc backend) now runs almost 5x faster, the difference between the bc and C backend now is more consistent (C backend does not really use GMP Integers), varying between 1.5-3 x speed difference.


------------------------------------------------------------------------
r1724 | atze | 2009-11-13 21:09:00 +0100 (Fri, 13 Nov 2009) | 34 lines

(Part of these remarks should have been logged a few commits ago, but were forgotten)


Garbage Collection
------------------

Work on GC extensions, in particular groundwork for weak pointers, currently only used & tested for finalization of internally allocated finalizable nodes, like GMP based integers. This is part of more work described further down. For now:
- Finalization works with regression tests & benchmarks.
- Encountered two low level bugs, an off-by-1 pointer, and a forgotten todo involving read access to non-allocated memory because a size of buffer was not yet taken into account.
- Not yet tested on 64bits platform.
- Performance for Integer intensive programs can degrade upto 20%. This can be a reason to get rid of GMP because GMP enforces malloc style allocation + free-ing through finalizers; it would be more efficient to let a GMP library be aware of garbage collection.
- More sanity checks when tracing is enabled, which helped finding 1 of the mentioned bugs.

The following must/should be done, in this planned order:
- weak pointer mechanism (key+value pair which is only traced when key is GC alive)
- finalization (requires key part (of key+value) of weak pointers, required for FFI calls using malloc-ed memory)
- array allocation with finalizers (to make the 'last' faulty benchmark (paraffins) work, which fails because of memory overflow (> 2GB))

When the above works, there should be no memory leaks. The list of extensions continues with the rest to make GC efficient and make FFI work:
- stable names with reference counting (required by FFI called code using Haskell data structures)
- generational GC (to avoid unnecessary copying of long lived objects)
- separate allocation of array like data (to avoid copying large chunks of data, to avoid tracing data without pointers, no finalizers needed then)

This list can be implemented in the longer run.

The design follows:
@inproceedings{peytonjones99weakptr-stablenm , eprint = {papers/peytonjones99weakptr-stablenm.pdf} , title = {{Stretching the storage manager: weak pointers and stable names in Haskell}} , author = {Peyton Jones, Simon and Marlow, Simon and Elliott, Conal} , booktitle = {Implementation of Functional Languages} , pages = {37-58} , year = {1999} , url = {http://citeseer.ist.psu.edu/peytonjones99stretching.html} , howpublished = {\verb|http://citeseer.ist.psu.edu/peytonjones99stretching.html|}}


TyCore
------

Preliminaries to allow EH -> TyCore -> Core translation as an optional phase between EH and Core. This allows for gradual incorporation of TyCore usage, as well as enabling current TyCore based experiments to lead to an executable. A sketchy TyCore->Core translation has been added, far from correct: compiler loops down the pipeline (e.g. bytecode gen), etc. This 'bypass' is now turned on by (already existing) option --tycore.

------------------------------------------------------------------------
r1723 | jeroen | 2009-11-13 15:05:39 +0100 (Fri, 13 Nov 2009) | 2 lines

Core.LiftDictFields must not be omitted, otherwise dictionary members that are constants or pointfree-defined functions will not be lifted.
Fixed (most) cast warnings from C compiler in C backend.
------------------------------------------------------------------------
r1722 | atze | 2009-11-12 09:59:35 +0100 (Thu, 12 Nov 2009) | 1 line

64bits fixes; smaller benchmarks ok (even 30% faster on virtual machine), larger benchmarks seem to fail because of lack of memory
------------------------------------------------------------------------
r1721 | atze | 2009-11-12 09:04:19 +0100 (Thu, 12 Nov 2009) | 1 line

work on finalization in GC; still turned off because of race-condition like crash in some long-running benchmark programs
------------------------------------------------------------------------
r1720 | atze | 2009-11-11 19:20:08 +0100 (Wed, 11 Nov 2009) | 1 line

64bits bc backend (sort of) ok with new GC, 2 regress tests fail, not benchmarked
------------------------------------------------------------------------
r1719 | jeroen | 2009-11-11 15:35:12 +0100 (Wed, 11 Nov 2009) | 1 line

Dictionaries with parameters are now handled correctly by MergeInstance.
------------------------------------------------------------------------
r1718 | atze | 2009-10-20 16:31:55 +0200 (Tue, 20 Oct 2009) | 3 lines

Fix of EvalElim breaking in a cornercase (ioFromPrim) when both a unevaluated and evaluated (same) thunk were needed, but only 1 reference to it was used. This broke the node/pointer distinction required by whole program analysis.


------------------------------------------------------------------------
r1717 | jleeuwes | 2009-10-20 13:50:05 +0200 (Tue, 20 Oct 2009) | 2 lines

Fix variant 20; cleanup functions were called that only exist in variant >= 99.

------------------------------------------------------------------------
r1716 | jleeuwes | 2009-10-20 12:20:34 +0200 (Tue, 20 Oct 2009) | 4 lines

Check that the first argument of an App expression is ModeNode. This is assumed
by the HPT analysis, but was not checked as an invariant, which resulted in a
non-descriptive error message.

------------------------------------------------------------------------
r1715 | atze | 2009-10-16 16:57:45 +0200 (Fri, 16 Oct 2009) | 10 lines

Fixed various problems related to elimination of GRIN name aliases (AliasElim) and removal of redundant evaluations (EvalElim):
- EvalElim did move evaluations in front of others, this broke `seq` usage.
- EvalElim incorrectly assumed evaluation of applications in some cases.
- AliasElim did replace aliases at the tail of a function incorrectly involving an eval at the end
- AliasElim did also deal with the EvalElim's task.

From the benchmark tests, paraffins now runs without stack overflow, as it should, but for large runs it runs out of heap. Reason still unknown, but a good guess is the use of arrays which are still used without finalizer (because GC finalization is not yet implemented).

As a side effect, several nofib tests run faster.

------------------------------------------------------------------------
r1714 | atze | 2009-10-14 10:52:36 +0200 (Wed, 14 Oct 2009) | 12 lines

Added check on stack overflow.

The stack overflow check pointed out a problem with stack memory leaking in tailcall variants:
- a tailapply variant of apply had to be added
- the already existing taileval had to be adapted not to consume stack memory (partially done)

The transformation of eliminating unnessary evaluations has been adapted because it helps avoiding closure building leading to the use of tailevals. It also has been adapted to take into account restrictions imposed by the HPT analysis w.r.t. change in node/pointer typing. This has not been tested yet for the C backend.

Stack overflow still occurs in the paraffins benchmark test, but not anymore due to faulty tailcall variants. It seems to be a nested sequence of closures evaluated, leading to nested calls, leading to stack overflow. Most likely this is caused by a function which has specified to enforce evaluation (by `seq` or $!), but this is not done correctly. This requires further investigation.

The effect of the above changes on performance is somewhat mixed. The additional overhead stacksize check evidently costs time (in the 3-5% range), but the stack not increasing that much means that the garbage collector has to trace less. Some benchmark test times increase, others decrease.

------------------------------------------------------------------------
r1712 | tlokhors | 2009-10-12 16:13:19 +0200 (Mon, 12 Oct 2009) | 3 lines

Forgot one closing bracket.
Weirdly enough, shuffle didn't seem to mind though, everything compiled just fine.

------------------------------------------------------------------------
r1711 | tlokhors | 2009-10-12 15:18:39 +0200 (Mon, 12 Oct 2009) | 4 lines

Fixed build error in varient 8.

Core/CMetaVal.DictInstance was moved to varient 9, but still used in 8.

------------------------------------------------------------------------
r1709 | jeroen | 2009-10-12 11:25:14 +0200 (Mon, 12 Oct 2009) | 3 lines

To make Grin/MergeInstance work, we need to float all dictionary fields to top level in Core/FloatToGlobal.
But not only the fields themselves are needed, but also their dependencies. This is now handled correctly.
A new benchmark (nofib/real/infer) now works also in the C backend (this benchmark extensively uses Show on recursive data types, which needs the feature mentioned above).
------------------------------------------------------------------------
r1708 | atze | 2009-10-07 16:33:44 +0200 (Wed, 07 Oct 2009) | 2 lines

Cleanup of bytecode codegeneration.

------------------------------------------------------------------------
r1707 | atze | 2009-10-06 20:45:28 +0200 (Tue, 06 Oct 2009) | 4 lines

Finished GC info at runtime, w.r.t. stacklayout and traceable locations on the stack. See previous log in this topic. Some cleanup is still required, but all functionality is there and seems to work, although not yet tested on multiple platforms. Next problem now seems to be stackoverflow, in particular absence of its detection.

Build for variant 99 now also uses AG generation split over multiple modules. Requires 'make 99/clean' before building.

------------------------------------------------------------------------
r1705 | atze | 2009-10-02 17:24:47 +0200 (Fri, 02 Oct 2009) | 12 lines

Work (unfinished) on infrastructure for making GC info available runtime, in the interpreter. The design chosen is to have for a stackframe a descriptor telling what may and what must not be traced for GC. There are two places where this info will/must be available:
- via the BP (basepointer, markpointer), which always points to a return address, the return address always has call info, which may point to a descriptor. This describes then the part below the BP to the next BP, not above towards the SP (stackpointer). For that we need:
- some instructions to also be annotated with GC info, in particular allocation, so the top part is described at instructions where this really matters.

Two alternatives were considered/pursued:
- only info about how much on the top of the stack must not be traced. This could be just enough but depends very much on which callpatterns are actually used.
- markers on the stack describing which parts must not be GC. Apart from additional runtime overhead (when not GC-ing), other values -like pointers into non GC managed memory- now occasionally are recognized as such markers. Havoc...

It is yet unclear whether this (the GC work under construction) solves the current bug under investigation. The hypothesis is that it is caused by unboxed Doubles incorrectly interpreted as pointer. The above mechanism should fix that, but pinpointing the guilty code is almost impossible. The problem occurs only for longrunning programs, and it is a somewhat random process to tweak buffer sizes and programs to obtain a short running program; something I did not succeed at for this problem. Just to give an idea, for a no tracing output generating program it might take 0.150sec to run, with tracing on it takes a couple of minutes and generates also a couple of GB trace output. The math for a 10sec program is left as an exercise.

Too small a stack also has been considered a culprit. Although increasing the stacksize makes no difference, it might be worth the trouble to rule this option out by incorporating a runtime check on remaining stacksize, which has to be done anyway.

------------------------------------------------------------------------
r1704 | atze | 2009-09-30 12:51:16 +0200 (Wed, 30 Sep 2009) | 8 lines

Fixed alternate trace queueing mechanism. With proper buffer size
settings performance is about the same, sometimes a tad slower,
sometimes a tad faster. Because this queueing does honour the interface
of tracing, i.e. no non traceable memory will be looked at, no extra
checks needed, this implementation now is the default. The drawback of
this solution is the additional memory required for the queue.


------------------------------------------------------------------------
r1703 | atze | 2009-09-29 21:55:10 +0200 (Tue, 29 Sep 2009) | 27 lines

Fixed problem underlying nofib/imag/integrate benchmark test:

Cleanup of bytecode linking, replaced by a simpler and more space
efficient implementation (code size reduction of 25%). The new
implementation is a side effect of previous work on adding GC related
info, and passing it on to the GC.

In the end the mentioned 'last bug' in Jeroen's nofib selection turned
out to be in the tracing of objects. The newly copied nodes are
themselves used as the queue from which to take new objects to be
traced, but it assumes that only traceable objects are encountered.
However, the implementation breaks this assumption because because of
the consecutivity of nodes, also non traceable objects are automatically
part of this queue, and the check for 'can trace the queued object' had
to be done a second time, to prevent Double nodes to be traced. A
different queueing mechanism has been implemented as well, one which
builds the queue explicitly, in which case it is not added and the
problem cannot occur. This implementation however crashes anyway, but
may be the better solution, although theoretically slower.

Finally, there still exists the problem that unboxed values live on the
stack, and may be incorrectly traced, due to lack of information about
stack structure. The situation does not (yet) pop up in current tests,
because other checks already filter out many pointerlike values falling
outside the range managed by the GC, but surely this will happen some
day, so this problem has to be solved as well.

------------------------------------------------------------------------
r1701 | atze | 2009-09-25 07:39:06 +0200 (Fri, 25 Sep 2009) | 6 lines

Work on a GC problem: preciseness of tracing of live memory. Currently it is assumed that the runtime representation of pointers and nodes in the interpreter provides enough info to determine whether memory can be traaced for checking liveness. However, this assumption is broken when doing a FFI call, because unboxed values then appear on the stack. It is necessary to generate descriptions of stacklayout w.r.t. the 'may trace' property.

This checkin adds the generation of 'may trace' GC info for the top of the stack only, to be used in conjunction with allocation. However, this is not sufficient, as unboxed values may live longer on the stack, and in combination with evaluations triggered in primitives.



------------------------------------------------------------------------
r1700 | atze | 2009-09-21 20:25:40 +0200 (Mon, 21 Sep 2009) | 6 lines

Fixed various GC problems:
- some primitives did still not take into account GC copying
- low level admin for mapping pointers to 'must I GC this pointer' info was corrupted, but only in cornercases combination (large spread of addresses, larger admin table, specific sizes only)

As a result more nofib test programs run, in particular the ones which did not work with the Boehm GC. Only 1 of Jeroens nofib tests (nofib/imag/integrate) still fails.

------------------------------------------------------------------------
r1698 | tlokhors | 2009-09-21 18:50:18 +0200 (Mon, 21 Sep 2009) | 3 lines

Reverted to revision 1696.
These changes should have been made in the tauphi branch, forgot to `svn switch`.

------------------------------------------------------------------------
r1697 | tlokhors | 2009-09-21 15:37:30 +0200 (Mon, 21 Sep 2009) | 2 lines

Implmented first version of parser extensions for @annotations.

------------------------------------------------------------------------
r1695 | atze | 2009-09-18 09:23:08 +0200 (Fri, 18 Sep 2009) | 8 lines

Fixed various potential and actual GC bugs. The problem arises at
various locations in the RTS and (probably) also in generated code when
an indirection node is accessed whilst assuming it is an evaluated node.
The RTS has been scrutinized, assertion code inserted to check this. The
generated code and transformations yet have to be checked for this.

The problem does not arise in the regression tests, only with nofib test programs, and only in longer runs. Downsizing the admin and memory blocksize used for GC seems to avoid the problem. It may well be necessary to first instrument the RTS further because the generated dumps are too large to produce and look at (at least > .5 GB, taking minutes & GB's to be produced).

------------------------------------------------------------------------
r1694 | jeroen | 2009-09-17 15:42:33 +0200 (Thu, 17 Sep 2009) | 3 lines

A new representation for dictionary annotations in Core and Grin.
Semantically neutral: [a] instead of Maybe a. 
I will need this additional list elements in the future.
------------------------------------------------------------------------
r1693 | jeroen | 2009-09-15 11:07:18 +0200 (Tue, 15 Sep 2009) | 1 line

Fix for "Show Integer" in -tC backend
------------------------------------------------------------------------
r1692 | atze | 2009-09-14 20:04:02 +0200 (Mon, 14 Sep 2009) | 2 lines

Fixed GC bug: RTS created Nil/Nothing did not take into account the necessity of a forwarding pointer.

------------------------------------------------------------------------
r1691 | atze | 2009-09-14 16:52:49 +0200 (Mon, 14 Sep 2009) | 4 lines

Fixed GC bug: allocation (in codegen) of nodes did not take into account necessity for minimal allocation size of nodes, which always should include place for a GC forwarding pointer.

Rerun ./configure !!

------------------------------------------------------------------------
r1688 | atze | 2009-09-09 12:03:11 +0200 (Wed, 09 Sep 2009) | 7 lines

UHC's own garbage collector is now used for BC backend. 2 regression
tests still fail, but its use now allows the gradual phasing out of
Boehm's GC. Still unoptimised, it already gives a 10% speed increase for
time/memory consuming programs compiled with the BC backend.

HS09 slides, final version

------------------------------------------------------------------------
r1687 | jeroen | 2009-09-08 17:36:21 +0200 (Tue, 08 Sep 2009) | 2 lines

Allow the disabling of the Boehm garbage collector
(but without it, it runs even faster out of memory than with it).
------------------------------------------------------------------------
r1686 | atze | 2009-08-31 11:15:05 +0200 (Mon, 31 Aug 2009) | 1 line

hs09
------------------------------------------------------------------------
r1685 | atze | 2009-08-31 08:13:04 +0200 (Mon, 31 Aug 2009) | 1 line

hs09
------------------------------------------------------------------------
r1684 | jeroen | 2009-08-30 23:37:34 +0200 (Sun, 30 Aug 2009) | 1 line

HS09 slides: reworked example transformation (Name alias elimination in Core). Everything on 1 slide now, albeit with 24 animation steps.
------------------------------------------------------------------------
r1683 | jeroen | 2009-08-28 18:34:21 +0200 (Fri, 28 Aug 2009) | 1 line

HS09 slides: AG tutorial (in 1 slide with 19 animation steps)
------------------------------------------------------------------------
r1682 | atze | 2009-08-28 12:22:16 +0200 (Fri, 28 Aug 2009) | 1 line

hs09 work
------------------------------------------------------------------------
r1681 | jeroen | 2009-08-27 17:04:48 +0200 (Thu, 27 Aug 2009) | 1 line

HS09 slides: pipeline animation
------------------------------------------------------------------------
r1680 | atze | 2009-08-27 16:43:37 +0200 (Thu, 27 Aug 2009) | 1 line

hs09 work
------------------------------------------------------------------------
r1679 | jeroen | 2009-08-27 13:39:49 +0200 (Thu, 27 Aug 2009) | 1 line

HS slides
------------------------------------------------------------------------
r1678 | atze | 2009-08-27 13:37:48 +0200 (Thu, 27 Aug 2009) | 1 line

hs09 work
------------------------------------------------------------------------
r1677 | atze | 2009-08-26 17:35:11 +0200 (Wed, 26 Aug 2009) | 1 line

hs09 work
------------------------------------------------------------------------
r1676 | atze | 2009-08-26 14:53:31 +0200 (Wed, 26 Aug 2009) | 1 line

hs09 sync, misc config changes, work on typing
------------------------------------------------------------------------
r1675 | atze | 2009-08-26 10:17:43 +0200 (Wed, 26 Aug 2009) | 1 line

benchmark script under control of configure
------------------------------------------------------------------------
r1674 | atze | 2009-08-25 16:15:30 +0200 (Tue, 25 Aug 2009) | 1 line

hs09 slides work
------------------------------------------------------------------------
r1673 | atze | 2009-08-25 14:23:24 +0200 (Tue, 25 Aug 2009) | 1 line

prep for hs09 slides
------------------------------------------------------------------------
r1672 | atze | 2009-08-25 14:12:50 +0200 (Tue, 25 Aug 2009) | 1 line

prep for hs09 slides
------------------------------------------------------------------------
r1671 | atze | 2009-08-24 14:16:10 +0200 (Mon, 24 Aug 2009) | 16 lines

Fix by Bruno Martinez for 64/32 bits confusion of GMP library on Ubuntu, solved by passing explicitly the environment variable ABI, set to the used int size.

Working on fix for combination of tuples + predicates + coercions, e.g.:

	v2b :: forall x . (Num x => x, Num x => x)
	v2b = (2,3)
	
	v1b :: Num x => (x,x)
	v1b = v2b

This is also a preparation for the consequence of not having the monomorphism restriction:

	let (a,b) = (2,3)

The value (2,3) is overloaded in class Num, which should propagate to a and b.

------------------------------------------------------------------------
r1669 | atze | 2009-08-19 13:49:07 +0200 (Wed, 19 Aug 2009) | 7 lines

Fix of loop in type checker, which could be traced back to incorrectly
looking up in a substitution the binding of a quantified variable in
'forall a.a'. The substitution however did contain for this variable 'a'
the quantified type 'forall a.a' itself, which was necessary for typed
core generation. This broke an assumption in a type inspecting function
that such a cycle could not exist.

------------------------------------------------------------------------
r1668 | atze | 2009-08-18 08:39:25 +0200 (Tue, 18 Aug 2009) | 13 lines

Fix of incorrect propagation of evidence passing for function without
type signature, for which context is inferred, recursively called. The
design problem is that because of recursiveness and lack of type
signature the context is not yet known at call sites. The designed
solution is to give each possible passing of context an identification.
Later, when the required context for the function is inferred, the
context to be passed in the recursive call can also be determined
(invoking context reduction a 2nd time), and the code at the call site
is patched accordingly using the aforementioned identifier. The fixed
problem was that the propagation of these identifiers was not done
correctly, combination of sets of these identifiers is necessary when
combining substutions on types as well, which was not done.

------------------------------------------------------------------------
r1667 | jeroen | 2009-08-17 14:20:20 +0200 (Mon, 17 Aug 2009) | 3 lines

The option to trace every assignment executed by the C backend is now available as argument.
Grin.CopyPropagation: Don't apply RightUnitLaw after a FetchNode expression.
Silly.GroupAllocs: removed this transformation as it is not compatible with the improved Silly.EmbedVars transformation.
------------------------------------------------------------------------
r1666 | atze | 2009-08-14 16:34:09 +0200 (Fri, 14 Aug 2009) | 1 line

fix of out-of-scope lambda lifting
------------------------------------------------------------------------
r1665 | atze | 2009-08-14 12:13:25 +0200 (Fri, 14 Aug 2009) | 1 line

fix of incorrect Core generation for irrefutable patterns
------------------------------------------------------------------------
r1664 | atze | 2009-08-14 08:42:41 +0200 (Fri, 14 Aug 2009) | 1 line

missing file
------------------------------------------------------------------------
r1663 | tlokhors | 2009-08-13 18:52:56 +0200 (Thu, 13 Aug 2009) | 2 lines

Test commit, do I have access?

------------------------------------------------------------------------
r1662 | atze | 2009-08-13 15:29:39 +0200 (Thu, 13 Aug 2009) | 13 lines

Cleanup: moved variant 7_2 specific files to its own directory ehc-7_2. Code has not been maintained, hence the move, but still is useful as an example.

Work on typed core:
- start with existentials
- optional unicode (hackish) + sugared pretty printing
- refactorisation because of module circularity, caused by:
  - fitsIn computes coercions,
  - computation of coercion requires partial tycore generation
  - tycore generation also deals with generation of tycore for types (and kinds)
  - tycore for types (and kinds) requires matching on types to steer the generation
  - matching on types is done by fitsIn. Bingo...
- this is not finished, because this ripples through much of the other code as well

------------------------------------------------------------------------
r1661 | Jeroen_Fokker | 2009-08-13 14:40:58 +0200 (Thu, 13 Aug 2009) | 1 line

Fresh variables introduced by Core->Grin are now guaranteed to be globally unique.
------------------------------------------------------------------------
r1660 | Jeroen_Fokker | 2009-08-11 16:04:06 +0200 (Tue, 11 Aug 2009) | 6 lines

Added all 16 simple ("imaginary") Nofib benchmark programs, adapted them to appease UHC,
and added a driver to run them with 3 compilers (2 UHC backends and GHC) on three inputs each.
Just type "make benchmark" and wait about an hour.

Typical compilation time: GHC 0.5 sec, UHC bytecode 5 sec, UHC wholeprogram 30 sec.
Typical runtime: UHC wholeprogram 3 to 10 times GHC, UHC bytecode 10 to 40 times GHC.
------------------------------------------------------------------------
r1659 | Jeroen_Fokker | 2009-07-06 17:23:32 +0200 (Mon, 06 Jul 2009) | 2 lines

The C backend wasted stack space by allocating each local variable to a separate stack position.
We now optimize this by sharing stack space among mutually exclusive variables.
------------------------------------------------------------------------
r1658 | atze | 2009-07-06 16:08:00 +0200 (Mon, 06 Jul 2009) | 7 lines

Kind polymorphism is used to generate corresponding typed core, currently for the one and only testcase:

data Equal a b = E (forall f . f a -> f b)

but some previous stuff now breaks.
All is still only for variant 8, but does not break later variants.

------------------------------------------------------------------------
r1657 | Jeroen_Fokker | 2009-07-03 18:21:48 +0200 (Fri, 03 Jul 2009) | 1 line

Two 1-page summaries of my work (in Dutch), one for laymen and one for peers, as required by NWO.
------------------------------------------------------------------------
r1656 | Jeroen_Fokker | 2009-07-02 10:56:29 +0200 (Thu, 02 Jul 2009) | 6 lines

Fixed glitch.

Weird situation: there was a type error in an attribute that is never used.
This dead code was eliminated in variant 99, because it lets AG generate case-expressions.
However, in variant 8, which lets AG generate let-expressions, in caused a problem.
Fix: removed the dead code in the source.
------------------------------------------------------------------------
r1655 | Jeroen_Fokker | 2009-07-01 17:20:01 +0200 (Wed, 01 Jul 2009) | 7 lines

(please make sure to rebuild all libraries when updating to this version)
Fixed a bug in Grin:SpecConst.
Cleaned up the Grin language on several places:
- the map describing all datatype constructors is now specified in terms of Grin tags instead of Core tags.
- annotations of PtrAnnot and EnumAnnot are now done by a data type, rather than a list of all tags.
- pseudo-tags World and Any now made obsolete.
- introduced a new binding type "Arity" for recording the arity of removed (inlined) functions.
------------------------------------------------------------------------
r1654 | atze | 2009-06-30 13:39:07 +0200 (Tue, 30 Jun 2009) | 22 lines

Kind polymorphism & propagation through types works.
E.g.:

data Equal a b = Equal (forall f . f a -> f b)

gives:

Equal :: forall a . a -> a -> *
E :: forall* a . forall b(a) . forall c(a) . (forall d . d b -> d c) -> Equal b c

Through value use this propagates:

v1 = E
v2 = E id
v3 = v1 id

gives:

v1: forall* a . forall b(a) . forall c(a) . (forall d . d b -> d c) -> Equal b c
v2: forall* a . forall b(a) . Equal b b
v3: forall* a . forall b(a) . Equal b b

------------------------------------------------------------------------
r1653 | atze | 2009-06-26 18:34:38 +0200 (Fri, 26 Jun 2009) | 20 lines

Work on typed core, or better said, prerequisites:
- quantified types also need their kind bound together with the quantified tyvar:
  - this info must be propagated, into quantification, and out of instantiation
  - because of kind polymorphism we may need to quantify over kinds for values as well

As an example, look at:

data D f a = DD (f a)

The kind of the type constructor D is (not fully implemented yet):
  D :: forall a . (a -> *) -> a -> *
The type of the value constructor DD is:
  DD :: forall* k . forall a(k -> *) . forall b . a b -> D a b

(The prettyprinting forall* is currently used for abstraction over a higher metalevel, the prettyprinting a(k->*) currently for  a :: k->*)

When used in typed core DD thus must be parameterized on three levels: kind, type, and value; D with kind and type.

The current implementation complications arise because the type inferencer has to compute the correct parameterizations to make all this fit together.

------------------------------------------------------------------------
r1652 | Jeroen_Fokker | 2009-06-26 18:14:29 +0200 (Fri, 26 Jun 2009) | 2 lines

Core2Grin: treat the unit type () as an enumeration type, because its constructor has arity 0.
Grin2Silly: better handling of PtrAnnot patterns.
------------------------------------------------------------------------
r1651 | Jeroen_Fokker | 2009-06-25 16:41:18 +0200 (Thu, 25 Jun 2009) | 1 line

Fixed too aggresive inlining of Silly variables.
------------------------------------------------------------------------
r1650 | Jeroen_Fokker | 2009-06-24 15:09:58 +0200 (Wed, 24 Jun 2009) | 1 line

C backend now correctly handles recursive instance declarations.
------------------------------------------------------------------------
r1649 | atze | 2009-06-20 11:56:30 +0200 (Sat, 20 Jun 2009) | 1 line

winxx newline convention -> unix convention
------------------------------------------------------------------------
r1648 | Jeroen_Fokker | 2009-06-19 17:14:29 +0200 (Fri, 19 Jun 2009) | 1 line

Refactoring of the Runtime System: share as much as possible among back ends.
------------------------------------------------------------------------
r1647 | Jeroen_Fokker | 2009-06-12 18:07:21 +0200 (Fri, 12 Jun 2009) | 1 line

New makefile for runtime system, refactoring of "main" function
------------------------------------------------------------------------
r1646 | atze | 2009-06-11 17:52:52 +0200 (Thu, 11 Jun 2009) | 1 line

hs09 final
------------------------------------------------------------------------
r1645 | Jeroen_Fokker | 2009-06-11 15:27:40 +0200 (Thu, 11 Jun 2009) | 1 line

Shortening the HS paper by 7 lines to fit in 12 pages.
------------------------------------------------------------------------
r1644 | atze | 2009-06-11 15:06:33 +0200 (Thu, 11 Jun 2009) | 1 line

hs09
------------------------------------------------------------------------
r1643 | Jeroen_Fokker | 2009-06-11 15:04:37 +0200 (Thu, 11 Jun 2009) | 1 line

ACM headers for HS09 paper
------------------------------------------------------------------------
r1642 | atze | 2009-06-11 14:57:04 +0200 (Thu, 11 Jun 2009) | 1 line

hs09
------------------------------------------------------------------------
r1641 | Jeroen_Fokker | 2009-06-11 14:03:39 +0200 (Thu, 11 Jun 2009) | 1 line

Processed referee's comments
------------------------------------------------------------------------
r1640 | atze | 2009-06-11 13:59:13 +0200 (Thu, 11 Jun 2009) | 7 lines

Work on typed Core:
- changes to type inferencer to better make explicitly available implicit info.

Renamed Core transformation FullLazy -> ANormal as to be the same in the HS paper.

HS paper corrections.

------------------------------------------------------------------------
r1639 | Jeroen_Fokker | 2009-06-10 16:35:49 +0200 (Wed, 10 Jun 2009) | 1 line

Towards sharing primitive functions among backends.
------------------------------------------------------------------------
r1638 | atze | 2009-06-09 14:45:36 +0200 (Tue, 09 Jun 2009) | 1 line

refactoring of RTS sources to allow better split and share between bc and C backends. Rerun ./configure cdeh
------------------------------------------------------------------------
r1637 | Jeroen_Fokker | 2009-06-09 12:47:04 +0200 (Tue, 09 Jun 2009) | 1 line

Toward implementing the getArgs function
------------------------------------------------------------------------
r1636 | atze | 2009-06-08 17:01:27 +0200 (Mon, 08 Jun 2009) | 7 lines

Work on typed Core, still being in its infancy because making implicit
type info explicit in a Core turns out to be harder than expected. AST
mostly fixed and stable (combi of Henk (lambda cube), GHC's system FC,
calling convention as types). Types are checked by a (yet) incomplete
Core type checker. Simple examples generate correct (that is, checked)
typed core in variant 8.

------------------------------------------------------------------------
r1634 | jleeuwes | 2009-06-05 16:57:42 +0200 (Fri, 05 Jun 2009) | 14 lines

Merge OneBigGrin onto the trunk.

Merging of modules into one (for full program analysis) is now done after
generating Grin, instead of after generating Core. The old behaviour is still
available in variant < 100, with the option "--early-mod-merge=yes".

This commit also fixes the Grin parser and tweaks the Grin pretty printer, to
make caching of Grin possible.

Missing grin files are generated on-the-fly from core files, so it should Just
Work (tm) without rebuilding the library. If it doesn't (and/or you encounter a
"Prelude.(!!): negative index"), you should remove and rebuild the library.


------------------------------------------------------------------------
r1632 | Jeroen_Fokker | 2009-06-04 18:03:23 +0200 (Thu, 04 Jun 2009) | 1 line

Full program analysis now specializes overloaded functions, even if the dictionaries involved have superclasses.
------------------------------------------------------------------------
r1624 | atze | 2009-05-24 22:34:17 +0200 (Sun, 24 May 2009) | 7 lines

- 64bits platform works (under Ubuntu 64 bits).
- empty annotation placeholders on the ASTs for HS, EH and Ty.
- preliminaries for unboxed types (scanner, parser (partially), type system (partially, issue: kind analysis, must look at kind of (->) because accepts more than kind *)).
  Allocated a new variant 18 for this.
- start of typed core (TyCore), refactoring of Ty AST to enable sharing (by type inference + typed core) of its definition.
  Option --tycore produces as a side effect of normal compilation. Don't expect too much yet ...

------------------------------------------------------------------------
r1623 | atze | 2009-05-19 14:16:23 +0200 (Tue, 19 May 2009) | 1 line

64bits debugging
------------------------------------------------------------------------
r1622 | atze | 2009-05-19 11:11:30 +0200 (Tue, 19 May 2009) | 1 line

64bits debugging
------------------------------------------------------------------------
r1618 | atze | 2009-05-18 15:41:15 +0200 (Mon, 18 May 2009) | 1 line

64bits debugging
------------------------------------------------------------------------
r1617 | atze | 2009-05-18 13:35:48 +0200 (Mon, 18 May 2009) | 1 line

64bits platform fixes (to be tested)
------------------------------------------------------------------------
r1616 | atze | 2009-05-15 16:50:48 +0200 (Fri, 15 May 2009) | 1 line

cleanup to avoid type warnings under Ubuntu for debug printf calls
------------------------------------------------------------------------
r1614 | atze | 2009-05-15 14:25:31 +0200 (Fri, 15 May 2009) | 1 line

work on 64bits platform
------------------------------------------------------------------------
r1613 | atze | 2009-05-15 10:44:25 +0200 (Fri, 15 May 2009) | 1 line

test make file adapted to /bin/sh (instead of usual /bin/bash)
------------------------------------------------------------------------
r1611 | atze | 2009-05-14 16:22:11 +0200 (Thu, 14 May 2009) | 2 lines

Added a roadmap.

------------------------------------------------------------------------
r1607 | amiddelk | 2009-05-14 15:34:23 +0200 (Thu, 14 May 2009) | 6 lines

Removed dependency on UU.DData.Seq and UU.DData.Scc.
(UU.DData does not exist anymore)

Partially regress-tested (some regress-tests fail on my system because 
I'm using a 64-bit architecture).

------------------------------------------------------------------------
r1606 | atze | 2009-05-13 17:03:08 +0200 (Wed, 13 May 2009) | 6 lines

Fix for issue 9: correcter check for allowed combi's of duplicate datatype field names.
This a bit involved:
- not ok: duplicate names for different datatypes
- ok: duplicate names for 1 datatype and different constructors, except when having a different type (so must be postponed until after type checking)
- not ok: duplicate names for 1 datatype and 1 constructor

------------------------------------------------------------------------
r1605 | atze | 2009-05-13 13:36:12 +0200 (Wed, 13 May 2009) | 1 line

fix (untested) for issue 10, further Cabal integration experimentation
------------------------------------------------------------------------
r1604 | Jeroen_Fokker | 2009-05-08 21:06:35 +0200 (Fri, 08 May 2009) | 1 line

Work on HS paper: last typos. This version is as submitted.
------------------------------------------------------------------------
r1603 | Jeroen_Fokker | 2009-05-08 20:48:26 +0200 (Fri, 08 May 2009) | 1 line

Work on HS paper: final version (I think). Did a last spell check (with a lot of hits!), and added a new paragraph in the introduction praising the many-transformations-approach. As a bonus, the new paragraph forces better page breaks on the other pages.
------------------------------------------------------------------------
r1602 | Jeroen_Fokker | 2009-05-08 20:02:35 +0200 (Fri, 08 May 2009) | 1 line

Work on HS paper: processed Doaitse's an my own last-minute corrections (including the correct characterization of the VSS:ICFP09 paper).
------------------------------------------------------------------------
r1601 | Jeroen_Fokker | 2009-05-08 17:06:20 +0200 (Fri, 08 May 2009) | 1 line

More HS paper: sundry additions
------------------------------------------------------------------------
r1600 | atze | 2009-05-08 16:35:12 +0200 (Fri, 08 May 2009) | 1 line

hs09
------------------------------------------------------------------------
