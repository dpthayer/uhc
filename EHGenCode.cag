% $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Generation of code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AGItf [ | | cmodule: CModule ]

SEM AGItf
  | AGItf       lhs         .   cmodule     =   CModule_Mod @lhs.baseName @expr.cexpr
%%]

%%[9
%%]

SEM AGItf
  | AGItf       lhs         .   cmodule     :=  CModule_Mod @lhs.baseName
                                                    (mkCExprLet CBindRec (mkCBindLForUIDL @prfCBindLMap (const True)) @expr.cexpr)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR Expr [ | | cexpr: CExpr ]

SEM Expr
  | IConst      loc         .   cexpr       =   CExpr_Int @int
  | CConst      loc         .   cexpr       =   CExpr_Char @char
  | Var         loc         .   cexpr       =   CExpr_Var @nm
  | Con         loc         .   cexpr       =   CExpr_Var @nm
  | Let         loc         .   cexpr       =   mkCExprLet CBindRec @decls.cbindL @body.cexpr
  | App         loc         .   cexpr       =   CExpr_App @func.cexpr @arg.cexpr
  | Lam         loc         .   cexpr       =   CExpr_Lam @arg.topNm (rceMatch [@arg.topNm] [CAlt_Alt [@arg.cpat] @body.cexpr] cvarUndefined)
  | Case        loc         .   cexpr       =   let  n = uidHNm @lUniq
                                                in   mkCExprLet CBindPlain [CBind_Bind n @expr.cexpr]
                                                        (rceMatch [n] @alts.caltL cvarUndefined)
  | TypeAs      loc         .   cexpr       =   @expr.cexpr
  | Undefined   loc         .   cexpr       =   cvarUndefined
%%]

%%[9
SEM Expr
  | Var Con     loc         .   cexpr       :=  foAppCoe @fo @lhs.finTyCnstr @lhs.cSubst (CExpr_Var @nm)
  | IConst      loc         .   cexpr       :=  foAppCoe @fo @lhs.finTyCnstr @lhs.cSubst (CExpr_Int @int)
  | CConst      loc         .   cexpr       :=  foAppCoe @fo @lhs.finTyCnstr @lhs.cSubst (CExpr_Char @char)
  | Let         loc         .   cexpr       :=  mkCExprLet CBindRec
                                                    (@decls.cbindL
                                                        ++ mkCBindLForUIDL @prfCBindLMap (not.(`elementOf` @quantPrIdSet))
                                                        ++ mkCBindLForUIDL @bodyPrfCBindLMap (const True))
                                                    @body.cexpr
  | App AppImpl
                loc         .   cexpr       :=  CExpr_App
                                                    (coeWipeWeave @lhs.finTyCnstr @lhs.cSubst @appImplsCoeL []
                                                      `coeEvalOn` @func.cexpr)
                                                    @arg.cexpr
  | Lam LamImpl loc         .   cexpr       :=  coeWipeWeave @lhs.finTyCnstr @cSubst @lamBodyCoeL @lamArgCoeL `coeEvalOn` @body.appFunCExpr
  | AppTop      loc         .   cexpr       =   coeWipeWeave @lhs.finTyCnstr @cSubst [] @lamArgCoeL `coeEvalOn` @expr.cexpr
  | Parens      loc         .   cexpr       =   @expr.cexpr
  | TypeAs      loc         .   cexpr       :=  foAppCoe @fo @lhs.finTyCnstr @lhs.cSubst @expr.cexpr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM Expr
  | Rec         loc         .   rcexpr          =   if @recExpr.isExtFromEmpty
                                                    then foldl CExpr_App CExpr_Tup (map snd . tyRowCanonOrder $ @recExpr.cexprL)
                                                    else @recExpr.cexpr
                loc         .   cexpr           =   @rcexpr
  | Sel         loc         .   offset          =   CExpr_Int (tyRecOffset @lbl (@lhs.finTyCnstr |=> @expr.ty))
                            .   cexpr           =   CExpr_TupSel @expr.cexpr ctagNone @offset
%%]

%%[10
SEM Expr
  | Sel         loc         .   offset          :=  @lhs.cSubst `cAppSubst` CExpr_Hole @prUid
%%]
  | Rec         loc         .   cexpr           :=  foAppCoe @fo @lhs.finTyCnstr @lhs.cSubst @rcexpr

%%[8
ATTR RecExpr [ | | cexpr: CExpr ^^ cexprL: {AssocL HsName CExpr} ]
ATTR RecExpr [ | | isExtFromEmpty: Bool ]

SEM RecExpr
  | Empty       lhs         .   isExtFromEmpty  =   True
  | Expr Upd    lhs         .   isExtFromEmpty  =   False
  | Ext         lhs         .   isExtFromEmpty  =   @recExpr.isExtFromEmpty

SEM RecExpr
  | Ext Upd     loc         .   offset          =   CExpr_Int (tyRecOffset @nm (@lhs.finTyCnstr |=> @recExpr.ty))
  | Empty       loc         .   cexpr           =   CExpr_Tup
                lhs         .   cexprL          =   []
  | Expr        loc         .   cexpr           =   @expr.cexpr
                lhs         .   cexprL          =   []
  | Ext         (loc.cexpr,lhs.cexprL)          =   if @knRecHasLab
                                                    then (CExpr_TupIns @recExpr.cexpr ctagNone @offset @expr.cexpr
                                                         ,(@nm,@expr.cexpr) : @recExpr.cexprL)
                                                    else (@recExpr.cexpr,@recExpr.cexprL)
  | Upd         (loc.cexpr,lhs.cexprL)          =   if @knRecHasLab
                                                    then (CExpr_TupUpd @recExpr.cexpr ctagNone @offset @expr.cexpr
                                                         ,(@nm,@expr.cexpr) : @recExpr.cexprL)
                                                    else (@recExpr.cexpr,@recExpr.cexprL)
%%]

%%[10
SEM RecExpr
  | Ext Upd     loc         .   offset          :=  @lhs.cSubst `cAppSubst` CExpr_Hole @prUid
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering coercions/cexpr for app args for optimization by weaving above apptop
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR Expr [ | | appArgCoeL: {[Coe]} ^^ appFunCExpr: CExpr ]

SEM Expr
  | App AppImpl
                lhs         .   appArgCoeL      =   @func.appArgCoeL ++ @appImplsCoeL ++ [mkAppCoe emptyCBindLMap [@arg.cexpr]]
                            .   appFunCExpr     =   @func.appFunCExpr
  | AppTop      lhs         .   (appArgCoeL,appFunCExpr)
                                                =   if null @lamArgCoeL
                                                    then (@expr.appArgCoeL,@expr.appFunCExpr)
                                                    else ([],@cexpr)
  | * - App AppImpl AppTop
                lhs         .   appArgCoeL      =   []
                            .   appFunCExpr     =   @cexpr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Decl
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR Decls Decl AllDataConstr [ | | cbindL USE {++} {[]}: CBindL ]

SEM Decl
  | Val         lhs         .   cbindL          =   [CBind_Bind @patExpr.topNm @expr.cexpr] ++ @patExpr.cbindL
  | TySig       lhs         .   cbindL          =   []
  | FFI         lhs         .   cbindL          =   [CBind_Bind @nm (CExpr_Var (HNm @impEnt))]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
cdictOffset :: HsName -> Ty -> CExpr
cdictOffset n r = CExpr_Int . tyRecOffset n $ r
%%]

%%[9
SEM Decl
  | Class       lhs         .   cbindL      =   let  nDflt = rulNmEvid . pigiRule $ @pigi
                                                     nD = hsnPrefix "$self_" nDflt
                                                     nR = hsnPrefix "$res_" nDflt
                                                     lookupBnd n = let b = map (\(CBind_Bind n v) -> (n,v)) @decls.cbindL
                                                                   in  lookup n b
                                                     dDflt = mkCExprLam [nD]
                                                                (mkCExprLetRec
                                                                    [CBind_Bind nR
                                                                        (mkCExprApp CExpr_Tup
                                                                            (map (\(n,_) -> maybe cvarUndefined id (lookupBnd n)) . tyRowCanonOrder . snd . tyRecExts $ @clsTyRec))]
                                                                    (CExpr_Var nR)
                                                                )
                                                     x = HNm "x"
                                                     vx = CExpr_Var x
                                                in   [CBind_Bind nDflt dDflt]
                                                     ++ [ CBind_Bind n (x `CExpr_Lam` (CExpr_TupSel vx ctagNone (cdictOffset n @clsTyRec) `CExpr_App` vx))
                                                        | (n,_) <- @clsFldL
                                                        ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
SEM Decl
  | Instance    lhs         .   cbindL      =   let  nDflt = rulNmEvid . pigiRule $ @pigi
                                                     nR = hsnPrefix "$res_" @dictNm
                                                     mkSet d n v = CExpr_TupUpd d ctagNone (cdictOffset n . head $ @recTyL) v
                                                     dD = mkCExprLam @ctxtArgNmL
                                                                (mkCExprLetRec
                                                                    ([CBind_Bind nR
                                                                        (foldr
                                                                            (\(CBind_Bind n v) d -> mkSet d n v)
                                                                            (foldr
                                                                                (\(n,e) d -> mkSet d n e)
                                                                                (CExpr_App (CExpr_Var nDflt) (CExpr_Var nR))
                                                                                (zip @supClsNmL @supEvidL))
                                                                            @decls.cbindL)]
                                                                     ++ mkCBindLForUIDL (@prfCBindLMap `plusFM` @supPrfCBindLMap) (const True))
                                                                    (CExpr_Var nR)
                                                                )
                                                in   [CBind_Bind @dictNm (@cSubst `cAppSubst` dD)]
  | InstanceIntro
                lhs         .   cbindL      =   [CBind_Bind @dictNm @expr.cexpr]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR CaseAlt [ | | calt: CAlt ]
ATTR CaseAlts [ | | caltL: CAltL ]

SEM CaseAlt
  | Pat         lhs         .   calt        =   CAlt_Alt [@patExpr.cpat] @expr.cexpr

SEM CaseAlts
  | Nil         lhs         .   caltL       =   []
  | Cons        lhs         .   caltL       =   @hd.calt : @tl.caltL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pat for use in case alt
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR PatExpr [ | | cpat: CPat ]

SEM PatExpr
  | Var VarAs AppTop Rec Con
                loc         .   cpNm        =   maybe (CPatNmUniq @topNm) CPatNmOrig @mbTopNm
  | Var         lhs         .   cpat        =   CPat_Var @cpNm
  | VarAs       lhs         .   cpat        =   case @patExpr.cpat of
                                                    CPat_Con _ t tn ps  -> CPat_Con @cpNm t tn ps
                                                    _                   -> @patExpr.cpat
  | AppTop Con  loc         .   finResTy    =   @lhs.finTyCnstr |=> @knResTy
                            .   finResTyData
                                            =   let  (c,_)  = tyAppFunArgs @finResTy
                                                     n      = tyConNm c
                                                in   tgiData . fromJust . tyGamLookup n $ @lhs.tyGam
                            .   tag         =   Just (tyRecOffset @appFunNm @finResTyData)
  | Rec         loc         .   tag         =   ctagNone
  | AppTop Con Rec
                loc         .   cpatBinds   =   map (\(o,(n,p)) -> CPatBind_Bind (CExpr_Int o) n p) . zip [0..] . tyRowCanonOrder . reverse $ @cpbindL
                lhs         .   cpat        =   CPat_Con @cpNm @tag @appFunNm @cpatBinds
  | CConst IConst
                lhs         .   cpat        =   CPat_Undef

ATTR AllPatExpr [ | | cpbindL: {AssocL HsName CPat} ]

SEM RecPatExpr
  | Empty       lhs         .   cpbindL     =   []
  | Ext         lhs         .   cpbindL     =   (@nm,@patExpr.cpat) : @recPatExpr.cpbindL

SEM PatExpr
  | App         lhs         .   cpbindL     =   (hsnUnknown,@arg.cpat) : @func.cpbindL
  | AppTop      loc         .   cpbindL     =   @patExpr.cpbindL
  | Rec         loc         .   cpbindL     =   @recPatExpr.cpbindL
  | Con         loc         .   cpbindL     =   []
  | * - App Con
                lhs         .   cpbindL     =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pat for use in (recursive) let bindings (lazy unpacking)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllPatExpr [ | | cbindL USE {++} {[]}: CBindL ]
ATTR AllPatExpr [ ceParentNm: HsName | | ]

SEM PatExpr
  | AppTop Rec  loc         .   cbindL      =   concat
                                                .  map  (\(CPatBind_Bind o _ p)
                                                            -> let  b n = [CBind_Bind n (CExpr_TupSel (CExpr_Var @lhs.ceParentNm) @tag o)]
                                                               in   case cpatVarNm p of
                                                                        CPatNmOrig n                          -> b n
                                                                        CPatNmUniq n | not (null @cbindLSub)  -> b n
                                                                        _                                     -> []
                                                        )
                                                $  @cpatBinds
                lhs         .   cbindL      =   @cbindL ++ @cbindLSub
  | AppTop      loc         .   cbindLSub   =   @patExpr.cbindL
  | Rec         loc         .   cbindLSub   =   @recPatExpr.cbindL
  | App         arg         .   ceParentNm  =   cpatNmNm (cpatVarNm @arg.cpat)

SEM RecPatExpr
  | Ext         patExpr     .   ceParentNm  =   cpatNmNm (cpatVarNm @patExpr.cpat)

SEM Decl
  | Val         patExpr     .   ceParentNm  =   @patExpr.topNm

SEM CaseAlt
  | Pat         patExpr     .   ceParentNm  =   @patExpr.topNm

SEM Expr
  | Lam         arg         .   ceParentNm  =   @arg.topNm
%%]

%%[9
SEM Expr
  | LamImpl     arg         .   ceParentNm  =   @arg.topNm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Reordering of case expression
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
rceSplit :: (CAlt -> Bool) -> CAltL -> [CAltL]
rceSplit f []   = []
rceSplit f [x]  = [[x]]
rceSplit f (x:xs@(x':_))
  | f x == f x'  =  let  (z:zs) = rceSplit f xs
                    in   (x:z) : zs
  | otherwise    =  [x] : rceSplit f xs

rceAltsForCon :: CAltL -> HsName -> CAltL
rceAltsForCon alts conNm
  = [a | a@(CAlt_Alt (CPat_Con _ _ nm _ : _) _) <- alts, nm == conNm]

rceRebinds :: HsName -> CAltL -> CBindL
rceRebinds nm alts = [ CBind_Bind n (CExpr_Var nm) | (CPatNmOrig n) <- caltLPatNms alts, n /= nm ]

rceMatchVar :: [HsName] -> CAltL -> CExpr -> CExpr
rceMatchVar (arg:args') alts ce
  =  let  remMatch  = rceMatch args' [CAlt_Alt remPats e | (CAlt_Alt (CPat_Var n : remPats) e) <- alts] ce
     in   mkCExprLet CBindPlain (rceRebinds arg alts) remMatch

rceMatchCon :: [HsName] -> CAltL -> CExpr -> CExpr
rceMatchCon args@(arg:args') alts ce
  =  let  arg'   =  hsnPrefix "!" arg
          alts'  =  map
                      (\alts
                        ->  let  (subAlts,subAltSubNms)
                                               =  unzip
                                                    [ (CAlt_Alt (pats ++ ps) e, map (cpatNmNm . cpatVarNm) pats)
                                                    | (CAlt_Alt (CPat_Con _ _ _ pbinds : ps) e) <- alts,
                                                      let pats = [ p | (CPatBind_Bind _ _ p) <- pbinds ]
                                                    ]
                                 subMatch      =  rceMatch (head subAltSubNms ++ args') subAlts ce
                                 altPat        =  case head alts of
                                                    CAlt_Alt (CPat_Con n t tn pbinds : _) _
                                                      -> CPat_Con n t tn [ CPatBind_Bind o n (CPat_Var (cpatVarNm p))| (CPatBind_Bind o n p) <- pbinds ]
                            in   CAlt_Alt [altPat] (mkCExprLet CBindPlain (rceRebinds arg' alts) subMatch)
                      )
                 .  groupBy (\a1 a2 -> caltTag a1 == caltTag a2)
                 .  sortBy (\a1 a2 -> caltTag a1 `compare` caltTag a2)
                 .  filter (not . null . caltPatL)
                 $  alts
     in   ceStrictIn arg' (CExpr_Var arg) (\n -> CExpr_Case n alts' ce)

rceMatchVarCon :: [HsName] -> CAltL -> CExpr -> CExpr
rceMatchVarCon args alts@(alt:_) ce
  |  caltIsVar alt  = rceMatchVar args alts ce
  |  otherwise      = rceMatchCon args alts ce

rceMatch :: [HsName] -> CAltL -> CExpr -> CExpr
rceMatch [] []    ce =  ce
rceMatch [] alts  ce
  =  case [ e | (CAlt_Alt [] e) <- alts ] of
       (e:_)  -> e
       _      -> ce
rceMatch args alts ce
  =  foldr
        (\alts e
           ->  case e of
                  CExpr_Var _
                     ->  rceMatchVarCon args alts e
                  _  ->  let  bnm = HNm ("_casecont_" ++ (show . cpatVarNm . caltPat . head $ alts))
                              vc = rceMatchVarCon args alts (CExpr_Var bnm)
                         in   mkCExprLet CBindPlain [CBind_Bind bnm e] vc
        )
        ce
     $ (rceSplit caltIsVar alts)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllDataConstr [ dataAltTy: Ty | | ]

SEM DataConstr
  | Constr      loc         .   tag         =   tyRecOffset @conNm @lhs.dataAltTy
                lhs         .   cbindL      =   let  len = length @fields.tyL
                                                     nms = map (\i -> HNm ("x" ++ show i)) [1..len]
                                                in   [CBind_Bind @conNm
                                                        (mkCExprLam nms
                                                          (mkCExprApp (CExpr_App CExpr_Tup (CExpr_Int @tag))
                                                            (map CExpr_Var nms)))
                                                     ]
%%]

