% $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gamma's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllFuncDep [ | tyGam: TyGam | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
tyPrLToSupNmL :: TyL -> [HsName]
tyPrLToSupNmL = zipWith (\i p -> hsnSuffix (tyPredNm p) (show i)) [1..]
%%]

%%[9
SEM Decl
  | Class       ctxtPrExprs     .   tyGam           =   gamPushNew @lhs.patTyGam
                decls           .   gathTySigGam    =   gamPushNew @lhs.gathTySigGam
                loc             .   (lSigGam,_)     =   gamPop @decls.gathTySigGam
                                .   clsTySigGam     =   valGamMapTy (\t -> [@prExpr.ty] `mkTyArrow` t) @lSigGam
                                .   supClsNmL       =   tyPrLToSupNmL @ctxtPrExprs.tyL
                                .   clsFldL         =   assocLMapSnd vgiTy (gamToAssocL @clsTySigGam)
                                .   clsTyRec        =   mkTyRec (@clsFldL ++ zip @supClsNmL (repeat Ty_Any))
                                .   pigi            =   let  k =  mkNewTyVar @lUniq
                                                             n =  uidHNm @lUniq
                                                             r =  Rule
                                                                    { rulRuleTy    = tyQuantifyClosed (@ctxtPrExprs.tyL `mkTyArrow` @prExpr.ty)
                                                                    , rulMkEvid    = \_ -> CExpr_Var n
                                                                    , rulNmEvid    = n
                                                                    , rulId        = @lUniq
                                                                    , rulCost      = CostInt 10
                                                                    , rulFuncDeps  = @funcDeps.funcDeps
                                                                    }
                                                        in   PrIntroGamInfo (tyQuantifyClosed ([@prExpr.ty] `mkTyArrow` @clsTyRec)) k r
                                .   elimRules       =   let  mkR sub sup supNm
                                                               =  Rule
                                                                    { rulRuleTy    = tyQuantifyClosed ([sub] `mkTyArrow` sup)
                                                                    , rulMkEvid    = \[sub] -> CExpr_TupSel sub ctagNone
                                                                                                 (CExpr_Int . tyRecOffset supNm $ @clsTyRec)
                                                                    , rulNmEvid    = hsnUnknown
                                                                    , rulId        = uidStart
                                                                    , rulCost      = CostInt (2 * costBase)
                                                                    , rulFuncDeps  = []
                                                                    }
                                                        in   zipWith (\p n -> (tyPredNm p,mkR @prExpr.ty p n)) @ctxtPrExprs.tyL @supClsNmL
                lhs             .   patTyGam        =   @lhs.patTyGam
                                .   tyGam           =   @lhs.tyGam
                                .   gathTySigGam    =   gamAddGam (valGamMapTy tyQuantifyClosed @clsTySigGam) @lhs.gathTySigGam
                                .   patPrIntroGam   =   gamAdd (tyPredNm @prExpr.ty) @pigi @lhs.patPrIntroGam
                                .   patPrElimGam    =   foldr (uncurry peGamAdd) @lhs.patPrElimGam @elimRules
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Functional dependency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllFuncDep [ clsTyArgs: TyL | | funcDeps USE {++} {[]} : {[ClsFuncDep]} ]

SEM FuncDep
  | Dep         lhs             .   funcDeps        =   let  l v = maybe (-1) id . elemIndex v $ @lhs.clsTyArgs
                                                        in   [(map l @fromTvs.tyL, map l @toTvs.tyL)]

SEM Decl
  | Class       loc             .   clsTyArgs       =   tyAppArgs . predTy . tyPred $ @prExpr.ty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
SEM Decl
  | Instance    ctxtPrExprs     .   tyGam           =   gamPushNew @lhs.patTyGam
                loc             .   instClsNm       =   tyPredNm @prExpr.ty
                                .   instId          =   @lUniq
                                .   (dictNm,inclForElim)
                                                    =   maybe (uidHNm @instId,True) id @mbNmElim
                                .   ctxtClsNmL      =   map tyPredNm @ctxtPrExprs.tyL
                                .   (pigiL,nmErrs)  =   let  (pL,nLL)  = unzip
                                                                       . map (\n -> maybe (emptyPIGI,[n]) (\p -> (p,[])) . gamLookup n $ @lhs.prIntroGam)
                                                                       $ (@instClsNm : @ctxtClsNmL)
                                                             nL        = concat nLL
                                                        in   (pL,if null nL then [] else [Err_NamesNotIntrod nL])
                                .   pigi            =   head @pigiL
                                .   prTyL           =   tyFixTyVars (@prExpr.ty : @ctxtPrExprs.tyL)
                                .   supPrTyL        =   let  t      =  rulRuleTy . pigiRule $ @pigi
                                                             st     =  mkNewTyVarL (tyArrowArity . tyQuant $ t) @lUniq4 `mkTyArrow` head @prTyL
                                                             fo     =  fitsIn predFIOpts emptyFE @lUniq3 t st
                                                        in   tyArrowArgs . foTy $ fo
                                .   supPrL          =   map tyPred @supPrTyL
                                .   supClsNmL       =   tyPrLToSupNmL @supPrTyL
                                .   prL             =   map tyPred @prTyL
                                .   recTyL          =   let  f u p pr
                                                               =  let  v = mkNewTyVar @lUniq
                                                                       fo = fitsIn predFIOpts emptyFE u (pigiPrToEvidTy p) ([pr] `mkTyArrow` v)
                                                                  in   snd (tyArrowArgRes (foTy fo))
                                                        in   zipWith3 f  (mkNewLevUIDL (1 + length @ctxtClsNmL) @lUniq2)
                                                                         @pigiL @prTyL
                                .   ctxtToInstTy    =   tail @prTyL `mkTyArrow` head @prTyL
                                .   ctxtRecToInstRecTy
                                                    =   tail @recTyL `mkTyArrow` head @recTyL
                decls           .   tySigGam        =   assocLToGam . assocLMapSnd ValGamInfo . snd . tyRecExts . head $ @recTyL
                loc             .   elimRule        =   mkInstElimRule @dictNm @instId (length @ctxtPrExprs.tyL) (tyQuantifyClosed @ctxtToInstTy)
                lhs             .   patTyGam        =   @lhs.patTyGam
                                .   tyGam           =   @lhs.tyGam
                                .   gathTySigGam    =   (maybe id (\(n,_) g -> gamAdd n (ValGamInfo (tyQuantifyClosed @ctxtRecToInstRecTy)) g) @mbNmElim) @lhs.gathTySigGam
                                .   patValGam       =   @lhs.patValGam
                                .   patPrElimGam    =   (if @inclForElim then peGamAdd @instClsNm @elimRule else id) @lhs.patPrElimGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Kind inference
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
SEM Decl
  | Class       loc             .   fo              =   fitsIn  weakFIOpts emptyFE @lUniq2
                                                                (@lhs.kiCnstr |=> (@prExpr.kiL `mkTyArrow` kiStar))
                                                                (@lhs.kiCnstr |=> (pigiKi @pigi))
                decls           .   kiCnstr         =   foCnstr @fo |=> @prExpr.kiCnstr
%%]
