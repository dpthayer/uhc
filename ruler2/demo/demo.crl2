% $Id: demo.crl2 231 2005-06-07 14:39:41Z atze $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%include ruler.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Preambles
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
preamble tex "%include lhs2TeX.fmt\n%include afp.fmt\n"
%%]

%%[3
preamble ag "%%[0\n%include lhs2TeX.fmt\n%include afp.fmt\n%%]\n"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Externally defined
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.ext
extern Ty_Int
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Formatting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.fmt.Ty_Int
format tex Ty_Int = Int
%%]

%%[1.fmt
format tex Gam = Gamma
format tex gam = Gamma

format tex Ty = sigma
format tex ty = sigma
%%]

%%[2.fmt
format tex tv = v

format tex cnstr.inh = Cnstr..k
format tex cnstr.syn = Cnstr
format tex cnstr     = Cnstr
%%]

%%[3.fmt
format ag cnstr     = c
format ag gam       = g
%%]
format ag ty        = t

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Rewriting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[3.rw.TyArr
rewrite ag def  (a | Ty) -> (r | Ty) = ((a) `Ty_Arr` (r) | Ty)
%%]

%%[3.rw.Cnstr
rewrite ag def  (c1 | Cnstr) (c2 | Cnstr) (v | a)
                  = (c1 |=> c2 |=> (v) | a)
%%]

%%[3.rw.Rest
rewrite ag def  (c | Cnstr) (v | a) = (c |=> (v) | a)
rewrite ag def  (i :-> (t|Ty)) = ([(i,t)] | Gam)
rewrite ag def  (g1 | Gam), (g2 | Gam) = ((g1) ++ (g2) | Gam)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% View hierarchy
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.viewhierarchy
viewhierarchy = E < HM < AG
%%]

%%[3.viewhierarchy -1.viewhierarchy
viewhierarchy = E < HM < AG < 3
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr scheme
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.expr.scm
scheme expr =
%%]
%%[3.expr.scm -1.expr.scm
scheme expr "Expr" =
%%]
%%[1.expr.scm.E
  view E =
    holes [ | e: Expr, gam: Gam, ty: Ty | ]
    judgespec gam :- e : ty
    judgeuse tex gam :-.."e" e : ty
%%]

%%[2.expr.scm.HM
  view HM =
    holes [ e: Expr, gam: Gam | thread cnstr: Cnstr | ty: Ty ]
    judgespec cnstr.inh ; gam :-.."e" e : ty ~> cnstr.syn
    judgeuse - tex
%%]

%%[3.expr.scm.AG
  view AG =
    holes [ node e: Expr | | ]
%%]
    judgespec cnstr.inh ; gam :-.."e" e : ty ~> cnstr.syn

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr rules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.expr.base.rls
rules expr.base scheme expr "Expression type rules" =
%%]
%%[1.rl.e.int
  rule e.int =
%%]
%%[3.rl.e.int -1.rl.e.int
  rule e.int "Int" =
%%]
%%[1.rl.e.int.E
    view E =
      -
      judge R : expr = gam :- int : Ty_Int
%%]
%%[2.rl.e.int.HM
    view HM =
      -
      judge R : expr
          | cnstr.syn  = cnstr.inh
%%]

%%[1.rl.e.var
  rule e.var =
%%]
%%[3.rl.e.var -1.rl.e.var
  rule e.var "Var" =
%%]
%%[1.rl.e.var.E
    view E =
      judge G : gamLookupIdTy = i :-> ty `elem` gam
      judge I : tyInst = ty.i `=` inst(ty)
      -
      judge R : expr = gam :- i : ty.i
%%]
%%[2.rl.e.var.HM
    view HM =
      -
      judge R : expr
          | cnstr.syn = cnstr.inh
%%]

%%[1.rl.e.app
  rule e.app =
%%]
%%[3.rl.e.app -1.rl.e.app
  rule e.app "App" =
%%]
%%[1.rl.e.app.E
    view E =
      judge A : expr = gam :- a : ty.a
      judge F : expr = gam :- f : (ty.a -> ty)
      -
      judge R : expr = gam :- (f a) : ty
%%]
%%[2.rl.e.app.HM
    view HM =
      judge V : tvFresh  =  tv
      judge M : match    =  (ty.a -> tv) <=> (cnstr.a ty.f)
                              ~> cnstr
      judge F : expr
          | ty         = ty.f
          | cnstr.syn  = cnstr.f
      judge A : expr
          | cnstr.inh  = cnstr.f
          | cnstr.syn  = cnstr.a
      -
      judge R : expr
          | ty         = cnstr cnstr.a tv
          | cnstr.syn  = cnstr cnstr.a
%%]
%%[3.rl.e.app.AG
    view AG =
      -
      judge R : expr
          | e = ((node 1 = f) (node 2 = a))
%%]

%%[1.rl.e.lam
  rule e.lam =
%%]
%%[3.rl.e.lam -1.rl.e.lam
  rule e.lam "Lam" =
%%]
%%[1
    view E =
      judge B : expr = ((i :-> ty.i) , gam) :- b : ty.b
      -
      judge R : expr = gam :- (\i -> b) : (ty.i -> ty.b)
%%]
%%[2
    view HM =
      judge V : tvFresh = tv
      judge B : expr
          | cnstr.syn = cnstr.b
          | gam = (i :-> tv) , gam
      -
      judge R : expr
          | ty = cnstr.b tv -> ty.b
          | cnstr.syn = cnstr.b
%%]
%%[3
    view AG =
      -
      judge R : expr
          | e = \i -> (node 1 = b)
%%]

%%[1.rl.e.let
  rule e.let =
%%]
%%[3.rl.e.let -1.rl.e.let
  rule e.let "Let" =
%%]
%%[1
    view E =
      judge D : expr = gam :- e : ty.e
      judge B : expr = ((i :-> ty.e), gam) :- b : ty.b
      -
      judge R : expr = gam :- (let i `=` e in b) : ty.b
%%]
%%[2
    view HM =
      judge V : tvFresh = tv
      judge D : expr
          | cnstr.syn = cnstr.e
          | gam = (i :-> tv) , gam
      judge B : expr
          | cnstr.inh = cnstr.e
          | cnstr.syn = cnstr.b
          | gam = (i :-> ty.g) , gam
      judge G :  tyGen = ty.g
                   `=` forall (ftv(ty.e) \\ ftv(cnstr.e gam))
                       `.` ty.e
      -
      judge R : expr
          | cnstr.syn = cnstr.b
%%]
%%[3
    view AG =
      -
      judge R : expr
          | e = let i `=` (node 1 = e) in (node 2 = b)
%%]

%%[1.rl.e.gen
  rule e.gen viewsel E =
%%]
%%[1
    view E =
      judge G : expr = gam :- e : sigma
      -
      judge R : expr = gam :- e : (forall tv..._ `.` sigma)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Match two types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.match
relation match =
  view HM =
    holes [ ty.l: Ty, ty.r: Ty | | cnstr: Cnstr ]
    judgespec ty.l <=> ty.r ~> cnstr
    judgeuse ag (cnstr,mtErrs) `=` (ty.l) <=> (ty.r)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Lookup ty in gam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.gamLookupIdTy
relation gamLookupIdTy =
  view E =
    holes [ | nm: Nm, gam: Gam, ty: Ty | ]
    judgespec nm :-> ty `elem` gam
%%]
%%[3.gamLookupIdTy
  view AG =
    holes [ nm: Nm, gam: Gam | | ty: Ty ]
    judgespec nm :-> ty `elem` gam
    judgeuse ag (ty,nmErrs) `=` gamLookup nm gam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fresh type variables
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.tvFresh
relation tvFresh =
  view HM =
    holes [ | | tv: Ty ]
    judgespec tv
    judgeuse tex tv (text "fresh")
    judgeuse ag tv `=` Ty_Var uniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type instantiation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.tyInst
relation tyInst =
  view E =
    holes [ | ty: Ty, ty.i: Ty | ]
    judgespec ty.i `=` inst(ty)
%%]
%%[3.tyInst
  view AG =
    holes [ ty: Ty | | ty.i: Ty ]
    judgespec ty.i `=` inst(ty)
    judgeuse ag ty.i `=` tyInst uniq (ty)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type generalisation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.tyGen
relation tyGen =
  view HM =
    holes [ ty: Ty, gam: Gam | | ty.g: Ty ]
    judgespec ty.g `=` forall (ftv(ty) \\ ftv(gam)) `.` ty
%%]
%%[3.tyGen
  view AG =
    judgeuse ag  ty.g `=` mkTyAll (ftv(ty) \\ ftv(gam)) (ty)
    judgespec ty.g `=` forall (ftv(ty) \\ ftv(gam)) `.` ty
%%]

