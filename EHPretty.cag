% $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.Base.ExprSimple
ATTR AllNT AGItf [ | | pp USE {>-<} {empty} : PP_Doc ]

SEM Expr
  | IConst      loc     .  pp       =   pp (show @int)
  | CConst      loc     .  pp       =   pp (show @char)
  | Var         loc     .  pp       =   pp @nm
  | Con         loc     .  pp       =   ppCon @nm
  | Let         loc     .  pp       =   "let"
                                        >#< (@decls.pp >-< @ppExtra)
                                        >-< @errLetPP
                                        >-< "in" >#< @body.pp
                                        >-< @errBodyPP
  | App         loc     .  pp       =   @func.pp >#< @arg.pp
  | Parens      loc     .  pp       =   pp_parens @expr.pp
%%]

%%[1.Base.ExprComplex
  | AppTop      loc     .  pp       =   ppAppTop  (@expr.appFunNm,@expr.appFunPP)
                                                  @expr.appArgPPL @expr.pp
  | Lam         loc     .  pp       =   "\\" >|< @arg.pp >#< "->" >#< @body.pp
%%]

%%[1.Base.Rest
SEM Decl
  | Val         lhs     .  pp       =   @patExpr.pp >#< "=" >#< @expr.pp
  | TySig       loc     .  tyPP     =   @tyExpr.pp
                        .  pp       =   @nm >#< "::" >#< @tyPP

SEM PatExpr
  | IConst      loc     .  pp       =   pp (show @int)
  | CConst      loc     .  pp       =   pp (show @char)
  | Var         loc     .  pp       =   pp @nm
  | VarAs       loc     .  pp       =   pp @nm >|< "@" >|< @patExpr.pp
  | Con         loc     .  pp       =   ppCon @nm
  | App         loc     .  pp       =   @func.pp >#< @arg.pp
  | AppTop      loc     .  pp       =   ppAppTop  (@patExpr.appFunNm,@patExpr.appFunPP)
                                                  @patExpr.appArgPPL @patExpr.pp
  | Parens      loc     .  pp       =   pp_parens @patExpr.pp

SEM TyExpr
  | Con         loc     .  pp       =   ppCon @nm
  | App         loc     .  pp       =   @func.pp >#< @arg.pp
  | AppTop      loc     .  pp       =   ppAppTop  (@tyExpr.appFunNm,@tyExpr.appFunPP)
                                                  @tyExpr.appArgPPL @tyExpr.pp
  | Parens      loc     .  pp       =   pp_parens @tyExpr.pp

SEM Decls
  | Cons        lhs     .  pp       =   @hd.pp >-< @errPP >-< @tl.pp
%%]

%%[2.Wild.pp
SEM TyExpr
  | Wild        loc     .  pp       =   pp "..."

SEM Decl
  | TySig       loc     .  tyPP     :=  if null @tyExpr.tyVarWildL
                                        then  @tyExpr.pp
                                        else  ppTy @finalTy
%%]

%%[3
SEM TyExpr
  | Var         loc     .  pp       =   pp @nm
%%]

%%[4
SEM TyExpr
  | Quant       loc     .  pp       =   showTyQu @qu >#< @tyVar >#< "." >#< @tyExpr.pp
%%]

%%[5
ATTR TyVars DataConstrs CaseAlts [ | | ppL: PP_DocL ]
ATTR TyExprs [ | | ppL: PP_DocL ]

SEM Decl
  | Data        loc     .  pp       =   "data"  >#< @tyNm >#< ppSpaced @tyVars.ppL
                                                >#< "=" >#< ppListSepFill "" "" " | " @constrs.ppL

SEM Expr
  | Case        loc     .  pp       =   "case"  >#< @expr.pp >#< "of"
                                                >-< indent 2 (vlist @alts.ppL)

SEM CaseAlt
  | Pat         loc     .  pp       =   @patExpr.pp >|< @ppExtra >#< "->" >#< @expr.pp
                        .  ppExtra  =   empty

SEM CaseAlts
  | Nil         lhs     .  ppL      =   []
  | Cons        lhs     .  ppL      =   (@hd.pp >|< @ppExtra) : @tl.ppL
                loc     .  ppExtra  =   empty

SEM TyExprs
  | Nil         lhs     .  ppL      =   []
  | Cons        lhs     .  ppL      =   @hd.pp : @tl.ppL

SEM TyVar
  | Var         lhs     .  pp       =   pp @nm

SEM TyVars
  | Nil         lhs     .  ppL      =   []
  | Cons        lhs     .  ppL      =   @hd.pp : @tl.ppL

SEM DataConstr
  | Constr      loc     .  pp       =   pp @conNm >#< ppSpaced @fields.ppL

SEM DataConstrs
  | Nil         lhs     .  ppL      =   []
  | Cons        lhs     .  ppL      =   @hd.pp : @tl.ppL
%%]

%%[6
SEM KiExpr
  | Con Var     loc     .  pp       =   pp @nm
  | App         loc     .  pp       =   @func.pp >#< @arg.pp
  | AppTop      loc     .  pp       =   ppAppTop  (@kiExpr.appFunNm,@kiExpr.appFunPP)
                                                  @kiExpr.appArgPPL @kiExpr.pp
  | Parens      loc     .  pp       =   pp_parens @kiExpr.pp

SEM Decl
  | KiSig       loc     .  pp       =   @nm >#< "::" >#< @kiExpr.pp
%%]

%%[7
ATTR RecExpr RowTyExpr RecPatExpr DataFields [ | | ppL: PP_DocL ]

SEM Expr
  | Rec         loc     .  pp       =   ppAppTop  (hsnRec,mkPPAppFun @appFunNm @recExpr.pp)
                                                  (reverse @recExpr.ppL) @recExpr.pp
  | Sel         loc     .  pp       =   @expr.pp >|< "." >|< @lbl

SEM RecExpr
  | Empty       lhs     .  ppL      =   []
  | Ext         lhs     .  pp       =   @recExpr.pp
                        .  ppL      =   ppFld "=" @positionalNm @nm @expr.pp : @recExpr.ppL

SEM PatExpr
  | Rec         loc     .  pp       =   ppAppTop  (hsnRec,mkPPAppFun @appFunNm @recPatExpr.pp)
                                                  (reverse @recPatExpr.ppL) @recPatExpr.pp

SEM RecPatExpr
  | Empty       lhs     .  ppL      =   []
  | Ext         lhs     .  pp       =   @recPatExpr.pp
                        .  ppL      =   ppFld "=" @positionalNm @nm @patExpr.pp : @recPatExpr.ppL

SEM TyExpr
  | Row         loc     .  pp       =   ppAppTop  (hsnRow,mkPPAppFun hsnRow @rowTyExpr.pp)
                                                  (reverse @rowTyExpr.ppL) @rowTyExpr.pp

SEM RowTyExpr
  | Empty       lhs     .  ppL      =   []
  | Ext         lhs     .  pp       =   @rowTyExpr.pp
                        .  ppL      =   ppFld "::" @positionalNm @nm @tyExpr.pp : @rowTyExpr.ppL

SEM DataFields
  | Nil         lhs     .  ppL      =   []
  | Cons        lhs     .  ppL      =   @hd.pp : @tl.ppL

SEM DataConstr
  | Constr      loc     .  pp       :=  pp @conNm
                                        >#<  (if null . catMaybes $ @fields.lblL
                                              then ppSpaced @fields.ppL
                                              else ppListSep "{" "}" "," (zipWith (\(Just l) f -> l >#< "::" >#< f) @fields.lblL @fields.ppL)
                                             )
%%]

%%[8
SEM Decl
  | FFI         loc     .  pp       =   "foreign" >#< pp (show @impEnt) >#< @nm >#< "::" >#< @tyExpr.pp
%%]

%%[9
ATTR PrExprs FuncDeps [ | | ppL: PP_DocL ]

SEM RowTyExpr
  | Var         loc     .  pp       =   pp @nm
                lhs     .  ppL      =   []

SEM TyExpr
  | Pred        loc     .  pp       =   hsnOImpl >#< @prExpr.pp >#< hsnCImpl
  | Impls       loc     .  pp       =   hsnOImpl >#< "..." >#< hsnCImpl

SEM PrExpr
  | Class       loc     .  pp       =   ppSpaced (pp @nm : @tyExprs.ppL)
  | Lacks       loc     .  pp       =   @rowTyExpr.pp >|< "\\" >|< pp @nm
  | Equal       loc     .  pp       =   pp @nm >|< "=" >|< @tyExpr.pp

SEM PrExprs
  | Nil         lhs     .  ppL      =   []
  | Cons        lhs     .  ppL      =   @hd.pp : @tl.ppL

SEM Decl
  | Class       loc     .  pp       =   "class"     >#< ppListSep "(" ")" ", " @ctxtPrExprs.ppL
                                                    >#< "=>" >#< @prExpr.pp
                                                    >#< "|" >#< ppListSep "" "" ", " @funcDeps.ppL
                                                    >#< "where" >-< indent 2 @decls.pp
  | Instance    loc     .  pp       =   "instance"  >|< maybe empty (\n -> " " >|< n >#< "=") @mbNm
                                                    >#< ppListSep "(" ")" ", " @ctxtPrExprs.ppL
                                                    >#< "=>" >#< @prExpr.pp
                                                    >-< @errInstPP
                                                    >#< "where" >-< indent 2 @decls.pp
                                                    >-< @errDeclsPP

SEM FuncDep
  | Dep         lhs     .  pp       =   @fromTvs.pp >#< "->" >#< @toTvs.pp

SEM FuncDeps
  | Nil         lhs     .  ppL      =   []
  | Cons        lhs     .  ppL      =   @hd.pp : @tl.ppL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ty constr name of app + args, see also EHTyPretty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.TyExpr.ConNm
ATTR TyExpr [ | | appFunNm: {HsName} ^^ appFunPP: PP_Doc ^^ appArgPPL: PP_DocL ]

SEM TyExpr
  | Con         lhs     .  appFunNm     =   @nm
  | App         lhs     .  appFunNm     =   @func.appFunNm
                        .  appArgPPL    =   @func.appArgPPL ++ [@arg.pp]
                        .  appFunPP     =   @func.appFunPP
  | * - App Con
                lhs     .  appFunNm     =   hsnUnknown
  | * - App
                lhs     .  appArgPPL    =   []
                lhs     .  appFunPP     =   @pp
%%]

%%[7
ATTR RowTyExpr [ | | extNm: {HsName} ]

SEM RowTyExpr
  | Empty       lhs     .  extNm        =   hsnRowEmpty
  | * - Empty Ext
                lhs     .  extNm        =   hsnUnknown

SEM TyExpr
  | App         lhs     .  (appFunPP,appArgPPL)
                                        :=  mkExtAppPP  (@func.appFunNm,@func.appFunPP,@func.appArgPPL)
                                                        (@arg.appFunNm,@arg.appFunPP,@arg.appArgPPL,@arg.pp)
  | Row         lhs     .  appFunNm     :=  @rowTyExpr.extNm
                        .  appArgPPL    :=  reverse @rowTyExpr.ppL
                        .  appFunPP     :=  @rowTyExpr.pp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ki constr name of app + args, see also EHTyPretty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6
ATTR KiExpr [ | | appFunNm: {HsName} ^^ appFunPP: PP_Doc ^^ appArgPPL: PP_DocL ]

SEM KiExpr
  | Con         lhs     .  appFunNm     =   @nm
  | App         lhs     .  appFunNm     =   @func.appFunNm
                        .  appArgPPL    =   @func.appArgPPL ++ [@arg.pp]
                        .  appFunPP     =   @func.appFunPP
  | * - Con App
                lhs     .  appFunNm     =   hsnUnknown
  | * - App     lhs     .  appArgPPL    =   []
                lhs     .  appFunPP     =   @pp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Extra info for pp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.ExprExtra
SEM Expr
  | Let         loc     .  ppExtra  =   ppCmt (ppGam @lValGam)
%%]

%%[2
SEM Expr
  | Let         loc     .  ppExtra  :=  ppCmt (ppGam (@body.tyCnstr |=> @lValGam))
%%]

%%[3
SEM Expr
  | Let         loc     .  ppExtra  :=  ppCmt (ppGam @lQuValGam)
%%]

%%[6
SEM Expr
  | Let         loc     .  ppExtra  :=  ppCmt (ppGam @lQuTyGam) >-< ppCmt (ppGam @lQuValGam)
%%]

%%[9
SEM Expr
  | Let         loc     .  ppExtra  :=  ppCmt  (   ppGam @lQuTyGam   >-< ppGam @lQuValGam
                                               >-< ppGam @lQuPrIGam  >-< ppGam @lPrEGam
                                               )
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr constr name of app + args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.Expr.ConNm
ATTR Expr [ | | appFunNm: {HsName} ^^ appFunPP: PP_Doc ^^ appArgPPL: PP_DocL ]

SEM Expr
  | Con         lhs     .  appFunNm     =   @nm
  | App         lhs     .  appFunNm     =   @func.appFunNm
                        .  appArgPPL    =   @func.appArgPPL ++ [@arg.pp]
                        .  appFunPP     =   @func.appFunPP
  | * - Con App
                lhs     .  appFunNm     =   hsnUnknown
  | * - App     lhs     .  appArgPPL    =   []
                        .  appFunPP     =   @pp
%%]

%%[7
ATTR RecExpr [ | | extNm: {HsName} ]

SEM RecExpr
  | Empty       lhs     .  extNm        =   hsnRowEmpty
  | * - Empty Ext
                lhs     .  extNm        =   hsnUnknown

SEM Expr
  | App         lhs     .  (appFunPP,appArgPPL)
                                        :=  mkExtAppPP  (@func.appFunNm,@func.appFunPP,@func.appArgPPL)
                                                        (@arg.appFunNm,@arg.appFunPP,@arg.appArgPPL,@arg.pp)
  | Rec         loc     .  appFunNm     :=  @recExpr.extNm
                lhs     .  appArgPPL    :=  reverse @recExpr.ppL
                        .  appFunPP     :=  @recExpr.pp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% PatExpr constr name of app + args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.PatExpr
ATTR PatExpr [ | | appFunNm: {HsName} ^^ appFunPP: PP_Doc ^^ appArgPPL: PP_DocL ]

SEM PatExpr
  | Con         loc     .  appFunNm     =   @nm
  | AppTop      loc     .  appFunNm     =   @patExpr.appFunNm
  | App         lhs     .  appFunNm     =   @func.appFunNm
                        .  appArgPPL    =   @func.appArgPPL ++ [@arg.pp]
                        .  appFunPP     =   @func.appFunPP
  | * - App Con
                lhs     .  appFunNm     =   hsnUnknown
  | * - App     lhs     .  appArgPPL    =   []
                        .  appFunPP     =   @pp
%%]

%%[7
ATTR RecPatExpr [ | | extNm: {HsName} ]

SEM RecPatExpr
  | Empty       lhs     .  extNm        =   hsnRowEmpty
  | * - Empty Ext
                lhs     .  extNm        =   hsnUnknown

SEM PatExpr
  | App         lhs     .  (appFunPP,appArgPPL)
                                        :=  mkExtAppPP  (@func.appFunNm,@func.appFunPP,@func.appArgPPL)
                                                        (@arg.appFunNm,@arg.appFunPP,@arg.appArgPPL,@arg.pp)
  | Rec         loc     .  appFunNm     :=  @recPatExpr.extNm
                lhs     .  appArgPPL    :=  reverse @recPatExpr.ppL
                        .  appFunPP     :=  @recPatExpr.pp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Show top type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.AGItf.topTyPP
ATTR AGItf [ | | topTyPP: PP_Doc ]

SEM AGItf
  | AGItf       lhs     .   topTyPP     =   ppTy @expr.ty
%%]

%%[3.AGItf.topTyPP
SEM AGItf
  | AGItf       lhs     .   topTyPP     :=  ppTy (tyQuantifyClosed @expr.ty)
%%]

