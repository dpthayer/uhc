30/03: 

Success#0:
Working on linux now. Deletion of the foldl.hi file and recompiling foldl.hs removed the unexpected end of byte string error.

Success#1:
Libs were compiled with the full implementation of the whole program backend.
Without inlining turned on or continuedHpt, was able to compile and run Foldl.hs

Success#1:
With:
; inlineCollectionIterated "-124-" False
..
; transformCodeChgHpt   (inlineEA False)   "InlineEA" 
-- ; caHeapPointsTo

No HPT after inlineEA.
No inlining after HPT.
Compiles and runs fine.

BUG#1:
The following code loops:
; transformCodeChgHpt   (inlineEA False)   "InlineEA" 
; caContinuedHeapPointsTo

It is located in the GrinCompilerDriver file. The nontermination occurs during the continuedHeapAnalysis. The loop occurs when using findFinalValue when a variable with id x has an AbsNodes with a value GrApp x .. ..

The following code was also present: 
; inlineCollectionIterated "-124-" False

This is inlining before Hpt, but after NumberIdents.

BUG#2:
Without:
; inlineCollectionIterated "-124-" False

With:
; transformCodeChgHpt   (inlineEA False)   "InlineEA" 
; caHeapPointsTo

Causes:
ehc: EH99/GrinCode/PointsToAnalysis.hs:(1097,18)-(1106,92): Non-exhaustive patterns in case

I think there are some language constructs removed by inlineCollectionIterated that the HptAnalysis cannot handle. I will just nevermind and continue with inlineCollectionIterated turned on.

Bug#3:
With:
; inlineCollectionIterated "-124-" False
; transformCodeChgHpt   (inlineEA False)   "InlineEA" 
; caHeapPointsTo

Causes a segmentation error.

I conclude that HptAnalysis does not work well after inlineEA.
Either bad equations are generated or the fixpoint is not OK.

Decided to look at the code generated by inlineEA and especially the equations resulting from that.

Suspicius:
SEM GrExpr
  | FetchNode    lhs . equations = case @lhs.targetInfo of
                                      InVar tvar  -> [ IsEvaluation tvar (getNr @nm) tvar ]
This causes the variable resulting from the fetch to get an AbsValue as if the fetched node was already evaluated.
                                                                           
It also compares badly to:
  | FetchField   lhs . equations =  case @lhs.targetInfo of
                                      InVar tvar  ->  [ IsSelection tvar (getNr @nm) @offset (fromJust @mbTag) ]
                                      _           -> error "HPT: FetchField target should be a variable"
                                      
An isSelection equation does not result in a call to findFinalValue.
  
Don't see a good alternative equation for this, and an equation is required.
Maybe a new isFetch equation?


31/03:
Implemented IsFetch equation and its use in the solver.
Loop in the limit functions.
ids 1272 refers to itself in a GrTag_Fun.

6533 is the line is log.txt where 1272 becomes bad recursive, because of 2809
6527, 2809 gets GrTag_Fun_1272



