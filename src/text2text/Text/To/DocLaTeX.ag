-------------------------------------------------------------------------
-- Convert Text to DocLaTeX
-------------------------------------------------------------------------

{
module Text.To.DocLaTeX
  ( textToDocLaTeX
  )
  where

import qualified Data.Map as Map
import qualified Data.Set as Set

-- import EH.Util.Pretty
import qualified EH.Util.FastSeq as Seq

import Common
import Text
}

-------------------------------------------------------------------------
-- Interfacing
-------------------------------------------------------------------------

WRAPPER AGItf

{
textToDocLaTeX :: Opts -> AGItf -> OutDoc
textToDocLaTeX opts txt
  = out_Syn_AGItf t
  where t = wrap_AGItf (sem_AGItf txt)
                       (Inh_AGItf { opts_Inh_AGItf = opts
                                  })
}

-------------------------------------------------------------------------
-- AST
-------------------------------------------------------------------------

INCLUDE "Text/AbsSyn.ag"
INCLUDE "Text/To/Common.ag"

-------------------------------------------------------------------------
-- Combinators
-------------------------------------------------------------------------

{
dltxCmd :: Out c => c -> OutDoc
dltxCmd c = "\\" +++ c

dltxArg :: Out a => a -> OutDoc
dltxArg a = "{" +++ a +++ "}"

dltxArgs :: [OutDoc] -> OutDoc
dltxArgs a = outList $ map dltxArg a
}

-------------------------------------------------------------------------
-- Global info
-------------------------------------------------------------------------

ATTR AGItf AllNT [ opts: Opts | | ]

-------------------------------------------------------------------------
-- Replacement, as OutDoc
-------------------------------------------------------------------------

ATTR AGItf AllNT [ | | out USE {+++} {emptyout}: OutDoc ]

SEM TextItem
  | Space  			loc			.	out			=   out @white
  | NonSpace  		loc			.	out			=   out @black
  | Line  			loc			.	out			=   @str +++ "\n"
  | LineFeed		loc			.	out			=   out "\n"
  | T2T  			loc			.	out			=   ("@@[" +++ show @texttype) +++ @text.out +++ "@@]"	-- for now
  | RefTo	  		loc			.	out			=   @reftype.out +++ dltxArgs [@reftext.out, @text.out]
  | Styled	  		loc			.	out			=   @style.out +++ dltxArg @text.out
  | Header  		loc			.	out			=   @level.out +++ dltxArg @text.out
  | Group			loc			.	out			=	(dltxCmd "begin" +++ dltxArg @envtype.out) +++ @text.out +++ dltxCmd "end" +++ dltxArg @envtype.out
  | Itemize			loc			.	out			=	(dltxCmd "begin" +++ dltxArg @itemizestyle.out) +++ @text.out +++ dltxCmd "end" +++ dltxArg @itemizestyle.out
  | ItemizeItem		loc			.	out			=	dltxCmd "item" +++ @text.out
  | Title   		loc			.	out			=	dltxCmd "title" +++ dltxArg @text.out
  | Author   		loc			.	out			=	dltxCmd "author" +++ dltxArg @text.out
  | Import   		loc			.	out			=	dltxCmd "usepackage" +++ dltxArg @text.out
  | Label   		loc			.	out			=	dltxCmd "label" +++ dltxArg @reftext.out
  | MakeTitle		loc			.	out			=   dltxCmd "maketitle"
  | DocumentHeader	loc			.	out			=   dltxCmd "documentclass" +++ dltxArg @mboptions.out +++ dltxArg @text.out
  | TOC				loc			.	out			=   dltxCmd "tableofcontents"
  
SEM RefType
  | Local			loc			.	out			=	dltxCmd "lref"
  | Global			loc			.	out			=	dltxCmd "href"

SEM TextStyle
  | Verbatim		loc			.	out			=	dltxCmd "verb"
  | Bold			loc			.	out			=	dltxCmd "textbf"

SEM GroupType
  | Verbatim		lhs			.	out			=	out "pre"
  | Document		lhs			.	out			=	out "document"

SEM ItemizeStyle
  | Bullet			lhs			.	out			=	out "itemize"
  | Number			lhs			.	out			=	out "enumerate"

SEM HeaderLevel
  | Level			lhs			.	out			=	dltxCmd (outList (replicate @level "sub") +++ "section")
  | Paragraph		lhs			.	out			=	dltxCmd "paragraph"

SEM DocumentOption
  | A4Paper			loc			.	out			=	out "a4paper"

SEM MbDocumentOptions
  | Just			loc			.	out			=	outListSep "[" "]" "," @just.outL

ATTR DocumentOptions DocumentOption [ | | outL USE {++} {[]}: {[OutDoc]} ]

SEM DocumentOption
  | A4Paper			lhs			.	outL		=	[@out]

