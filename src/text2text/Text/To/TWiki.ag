-------------------------------------------------------------------------
-- Convert Text to TWiki
-------------------------------------------------------------------------

{
module Text.To.TWiki
  ( textToOutDoc
  )
  where

import Data.Maybe
import Data.Char
import Data.List
import qualified Data.Map as Map
import qualified Data.Set as Set

-- import EH.Util.Pretty
import qualified EH.Util.FastSeq as Seq
import EH.Util.ScanUtils

import Common
import Text
}

-------------------------------------------------------------------------
-- Interfacing
-------------------------------------------------------------------------

WRAPPER AGItf

{
textToOutDoc :: Opts -> AGItf -> OutDoc
textToOutDoc opts txt
  = out_Syn_AGItf t
  where t = wrap_AGItf (sem_AGItf txt)
                       (Inh_AGItf { opts_Inh_AGItf = opts
                                  })
}

-------------------------------------------------------------------------
-- AST
-------------------------------------------------------------------------

INCLUDE "Text/AbsSyn.ag"
INCLUDE "Text/To/Common.ag"

-------------------------------------------------------------------------
-- Combinators
-------------------------------------------------------------------------
{
dtwkLbl :: Out a => a -> OutDoc
dtwkLbl a = "#T2TLabel" +++ a

dtwkCmd :: Out c => c -> OutDoc
dtwkCmd c = "%" +++ c +++ "%"

dtwkHdr :: Int -> OutDoc
dtwkHdr l = "---+" +++ replicate l '+' +++ " "

dhtmTag :: Out a => a -> OutDoc
dhtmTag a = "<" +++ a +++ ">"

dhtmCmt :: Out a => a -> OutDoc
dhtmCmt a = dhtmTag ("!-- " +++ a +++ " --")

dtwkRef :: (Out lbl,Out txt) => lbl -> txt -> OutDoc
dtwkRef lbl txt = "[[" +++ lbl +++ "][" +++ txt +++ "]]"

dhtmOpenClose :: (Out body, Out env) => env -> body -> OutDoc
dhtmOpenClose env body = dhtmTag env +++ body +++ dhtmTag ("/" +++ env)
}

{
dtwkArg :: Out a => a -> OutDoc
dtwkArg a = "{" +++ a +++ "}"

dtwkArgs :: [OutDoc] -> OutDoc
dtwkArgs a = outList $ map dtwkArg a
}

-------------------------------------------------------------------------
-- Is text a twiki word?
-------------------------------------------------------------------------

{
isTWikiChar :: Char -> Bool
isTWikiChar = isAlphaNum

isTWikiWord :: String -> Bool
isTWikiWord s
  = is 0 s
  where is st (c:s') | isUpper c && (st == 0 || st == 2) = is (st+1) s'
        is st (c:s') | isLower c &&  st == 1             = is (st+1) s'
        is st (c:_ ) | not (isTWikiChar c)               = False
        is 3  _                                          = True
        is st (_:s')                                     = is  st    s'
        is _  _                                          = False
}

-------------------------------------------------------------------------
-- Global info
-------------------------------------------------------------------------

ATTR AGItf AllNT [ opts: Opts | | ]

-------------------------------------------------------------------------
-- Header numbering
-------------------------------------------------------------------------

{
type HeaderSeqNrMp = Map.Map Int Int
}

ATTR AllText AllTable [ | headerLevel: Int  headerSeqNrMp: HeaderSeqNrMp | ]
ATTR HeaderLevel [ | headerLevel: Int | ]

SEM AGItf
  | AGItf           loc         .   headerLevel =   -1
                                .   headerSeqNrMp
                                                =   Map.empty

SEM HeaderLevel
  | Level           lhs         .   headerLevel =   @level

SEM TextItem
  | Header          (loc.headerTxt,lhs.headerSeqNrMp)
                                                =   let mkTxt h m = concat $ intersperse "." [ show $ fromJust $ Map.lookup l m | l <- [0 .. h] ]
                                                        seqNr h = fromJust $ Map.lookup h @lhs.headerSeqNrMp
                                                    in  case @lhs.headerLevel `compare` @level.headerLevel of
                                                          GT -> ( mkTxt @level.headerLevel m, m )
                                                                where m = Map.insert @level.headerLevel (seqNr @level.headerLevel + 1) @lhs.headerSeqNrMp
                                                          EQ -> ( mkTxt @lhs.headerLevel m, m )
                                                                where m = Map.insert @lhs.headerLevel (seqNr @lhs.headerLevel + 1) @lhs.headerSeqNrMp
                                                          LT -> ( mkTxt @level.headerLevel m, m )
                                                                where m = Map.insert @level.headerLevel 1 @lhs.headerSeqNrMp

-------------------------------------------------------------------------
-- Itemize level
-------------------------------------------------------------------------

ATTR AllText AllTable [ itemizeLevel: Int | | ]

SEM TextItem
  | Itemize         loc         .   itemizeLevel=   @lhs.itemizeLevel + 1

SEM AGItf
  | AGItf           loc         .   itemizeLevel=   0

-------------------------------------------------------------------------
-- Itemize style
-------------------------------------------------------------------------

ATTR AllText AllTable [ itemizePrefix: OutDoc | | ]

SEM TextItem
  | Itemize         loc         .   itemizePrefix
                                                =   replicate (3 * @lhs.itemizeLevel) ' ' +++ @itemizestyle.out

SEM AGItf
  | AGItf           loc         .   itemizePrefix
                                                =   emptyout

-------------------------------------------------------------------------
-- How to make a reference
-------------------------------------------------------------------------

ATTR RefType [ | | mkRefOut: {OutDoc -> OutDoc -> OutDoc} ]

SEM RefType
  | Local           loc         .   mkRefOut    =   dtwkRef
  | Global          loc         .   mkRefOut    =   dtwkRef
  | EhcWeb          loc         .   mkRefOut    =   dtwkRef
  | EhcSrc          loc         .   mkRefOut    =   \r t -> t +++ " (" +++ dhtmOpenClose "code" r +++ ")"

-------------------------------------------------------------------------
-- Selectively modifying wikiwords
-------------------------------------------------------------------------

ATTR AllText AllTable [ allowWikiWord: Bool | | ]

SEM AGItf
  | AGItf           loc         .   allowWikiWord
                                                =   False

SEM TextItem
  | Label           loc         .   allowWikiWord
                                                =   True

-------------------------------------------------------------------------
-- Selectively linefeeding
-------------------------------------------------------------------------

{
mkLF :: Bool -> OutDoc
mkLF True = out "\n"
mkLF _    = out " "

mkPar :: Bool -> OutDoc
mkPar True = out "\n\n"
mkPar _    = dtwkCmd "BR"
}

ATTR AllText [ allowLF: Bool | | ]

SEM AGItf
  | AGItf           loc         .   allowLF     =   True


SEM TableField
  | Fld             loc         .   allowLF     =   True

SEM TableRow
  | Row             loc         .   allowLF     =   True

SEM TextItem
  | Itemize         loc         .   allowLF     =   False
  | Header Group DocumentContent Table
                    loc         .   allowLF     =   True

SEM TextItem
  | Line LineFeed CommentLF
                    loc         .   lf          =   mkLF @lhs.allowLF
  | ParBreak        loc         .   par         =   mkPar @lhs.allowLF

-------------------------------------------------------------------------
-- Replacement, as OutDoc
-------------------------------------------------------------------------

ATTR AGItf AllNT [ | | out USE {+++} {emptyout}: OutDoc ]

SEM TextItem
  | Space           loc         .   out         =   out @str
  | NonSpace        loc         .   out         =   (if not @lhs.allowWikiWord && isTWikiWord @str then "!" else "") +++ @str
  | CommentLF       loc         .   out         =   dhtmCmt @str +++ @lf
  | Line            loc         .   out         =   @str +++ @lf
  | LineFeed        loc         .   out         =   @lf
  | ParBreak        loc         .   out         =   @par
  | T2T             loc         .   out         =   ("@@[" +++ show @texttype) +++ "should not happen!!" +++ "@@]"  -- for now
  | RefTo           loc         .   out         =   @reftype.mkRefOut (@reftype.out +++ @reftext.out) @text.out
  | Styled          loc         .   out         =   @style.out +++ @text.out +++ @style.out
  | VerbatimInline  loc         .   out         =   dhtmOpenClose "code" @str
  | BreakLine       loc         .   out         =   dtwkCmd "BR"
  | HorRuler        loc         .   out         =   out "\n------"
  | Header          loc         .   out         =   @level.out
                                                    +++ (if optGenHeaderNumbering @lhs.opts then @headerTxt +++ " " else emptyout)
                                                    +++ @text.out +++ "\n"
  | Group           loc         .   out         =   dhtmOpenClose @envtype.out @text.out
  | DocumentContent loc         .   out         =   @text.out -- +++ "\n" +++ dtwkCmd "REVINFO{\"$date\"}"
  | Table           loc         .   out         =   @extratext.out +++ @rows.out
  | Itemize         loc         .   out         =   @text.out
  | ItemizeItem     loc         .   out         =   "\n" +++ @lhs.itemizePrefix +++ @text.out
  | Title           loc         .   out         =   emptyout
  | Author          loc         .   out         =   emptyout
  | Import          loc         .   out         =   emptyout
  | Label           loc         .   out         =   "\n" +++ dtwkLbl @reftext.out
  | MakeTitle       loc         .   out         =   emptyout
  | DocumentHeader  loc         .   out         =   emptyout
  | TOC             loc         .   out         =   dtwkCmd "TOC"
  
SEM RefType
  | Local           loc         .   out         =   dtwkLbl ""
  | Global          loc         .   out         =   emptyout
  | EhcWeb          loc         .   out         =   out "Ehc."
  | EhcSrc          loc         .   out         =   out "EHCHOME/"

SEM TextStyle
  | Bold            loc         .   out         =   out "*"
  | Italic          loc         .   out         =   out "_"
  | Teletype        loc         .   out         =   out "="
  | Emphasized      loc         .   out         =   out "_"

SEM GroupType
  | Verbatim        lhs         .   out         =   out "verbatim"

SEM ItemizeStyle
  | Bullet          lhs         .   out         =   out "   * "
  | Number          lhs         .   out         =   out "   1 "

SEM HeaderLevel
  | Level           lhs         .   out         =   dtwkHdr @level
  | Paragraph       lhs         .   out         =   out "\n"

SEM TableColFormat
  | JustifyLeft     loc         .   out         =   out "l"
  | JustifyCenter   loc         .   out         =   out "c"
  | JustifyRight    loc         .   out         =   out "r"
  | SepbyLine       loc         .   out         =   out "|"

SEM TableRow
  | Row             lhs         .   out         =   outListSep "|" "|" "|" @cols.outL +++ @extrabrktext.out

SEM TableField
  | Fld             lhs         .   out         =   @extraseptext.out +++ @fld.out

-------------------------------------------------------------------------
-- Replacement, as [OutDoc]
-------------------------------------------------------------------------

ATTR
  TableFields
    [ | | outL USE {++} {[]}: {[OutDoc]} ]

SEM TableFields
  | Cons            lhs         .   outL        =   @hd.out : @tl.outL
  | Nil             lhs         .   outL        =   []
