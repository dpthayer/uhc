%%[8
#include "rts.h"

/* Make sure these numbers are the same as generated by Grin/ToSilly */

#define CFalse 2
#define CTrue 3
#define CEQ 4
#define CGT 5
#define CLT 6

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Int related primitives
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8


PRIM GrWord primNegateInt(GrWord x)
{
	return -x;	
}

PRIM GrWord primAddInt(GrWord x, GrWord y)
{   
	//printf("add %d %d\n", x, y );
	return x+y;
}

PRIM GrWord primSubInt(GrWord x, GrWord y)
{   
	//printf("sub %d %d\n", x, y );
	return x-y;
}

PRIM GrWord primMulInt(GrWord x, GrWord y)
{   
	//printf("mul %d %d\n", x, y );
	return x*y;
}

/* This should be the Quot function */
PRIM GrWord primDivInt(GrWord x, GrWord y)
{   
	//printf("div %d %d\n", x, y );
	return x/y;
}

/* This should be the Rem function */
PRIM GrWord primModInt(GrWord x, GrWord y)
{   
	//printf("mod %d %d\n", x, y );
	return x%y;
}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ord Int related primitives
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8

/* The Boolean functions below only return the constructor */


PRIM GrWord primGtInt(GrWord x, GrWord y)
{   if (x>y)
    { //  printf ("%d is groter dan %d\n", x, y );
        return CTrue;
    }
    //printf ("%d is niet groter dan %d\n", x, y );
    return CFalse;
}

PRIM GrWord primLtInt(GrWord x, GrWord y)
{   if (x<y)
        return CTrue;
    return CFalse;
}
%%]

%%[8
PRIM GrWord primCmpInt(GrWord x, GrWord y)
{   if (x>y)
        return CGT;
    if (x==y)
        return CEQ;
    return CLT;
}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Eq Int related primitives
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
PRIM GrWord primEqInt(GrWord x, GrWord y)
{
	 //printf("eq %d %d\n", x, y );
	
    if (x==y)
        return CTrue;
    return CFalse;
}
%%]

%%[8
PRIM GrWord primNeInt(GrWord x, GrWord y)
{
	 //printf("neq %d %d\n", x, y );
	
    if (x!=y)
        return CTrue;
    return CFalse;
}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Misc primitives
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
PRIM GrWord primUnsafeId(GrWord x)
{   return x ;
}

PRIM void primExitFun( GrWord x)
{

  printf( "Exit function %d\n", x);
}

PRIM void primPatternMatchFailure()
{
    printf("Pattern match failure\n");
    exit(1);
}

PRIM GrWord primOrd(GrWord x)
{
	return x;	
}

PRIM GrWord primChr(GrWord x)
{
	return x;	
}

PRIM GrWord primOdd(GrWord x)
{
    if (x&1)
        return CTrue;
    return CFalse;
}


PRIM GrWord primPackedStringNull(GrWord s)
{
	if (*  ((char*)s) )	
    	return CFalse;	
    return CTrue;
}

PRIM GrWord primPackedStringTail(GrWord s)
{
	return  (GrWord)(((char*)s)+1);
}

PRIM GrWord primPackedStringHead(GrWord s)
{
	return (GrWord)(*((char*)s));
}




%%]
