%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Grin's byte code gen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{GRIN}GrinCode.ToGrinByteCode}
%%]

%%[8 hs import(Data.Maybe,Data.List,UU.Pretty,EH.Util.FastSeq,EH.Util.Utils,qualified Data.Set as Set,qualified Data.Map as Map,{%{EH}Base.Common})
%%]

%%[8 hs import({%{EH}GrinCode.Pretty},{%{EH}Base.Builtin},qualified {%{GRIN}GrinByteCode} as GB,{%{EH}GrinCode})
%%]

%%[8 hs export(grinMod2ByteCodeMod)
%%]

%%[12 hs import({%{EH}Ty(tyRowCanonOrder)})
%%]

%%[8.WRAPPER import({GrinCode/AbsSyn})
WRAPPER GrAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.grinMod2ByteCodeMod hs
grinMod2ByteCodeMod :: GrModule -> GB.Module
grinMod2ByteCodeMod gmod
  =  let  t = wrap_GrAGItf  (sem_GrAGItf (GrAGItf_AGItf gmod))
                            (Inh_GrAGItf)
     in   gbMod_Syn_GrAGItf t
%%]

%%[12 -8.grinMod2ByteCodeMod hs
grinMod2ByteCodeMod :: [HsName] -> [HsName] -> HsNameS -> GrModule -> GB.Module
grinMod2ByteCodeMod allImpNmL impNmL expNmS gmod
  =  let  t = wrap_GrAGItf  (sem_GrAGItf (GrAGItf_AGItf gmod))
                            (Inh_GrAGItf
                               { expNmS_Inh_GrAGItf = expNmS
                               , impNmL_Inh_GrAGItf = impNmL
                               , allImpNmL_Inh_GrAGItf = allImpNmL
                               })
     in   gbMod_Syn_GrAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllNTNoMod [ modNmConstInx: Int | | ]
%%]

%%[12
ATTR GrAGItf GrModule [ expNmS: HsNameS  impNmL: {[HsName]}  allImpNmL: {[HsName]} | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type ConstMp = Map.Map GB.Const Int
%%]

%%[8
ATTR AllNTNoMod [ | constMp: ConstMp | ]

SEM GrModule
  | Mod         loc         .   moduleNmAlpha   =   hsnShowAlphanumeric @moduleNm
                (loc.modNmConstInx,globalL.strMp,globalL.constMp)
                                                =   constStrAdd @moduleNmAlpha Map.empty Map.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Strings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type StrMp = Map.Map String GB.Const

constStrAdd :: String -> StrMp -> ConstMp -> (Int,StrMp,ConstMp)
constStrAdd str strMp constMp
  = case Map.lookup str strMp of
      Just c -> (panicJust "constStrAdd" $ Map.lookup c constMp,strMp,constMp)
      _      -> (constInx,Map.insert str c strMp,Map.insert c constInx constMp)
             where strInx   = Map.size strMp
                   constInx = Map.size constMp
                   c        = GB.Const_Str strInx

constAdd :: GB.Const -> ConstMp -> (Int,ConstMp)
constAdd c constMp
  = case Map.lookup c constMp of
      Just i -> (i,constMp)
      _      -> (constInx,Map.insert c constInx constMp)
             where constInx = Map.size constMp

constCFunAdd :: String -> ConstMp -> (Int,ConstMp)
constCFunAdd nm = constAdd (GB.Const_CFunction nm)
%%]

%%[12 hs
constImpNodeAdd :: ConstMp -> (Int,ConstMp)
constImpNodeAdd = constAdd GB.Const_ImpNode
%%]

%%[8
ATTR AllNTNoMod [ | strMp: StrMp | ]

SEM GrVal
  | LitStr      (loc.constInx,lhs.strMp,lhs.constMp)
                                                =   constStrAdd @str @lhs.strMp @lhs.constMp

SEM GrExpr
  | FFI         (loc.constInx,lhs.constMp)      =   constCFunAdd @nm @lhs.constMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Labels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllGrExpr AllBind [ | labelId: {GB.LabelId} | ]

SEM GrModule
  | Mod         loc         .   labelId         =   0

SEM GrAlt
  | Alt         (expr.labelId,loc.altLabel)     =   GB.newLabelId @lhs.labelId

SEM GrExpr
  | Case        (loc.labelId',loc.aftCaseLabel) =   GB.newLabelId @lhs.labelId
                (altL.labelId,loc.at1stOffLabel)=   GB.newLabelId @labelId'
%%]

%%[8
ATTR AllAlt [ | | altLocRefs USE {++} {[]}: {[GB.LocRef]} ]

SEM GrAlt
  | Alt         loc         .   altLocRef       =   GB.LocRef_Label @altLabel
                loc         .   altLocRefs      =   [@altLocRef]

SEM GrExpr
  | Case        loc         .   aftCaseLocRef   =   GB.LocRef_Label @aftCaseLabel
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case labels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM GrExpr
  | Case        loc         .   nrOfAlts        =   length @altL.altLocRefs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Stack depth simulation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllGrExpr [ | stkDepth: Int | ]

SEM GrBind
  | Bind        loc         .   stkDepth        =   0

SEM GrExpr
  | Unit Store Call Eval App Case FFI FetchUpdate
                loc         .   valDepth        =   @lhs.stkDepth + @valStkInc
                lhs         .   stkDepth        =   @valDepth
  | Seq         body        .   stkDepth        =   @expr.stkDepth + @seqStkInc
  | Case        altL        .   stkDepth        =   @lhs.stkDepth + @scrutineeStkInc

SEM GrAlt
  | Alt         loc         .   stkDepth        =   @lhs.stkDepth + length @pat.introNmL - 1
                lhs         .   stkDepth        =   @lhs.stkDepth

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tail call info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data ReturnCtxt
  = ReturnCtxt_Returns      Int                 -- return from function (nr of arguments)
  | ReturnCtxt_Continues                        -- don't return, leave result on stack
  | ReturnCtxt_CaseReturns  GB.LabelId Int      -- return from case alt (return destination, return stack depth)

%%]

%%[8
ATTR AllGrExpr [ returnCtxt: ReturnCtxt | | ]

SEM GrBind
  | Bind        expr        .   returnCtxt      =   ReturnCtxt_Returns (length @argNmL)

SEM GrExpr
  | Seq         expr        .   returnCtxt      =   ReturnCtxt_Continues
  | Case        altL        .   returnCtxt      =   case @lhs.returnCtxt of
                                                      ReturnCtxt_Continues -> ReturnCtxt_CaseReturns @aftCaseLabel @lhs.stkDepth
                                                      _                    -> @lhs.returnCtxt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Named value introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
%%]
ATTR AllGrPat [ | introOff: Int | ]

SEM GrPat
  | Var         lhs         .   introOff        =   @lhs.introOff + 1

SEM GrAlt
  | Alt         pat         .   introOff        =   0

SEM GrExpr
  | Seq         pat         .   introOff        =   0

%%[8
ATTR AllGrPat [ | | introNmL USE {++} {[]}: {[HsName]} ]

SEM GrPat
  | Var         lhs         .   introNmL        =   [@nm]
  | Node        lhs         .   introNmL        =   @fldL
%%]
  | Var         lhs         .   introNmL        =   [(@nm,@lhs.introOff)]

%%[8 hs
data NmIntro
  = NmIntro_Single    HsName
  | NmIntro_Grp       GrTag [HsName]
  | NmIntro_None
%%]

%%[8
ATTR GrPat [ | | nmIntro: NmIntro ]

SEM GrPat
  | Var         lhs         .   nmIntro         =   NmIntro_Single @nm
  | Node        lhs         .   nmIntro         =   case (@tag.self,@fldL) of
                                                      (t,[f]) | GB.tagIsUnboxed t
                                                        -> NmIntro_Single f
                                                      _ -> NmIntro_Grp @tag.self @fldL
  | * - Var Node
                lhs         .   nmIntro         =   NmIntro_None
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Named value access
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
patNmL2VAGam :: Int -> [HsName] -> GB.ValAccessGam
patNmL2VAGam dep nmL = Map.fromList [ (n,GB.Val_LocalOffset (dep+o)) | (n,o) <- zip (reverse nmL) [0..] ]
%%]

%%[8
ATTR AllGrExpr AllBind [ vaGam: {GB.ValAccessGam} | | ]

SEM GrModule
  | Mod         loc         .   vaGam           =   Map.fromList $ map (\(n,o) -> (n,GB.Val_GlobEntry o)) $ Map.toList @entryNmMp

SEM GrExpr
  | Seq         body        .   vaGam           =   @newVaGam `Map.union` @lhs.vaGam

SEM GrBind
  | Bind        loc         .   newVaGam        =   Map.fromList [ (n,GB.Val_LocalOffset (@stkDepth-o)) | (n,o) <- zip @argNmL [1..] ]
                expr        .   vaGam           =   @newVaGam `Map.union` @lhs.vaGam

SEM GrAlt
  | Alt         loc         .   newVaGam        =   patNmL2VAGam @lhs.stkDepth @pat.introNmL
                expr        .   vaGam           =   @newVaGam `Map.union` @lhs.vaGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% GrVal Value introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data GValIntro
  = GValIntro_Nm    HsName
  | GValIntro_Int   Integer
  | GValIntro_Str   String GB.Link
  | GValIntro_Grp   GrTag [GValIntro]
  | GValIntro_None

data GValIntroAlt
  = GValIntroAlt_One    GB.InsSeq Int
--  | GValIntroAlt_Alt    [GValIntroAlt]

gviLdFold' :: GValIntroAlt -> GB.ValAccessGam -> Int -> Int -> [GValIntro] -> GValIntroAlt
gviLdFold' dflt vag modNmConstInx stkDepth introL
  = foldl ld dflt $ reverse $ introL
  where ld (GValIntroAlt_One ins dep) intro
          = GValIntroAlt_One (ins :++: ins') (dep+dep')
          where (GValIntroAlt_One ins' dep') = gviLd vag modNmConstInx (stkDepth+dep) intro

gviLdFold :: GB.ValAccessGam -> Int -> Int -> [GValIntro] -> GValIntroAlt
gviLdFold = gviLdFold' (GValIntroAlt_One FSeqNil 0)

gviLd :: GB.ValAccessGam -> Int -> Int -> GValIntro -> GValIntroAlt
gviLd vag modNmConstInx stkDepth intro
  = ld (GValIntroAlt_One FSeqNil 0) intro
  where ld dflt@(GValIntroAlt_One ins dep) intro
          = case intro of
              GValIntro_Nm nm
                -> GValIntroAlt_One (ins :++: ins') (dep+dep')
                where (ins',dep') = GB.nmLd vag modNmConstInx stkDepth nm
              GValIntro_Str s l
                -> GValIntroAlt_One (ins ::+: (GB.ann (show l) $ GB.ldg l)) (dep+1)
              GValIntro_Int i
                -> GValIntroAlt_One (ins ::+: (GB.ann ("constant" >#< show i) $ GB.ldi i)) (dep+1)
              GValIntro_Grp gtag [i] | GB.tagIsUnboxed gtag
                -> ld dflt i
              GValIntro_Grp gtag is
                -> GValIntroAlt_One (gins :++: sins) sinc
                where i@(GValIntroAlt_One ins inc) = gviLdFold' dflt vag modNmConstInx (stkDepth+dep) is
                      (tins,tinc,allocInc) = GB.tag vag modNmConstInx (stkDepth+dep+inc) gtag inc
                      gins = ins :++: FSeqL [GB.meta (ppGrTag gtag)] :++: tins
                      ginc = inc + tinc
                      (sins,sinc) = GB.ndStore (allocInc + ginc)
              _ -> dflt
          where dep' = stkDepth + dep
%%]

%%[8
ATTR GrVal [ | | gvalIntro: GValIntro ]
ATTR GrValL [ | | gvalIntroL: {[GValIntro]} ]

SEM GrVal
  | Var         lhs         .   gvalIntro       =   GValIntro_Nm @nm
  | LitInt      lhs         .   gvalIntro       =   GValIntro_Int (toInteger @int)
  | LitStr      lhs         .   gvalIntro       =   GValIntro_Str @str (GB.Link @lhs.modNmConstInx GB.LinkTbl_ConstPtr @constInx)
  | Node        lhs         .   gvalIntro       =   GValIntro_Grp @tag.self @fldL.gvalIntroL
  | * - Var LitStr Node LitInt
                lhs         .   gvalIntro       =   GValIntro_None

SEM GrValL
  | Nil         lhs         .   gvalIntroL      =   []
  | Cons        lhs         .   gvalIntroL      =   @hd.gvalIntro : @tl.gvalIntroL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Delayed unit gval
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data UnitIntro
  = UnitIntro   GValIntro
%%]

%%[8
ATTR GrExpr [ isSeqArgCtxt: Bool | | ]

SEM GrBind
  | Bind        expr        .   isSeqArgCtxt    =   False

SEM GrAlt
  | Alt         expr        .   isSeqArgCtxt    =   False

SEM GrExpr
  | Seq         expr        .   isSeqArgCtxt    =   True
  | * - Seq     loc         .   isSeqArgCtxt    =   False
%%]

%%[8
ATTR GrExpr [ | | mbUnitIntro: {Maybe UnitIntro} ]

SEM GrExpr
  | * - Unit    lhs         .   mbUnitIntro     =   Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr Value introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data EValIntro
  = EValIntro_TOS_One   { eviDepth :: Int }
  | EValIntro_TOS_Grp   { eviDepth :: Int, eviSize :: Int }
  | EValIntro_None

%%]

%%[8
ATTR GrExpr [ | | evalIntro: EValIntro ]

SEM GrExpr
  | Unit Store Call Eval App Case FFI
                lhs         .   evalIntro       =   EValIntro_TOS_One @valDepth
  | * - Unit Store Call Eval App Case Seq FFI
                lhs         .   evalIntro       =   EValIntro_None
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expr Value codegen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM GrExpr
  | Unit        loc         .   (valIns,valStkInc,retIsDone,mbUnitIntro)
                                                =   case gviLd @lhs.vaGam @lhs.modNmConstInx @lhs.stkDepth @val.gvalIntro of
                                                      GValIntroAlt_One ins inc | not @lhs.isSeqArgCtxt
                                                        -> (ins,inc,False,Nothing)
                                                      _ -> (FSeqNil,0,True,Just (UnitIntro @val.gvalIntro))
  | Store       loc         .   (valIns,valStkInc,retIsDone)
                                                =   case gviLd @lhs.vaGam @lhs.modNmConstInx @lhs.stkDepth @val.gvalIntro of
                                                      GValIntroAlt_One ins inc
                                                        -> (ins, inc, False)
  | Call        loc         .   (valIns,valStkInc,retIsDone)
                                                =   case gviLdFold @lhs.vaGam @lhs.modNmConstInx @lhs.stkDepth @argL.gvalIntroL of
                                                      GValIntroAlt_One ins inc
                                                        -> case @lhs.returnCtxt of
                                                             ReturnCtxt_Returns nrArgsOuter
                                                               -> (ins :++: fins :++: FSeqL [GB.tailcall GB.InsOp_LocB_TOS nArgMine nrArgsOuter retOffSurr], 0, True)
                                                               where (fins,fdep) = GB.nmLd @lhs.vaGam @lhs.modNmConstInx (@lhs.stkDepth + inc) @nm
                                                                     nArgMine    = length @argL.gvalIntroL
                                                                     retOffSurr  = @lhs.stkDepth + inc + fdep
                                                             _ -> (ins :++: fins :++: FSeqL [GB.call GB.InsOp_LocB_TOS], 1, False)
                                                               where (fins,_) = GB.nmLd @lhs.vaGam @lhs.modNmConstInx (@lhs.stkDepth + inc) @nm
  | FFI         loc         .   (valIns,valStkInc,retIsDone)
                                                =   case gviLdFold @lhs.vaGam @lhs.modNmConstInx @lhs.stkDepth $ map GValIntro_Nm $ @argL of
                                                      GValIntroAlt_One ins inc
                                                        -> (ins :++: fins :++: FSeqL [GB.callc inc], 1, False)
                                                        where fins = FSeqL [GB.ldg $ GB.Link @lhs.modNmConstInx GB.LinkTbl_Const @constInx]
  | FetchUpdate loc         .   (valIns,valStkInc,retIsDone)
                                                =   case gviLdFold @lhs.vaGam @lhs.modNmConstInx @lhs.stkDepth $ map GValIntro_Nm $ [@src,@dst] of
                                                      GValIntroAlt_One ins inc
                                                        -> (ins :++: FSeqL [GB.fetchupdate], 0, False)
  | Eval        loc         .   (valIns,valStkInc,retIsDone)
                                                =   let (ins,inc) = GB.nmLd @lhs.vaGam @lhs.modNmConstInx @lhs.stkDepth @nm
                                                    in  case @lhs.returnCtxt of
                                                          ReturnCtxt_Returns nrArgsOuter
                                                            -> (ins :++: eins, 0, True)
                                                            where eins       = FSeqL [GB.taileval GB.InsOp_LocB_TOS nrArgsOuter retOffSurr]
                                                                  retOffSurr = @lhs.stkDepth + inc
                                                          _ -> (ins :++: eins, inc, False)
                                                            where eins = FSeqL [GB.eval GB.InsOp_LocB_TOS]
  | App         loc         .   (valIns,valStkInc,retIsDone)
                                                =   case gviLdFold @lhs.vaGam @lhs.modNmConstInx @lhs.stkDepth @argL.gvalIntroL of
                                                      GValIntroAlt_One ins inc
                                                        -> (ins :++: FSeqL [GB.ldc (length @argL.gvalIntroL)] :++: fins :++: FSeqL [GB.apply GB.InsOp_LocB_TOS], 1, False)
                                                        where (fins,_) = GB.nmLd @lhs.vaGam @lhs.modNmConstInx (@lhs.stkDepth + inc + 1) @nm
  | Case        loc         .   (valIns,valStkInc,retIsDone,scrutineeStkInc)
                                                =   case gviLd @lhs.vaGam @lhs.modNmConstInx @lhs.stkDepth @val.gvalIntro of
                                                      GValIntroAlt_One ins inc
                                                        -> (ins :++: ins',1,True,inc)
                                                        where ins' = FSeqL [GB.casecall {- @nrOfAlts -},GB.label (GB.LocRef_Label @at1stOffLabel) ]
                                                                      :++: FSeqL [ GB.labelref l | l <- @altL.altLocRefs ]
                                                                      :++: @altL.i
                                                                      :++: FSeqL [GB.label @aftCaseLocRef]
  | Seq         loc         .   (seqIns,seqStkInc,newVaGam)
                                                =   let nm ins inc nmIntro
                                                          = case nmIntro of
                                                              (NmIntro_Single nm)
                                                                -> (ins,inc,Map.fromList [(nm,GB.Val_LocalOffset (@expr.stkDepth+inc))])
                                                              (NmIntro_Grp _ nmL)
                                                                -> (ins :++: fins, inc' + length nmL,g)
                                                                where fins = FSeqL [GB.fetch GB.InsOp_LocB_TOS]
                                                                      inc' = inc - 1
                                                                      g = patNmL2VAGam (@expr.stkDepth+inc) nmL
                                                              _ -> (ins,inc,Map.empty)
                                                    in  case @expr.mbUnitIntro of
                                                          Just (UnitIntro gvi)
                                                            -> nm ins inc @pat.nmIntro
                                                            where (GValIntroAlt_One ins inc) = gviLd @lhs.vaGam @lhs.modNmConstInx @expr.stkDepth gvi
                                                          _ -> nm FSeqNil 0 @pat.nmIntro

SEM GrExpr
  | Unit Store Call Eval App Case FFI
                loc         .   retIns          =   if @retIsDone
                                                    then FSeqNil
                                                    else case @lhs.returnCtxt of
                                                           ReturnCtxt_Returns nrArgsOuter
                                                             -> FSeqL [GB.retcall 1 nrArgsOuter retOffSurr]
                                                             where retOffSurr  = @lhs.stkDepth + @valStkInc
                                                           ReturnCtxt_CaseReturns labelId dep
                                                             -> FSeqL [GB.retcase 1 (@lhs.stkDepth + @valStkInc - dep) (GB.LocRef_Label labelId)]
                                                           _ -> FSeqNil
  | * - Unit Store Call Eval App Case FFI
                loc         .   retIns          =   FSeqNil
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global entry points
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllBind [ | | entryNms USE {:++:} {FSeqNil}: {FastSeq (HsName,Bool)} ]

SEM GrBind
  | Bind        lhs         .   entryNms        =   FSeq (@nm,null @argNmL)
                loc         .   entryInx        =   GB.vaEntryInx $ panicJust "GrBind.Bind.entryInx" $ Map.lookup @nm @lhs.vaGam

SEM GrModule
  | Mod         loc         .   (entryNmMp,isCafL)
                                                =   let (nL,cafL) = unzip $ toList @bindL.entryNms
                                                	in  (Map.fromList $ zip nL [0..],cafL)
                            .   mainEntry       =   maybe 0 GB.vaEntryInx $ Map.lookup hsnMain @vaGam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrAGItf GrModule [ | | gbMod: {GB.Module} ]

SEM GrModule
  | Mod         lhs         .   gbMod           =   GB.Module_Mod @moduleNmAlpha
%%[[12
                                                      [ (n,hsnShowAlphanumeric n) | n <- @lhs.allImpNmL ]
                                                      (tyRowCanonOrder [ (n,hsnShowAlphanumeric n) | n <- @lhs.impNmL ])
                                                      [ e | e@(n,_) <- tyRowCanonOrder $ Map.toList @entryNmMp, n `Set.member` @lhs.expNmS ]
%%]]
                                                      (toList $ @bindL.i :++: FSeqL [GB.halt])
                                                      [ s | (s,_) <- sortOn (GB.constInx . snd) $ Map.toList @bindL.strMp ]
                                                      [ c | (c,_) <- sortOn snd $ Map.toList @bindL.constMp ]
                                                      [ i | (i,True) <- zip [0..] @isCafL ]
                                                      @mainEntry
                                                      (toList @bindL.fixOffsets)
%%]

%%[8
ATTR AllBind AllGrExpr [ | | i USE {:++:} {FSeqNil}: {GB.InsSeq} ]

SEM GrBind
  | Bind        loc         .   yesCode         =   @nm `notElem` [hsnGrEval, hsnGrApply]
                lhs         .   i               =   if @yesCode then FSeqL [GB.label (GB.LocRef_CodeEntry @entryInx),GB.meta @nm] :++: @expr.i else FSeqNil

SEM GrExpr
  | Unit Store Call Eval App Case FFI FetchUpdate
                lhs         .   i               =   @valIns :++: @retIns
  | Seq         lhs         .   i               =   @expr.i :++: @seqIns :++: @body.i

SEM GrAlt
  | Alt         lhs         .   i               =   FSeqL [GB.label @altLocRef,GB.fetch GB.InsOp_LocB_TOS] :++: @expr.i
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Fixing offsets, constructing FixOffset entries
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllBind AllGrExpr [ | | fixOffsets USE {:++:} {FSeqNil}: {FastSeq GB.FixOffset} ]

SEM GrExpr
  | Case        lhs         .   fixOffsets      =   FSeqL [GB.FixOffset @at1stOffLabel @nrOfAlts] :++: @altL.fixOffsets
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SELF
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrTag [ | | self: SELF ]
%%]