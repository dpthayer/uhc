
%%[8 import({GrinCode/AbsSyn})
%%]
%%[8 hs import(Debug.Trace)
%%]

%%[8
WRAPPER GrAGItf
%%]

%%[8 hs module {%{GRIN}GrinCode.Trf.InlineNumbered} import(qualified Data.Map as Map, {%{GRIN}GRINCCommon}, {%{EH}Base.Common}, {%{EH}GrinCode}) export(inlineNumbered)

inlineNumbered :: (GrModule,Int) -> (GrModule,Int)
inlineNumbered (grmod,unique) = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf grmod)) 
                                                     (Inh_GrAGItf { unique_Inh_GrAGItf = unique })
                                in -- trace ("adjustcount: " ++ show (finalCount_Syn_GrAGItf t)) $
                                   (grTrf_Syn_GrAGItf t, unique_Syn_GrAGItf t)

%%]

%%[8
ATTR GrAGItf [ | unique: Int | grTrf: GrModule ]
ATTR AllNT   [ | unique: Int | grTrf: SELF     ]
%%]



%%[8
ATTR GrAGItf GrModule [ | | finalCount : {Map.Map Int Int} ]
ATTR AllDef  [ | | initialCount USE {`Map.union`} {Map.empty} : {Map.Map Int Int} ]
ATTR AllDef AllExpr [ | adjustCount : {Map.Map Int Int} | ]
ATTR AllDef  [ finalCount : {Map.Map Int Int} | | ]
 
SEM GrGlobal
  | Global    lhs.initialCount =  Map.singleton (getNr @nm) 0
  
SEM GrBind
  | Bind      lhs.initialCount =  Map.singleton (getNr @nm) 0

SEM GrModule  
  | Mod       globalL.adjustCount = @globalL.initialCount `Map.union` @bindL.initialCount
              bindL.adjustCount   = @globalL.adjustCount
              globalL.finalCount  = @bindL.adjustCount
              bindL.finalCount    = @bindL.adjustCount
              lhs.finalCount      = @bindL.adjustCount

SEM GrExpr
  | Call
    App       lhs.adjustCount     = Map.adjust (+1) (getNr @nm) @argL.adjustCount
  | Eval      lhs.adjustCount     = Map.adjust (+1) (getNr @nm) @lhs.adjustCount
  
SEM GrVal
  | Var       lhs.adjustCount     = Map.adjust (+1) (getNr @nm) @lhs.adjustCount
%%[[10
  | NodeAdapt lhs.adjustCount     = Map.adjust (+1) (getNr @nm) @fldL.adjustCount
%%]]

SEM GrTag
    | Fun
      App
      PApp    lhs.adjustCount     = Map.adjust (+1) (getNr @nm) @lhs.adjustCount

%%]
