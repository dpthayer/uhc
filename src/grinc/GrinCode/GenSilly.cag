%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[8 hs module {%{GRIN}GrinCode.GenSilly} import({%{GRIN}Silly}) export(grin2silly)
%%]

%%[8 hs import(UU.Pretty, {%{GRIN}GRINCCommon}, Data.List(nub), Data.Maybe, {%{EH}GrinCode}, {%{GRIN}Primitives}, {%{GRIN}Config})
%%]
%%[8 hs import({%{GRIN}Silly})
%%]
%%[8 hs import({%{EH}Base.Common} hiding "((<+>))")
%%]
%%[8 hs import(qualified Data.Map as Map, Data.Bits)
%%]

%%[8 import({GrinCode/AbsSyn})
%%]

%%[8 import({GrinCode/LastExpr})
%%]

%%[8
WRAPPER GrAGItf
%%]


%%[8
{
grin2silly :: HsName -> GrModule -> Bool -> SilModule
grin2silly e gr emitTraceInfo
 = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf gr))
                        (Inh_GrAGItf { entryNm_Inh_GrAGItf = e
--                                   , doFunctionTrace_Inh_GrAGItf = emitTraceInfo
                                     }
                        )
   in silModule_Syn_GrAGItf t

}
%%]



%%[8 import({GrinCode/ToSilly})
%%]

