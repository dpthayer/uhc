%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pred occurrence gathering
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR NTPrf [ | | gathCnstrMp USE {`cnstrMpUnion`} {Map.empty}: CHRPredOccCnstrMp ]

SEM Expr
  | IConst CConst Var Con
                lhs         .   gathCnstrMp         =   foGathCnstrMp @fo_
  | App         lhs         .   gathCnstrMp         =   cnstrMpUnions [gathPredLToProveCnstrMp $ @prOccL, @func.gathCnstrMp, @arg.gathCnstrMp]
  | TypeAs      lhs         .   gathCnstrMp         =   cnstrMpUnions [foGathCnstrMp @fo_, foGathCnstrMp @fo_fitDown, @expr.gathCnstrMp]
  | Let         loc         .   gathCnstrMp         =   cnstrMpUnions [@toProveElsewhereCnstrMp,@body.gathCnstrMp] -- for now
  | Lam LamImpl lhs         .   gathCnstrMp         =   cnstrMpUnions [gathPredLToAssumeCnstrMp @knPrL,@body.gathCnstrMp]
  | AppTop      lhs         .   gathCnstrMp         =   cnstrMpUnions [gathPredLToAssumeCnstrMp @knPrL,@expr.gathCnstrMp]
%%]

%%[10
SEM Expr
  | Sel         lhs         .   gathCnstrMp         =   cnstrMpUnions [gathPredLToProveCnstrMp @prOccL, @expr.gathCnstrMp]
  | Rec         lhs         .   gathCnstrMp         =   cnstrMpUnions [foGathCnstrMp @fo_, @recExpr.gathCnstrMp]

SEM RecExpr
  | Ext Upd     lhs         .   gathCnstrMp         =   cnstrMpUnions [gathPredLToProveCnstrMp @prOccL, @recExpr.gathCnstrMp, @expr.gathCnstrMp]

SEM RecPatExpr
  | Ext         lhs         .   gathCnstrMp         =   cnstrMpUnions [gathPredLToProveCnstrMp @prOccL, @recPatExpr.gathCnstrMp, @patExpr.gathCnstrMp]
%%]

%%[97
SEM PatExpr
  | Expr        lhs         .   gathCnstrMp         =   cnstrMpUnions [foGathCnstrMp @fo_, @expr.gathCnstrMp]
%%]

%%[9
SEM Decl
  | Instance    loc         .   (chrCtxtAssumeCnstrMp,chrSuperProveCnstrMp,chrInstAssumeCnstrMp,chrCtxtArgUIDL,chrCtxtArgNmL,chrSuperProveUIDL,chrSuperProveNmL,chrInstNm)
                                                    =   let (u:us) = mkNewUIDL (lc + ls + 1) @lUniq6
                                                            (usc,uss) = splitAt lc us
                                                            lc = length @ctxtPrFixL
                                                            ls = length @supPrTyL
                                                            d = case @instVariant of {InstDefault -> @dictSelfNm ; _ -> @dictBuildNm}
                                                        in  ( cnstrMpFromList $ zipWith (\p u -> mkAssumeConstraint p u @predScope) @ctxtPrFixL            usc
                                                            , cnstrMpFromList $ zipWith (\p u -> mkProveConstraint  p u @predScope) (map tyPred @supPrTyL) uss
                                                            , cnstrMpFromList [mkAssumeConstraint' (tyPred @hdPrTyFix) u d @predScope]
                                                            , usc
                                                            , map mkHNm usc
                                                            , uss
                                                            , map mkHNm uss
                                                            , d
                                                            )
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Proving (predicates) via CHR's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
simplify env chrStore heur toProveHereCnstrMp prevRes
  = (chrSolveRemCnstrMp2,chrSolveEvidBindMp,chrSolveEvidBinds,chrSolveErrs,chrSimplifyResult,chrSolveEvidCoreMp)
  where (_,u1,u2,u3) = mkNewLevUID3 $ fiUniq env
        ((chrSolveRemCnstrMp,chrSolveEvidMp,chrSolveErrs),chrSimplifyResult)
          = chrSimplifyToEvidence (env {fiUniq = u1}) chrStore heur toProveHereCnstrMp prevRes
        (chrSolveRemCnstrMp2,chrSolveEvidMp2)
          = patchUnresolvedWithAssumption (env {fiUniq = u2}) chrSolveRemCnstrMp chrSolveEvidMp
        chrSolveEvidCoreMp
          = evidMpToCore (env {fiUniq = u3}) chrSolveEvidMp2
        (chrSolveEvidBindMp,chrSolveEvidBinds)
          = evidKeyCoreMpToBinds chrSolveEvidCoreMp

debugInfo chrSimplifyResult
  = (s,rg,chrSolveStateDoneConstraints s,chrSolveStateTrace s)
  where s  = simpresSolveState chrSimplifyResult
        rg = simpresRedGraph chrSimplifyResult
%%]

%%[9
SEM AGItf
  | AGItf       loc         .   toProveCnstrMp      =   @expr.tyCnstr `chrAppSubst` @expr.gathCnstrMp
                            .   toProveHereCnstrMp  =   @toProveCnstrMp
                            .   (chrSolveMainRemCnstrMp,chrSolveMainEvidBindMp,chrSolveMainEvidBinds,chrSolveMainErrs,chrSimplifyResult,chrSolveMainEvidCoreMp)
                                                    =   simplify (@chrFIIn {fiUniq = @lUniq2}) @chrStore (heurScopedEHC @chrFIIn) @toProveHereCnstrMp emptySimplifyResult
                            .   (chrSolveMainState,chrSolveMainRedGraph,chrSolveMainDoneConstraints,chrSolveMainTrace)
                                                    =   debugInfo @chrSimplifyResult
%%]

%%[9
SEM Expr
  | Let         loc         .   toProveCnstrMp      =   @decls.tyCnstr `chrAppSubst` @decls.gathCnstrMp
                            .   (toProveHereCnstrMp,toProveElsewhereCnstrMp)
                                                    =   Map.partitionWithKey (\k _ -> isLetProveCandidate (Set.fromList @gTyTvL) $ cnstrPred k) @toProveCnstrMp
                            .   (chrSolve1RemCnstrMp,chrSolve1EvidBindMp,chrSolve1EvidBinds,chrSolve1Errs,chrSimplifyResult1,chrSolve1EvidCoreMp)
                                                    =   simplify (@chrFIIn {fiUniq = @lUniq5}) @lhs.chrStore (heurScopedEHC @chrFIIn) @toProveHereCnstrMp emptySimplifyResult
                            .   (chrSolve1State,chrSolve1RedGraph,chrSolve1DoneConstraints,chrSolve1Trace)
                                                    =   debugInfo @chrSimplifyResult1

                            .   (toAssumeNeverCnstrMp,_)
                                                    =   Map.partitionWithKey (\k _ -> isLetProveFailure (Set.fromList @gTyTvL) $ cnstrPred k) @chrSolve1RemCnstrMp

                            .   (chrSolve2RemCnstrMp,chrSolve2EvidBindMp,chrSolve2EvidBinds,chrSolve2Errs,chrSimplifyResult2,chrSolve2EvidCoreMp)
                                                    =   simplify (@chrFIIn {fiUniq = @lUniq4}) @lhs.chrStore (heurScopedEHC @chrFIIn) @quantCnstrMp
                                                        $ simplifyResultResetForAdditionalWork @chrSimplifyResult1
                            .   (chrSolve2State,chrSolve2RedGraph,chrSolve2DoneConstraints,chrSolve2Trace)
                                                    =   debugInfo @chrSimplifyResult2
%%]

%%[9
SEM Decl
  | Instance    loc         .   toProveDeclsCnstrMp =   cnstrMpUnions [@chrInstAssumeCnstrMp,@chrCtxtAssumeCnstrMp,@decls.tyCnstr `chrAppSubst` @decls.gathCnstrMp]
                            .   (chrSolveDeclsRemCnstrMp,chrSolveDeclsEvidBindMp,chrSolveDeclsEvidBinds,chrSolveDeclsErrs,chrDeclsSimplifyResult,_)
                                                    =   simplify (@chrFIIn {fiUniq = @lUniq7}) @lhs.chrStore (heurScopedEHC @chrFIIn) @toProveDeclsCnstrMp emptySimplifyResult
                            .   (chrSolveDeclsState,chrSolveDeclsRedGraph,chrSolveDeclsDoneConstraints,chrSolveDeclsTrace)
                                                    =   debugInfo @chrDeclsSimplifyResult

                            .   toProveSuperCnstrMp =   cnstrMpUnions [@chrCtxtAssumeCnstrMp,@chrSuperProveCnstrMp]
                            .   (chrSolveSuperRemCnstrMp,chrSolveSuperEvidBindMp,chrSolveSuperEvidBinds,chrSolveSuperErrs,chrSuperSimplifyResult,_)
                                                    =   simplify (@chrFIIn {fiUniq = @lUniq5}) @lhs.chrStore (heurScopedEHC @chrFIIn) @toProveSuperCnstrMp emptySimplifyResult
                            .   (chrSolveSuperState,chrSolveSuperRedGraph,chrSolveSuperDoneConstraints,chrSolveSuperTrace)
                                                    =   debugInfo @chrSuperSimplifyResult
%%]

Interaction with existing impl:

%%[9
SEM Expr
  | Let         loc         .   quantPrOccL         =   if ehcCfgClassViaCHR @lhs.opts
                                                        then [ mkPredOcc (cpoPr o) (mkPrIdCHR i) sc | (Assume o,[RedHow_Assumption i _ sc]) <- Map.toList @chrSolve1RemCnstrMp ]
                                                        else @prfArgPrOccL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional prove requirements + assume introductions yielded by generalization
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
SEM Expr
  | Let         loc         .   (quantCnstrMp, coeArgIdMp)
                                                    =   let mk u nm tmpo
                                                              = (cnstrMpFromList ass `cnstrMpUnion` cnstrMpUnions (map cnstrMpFromList prvs), concat coeArgIds)
                                                              where assSc = maybe @predScope id $ gamLookup nm @decls.scopeGam
                                                                    (ass,prvs,coeArgIds)
                                                                      = unzip3 [ ( mkAssumeConstraint (poPr po) (poId po) assSc
                                                                                 , zipWith (\u i -> mkProveConstraint (poPr po) u (ipoScope i)) ups ipos
                                                                                 , zipWith (\i u -> (ipoId i,u)) ipos ups
                                                                                 )
                                                                               | ((po,ipos),u') <- zip impls $ mkNewLevUIDL (length impls) u
                                                                               , let ups = mkNewLevUIDL (length ipos) u'
                                                                               ]
                                                                      where impls = tmpoImplsPrvReq tmpo
                                                            tmpos = gamToAssocL @tqoGam
                                                            (quantCnstrMps, coeArgIds) = unzip $ zipWith (\(nm,tmpo) u -> mk u nm tmpo) tmpos (mkNewLevUIDL (length tmpos) @lUniq6)
                                                        in  ( cnstrMpUnions quantCnstrMps
                                                            , foldr (\(occ,arg) m -> Map.insertWith (++) occ [arg] m) Map.empty $ concat coeArgIds
                                                            )
                            .   prvArgCSubst        =   uidImplsLToCSubst [ (occ, ([mkAppCoe $ map (mkCExprHole @lhs.opts) args], [])) | (occ,args) <- Map.toList @coeArgIdMp ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Propagation of bindings resulting from assumptions downwards
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR NTPrf [ chrEvidBindMp: EvidKeyToCBindMap | | ]

SEM AGItf
  | AGItf       loc         .   chrEvidBindMp       =   Map.empty

SEM Decl
  | Instance    loc         .   chrEvidBindMp       =   @chrSolveDeclsEvidBindMp `evidKeyToCBindMapUnion` @lhs.chrEvidBindMp

SEM Expr
  | Let         loc         .   chrSolveEvidBindMp  =   @chrSolve2EvidBindMp `evidKeyToCBindMapUnion` @chrSolve1EvidBindMp
                            .   chrEvidBindMp       =   @chrSolveEvidBindMp `evidKeyToCBindMapUnion` @lhs.chrEvidBindMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Bindings for assumed preds
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
mkAssumeBindings :: [UID] -> EvidKeyToCBindMap -> [CBind]
mkAssumeBindings ids mp
  = concat [ maybe [] id $ Map.lookup i mp | i <- ids ]
%%]

%%[9
SEM Decl
  | Instance    loc         .   chrAssumeSuperBindL =   mkAssumeBindings @chrCtxtArgUIDL @chrSolveSuperEvidBindMp

SEM Expr
  | Lam AppTop LamImpl
                loc         .   chrAssumeBindL      =   mkAssumeBindings (map poiId @poiL) @lhs.chrEvidBindMp
%%]
