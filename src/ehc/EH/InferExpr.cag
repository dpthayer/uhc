%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type inferencing for Expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[98
SEM AGItf
  | AGItf       loc         .   (foMain,nmErrs)
                                            =   if @lhs.isTopMod
                                                then let (t,e) = valGamLookupTy hsnMain @expr.gathValGam
                                                     in  (fitsIn strongFIOpts @fe @lUniq_98_fitsIn_ty @expr.tyVarMp t (tyTopLevelMain @lhs.opts), e)
                                                else (emptyFO,[])
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Known type distr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.knTy
ATTR AllExpr [ knTy: Ty | | ]
%%]

%%[1.knTy.AGItf
SEM AGItf
  | AGItf       expr        .  knTy         =  Ty_Any
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Type of Expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.ty
ATTR AllExpr [ | | ty: Ty ]
%%]

%%[2.tyVarMp
ATTR AllExpr [ | tyVarMp: VarMp | ]
%%]

-- generated from ruler rules into EHRulerRules, was 1.Const
%%[9090.Const
SEM Expr
  | CConst      loc         .   ty_                 =   tyChar
  | IConst      loc         .   ty_                 =   tyInt
  | IConst CConst
                loc         .   fo_                 =   @ty_ `fitsIn` @lhs.knTy
                            .   ty                  =   foTy @fo_
%%]

-- generated from ruler rules into EHRulerRules, was 2.Const
%%[9090.Const
SEM Expr
  | IConst CConst
                loc         .   fo_                 :=  @ty_ `fitsIn` (@lhs.tyVarMp |=> @lhs.knTy)
                lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
%%]

-- generated from ruler rules into EHRulerRules, was 4.Const
%%[9090.Const
SEM Expr
  | IConst CConst
                loc         .   fo_                 :=  fitsIn @lhs.fiOpts @fe @lUniq @lhs.tyVarMp @ty_ (@lhs.tyVarMp |=> @lhs.knTy)
%%]

-- generated from ruler rules into EHRulerRules, was 4_2.Const
%%[9090
SEM Expr
  | CConst      loc         .   imprTy              =   tyChar
  | IConst      loc         .   imprTy              =   tyInt
%%]

-- generated from ruler rules into EHRulerRules, was 1.Var
%%[9090.Var
SEM Expr
  | Var         loc         .   (gTy,nmErrs)
                                                    =   valGamLookupTy @nm @lhs.valGam
                            .   ty_                 =   @gTy
                            .   fo_                 =   @ty_ `fitsIn` @lhs.knTy
                            .   ty                  =   foTy @fo_
%%]

-- generated from ruler rules into EHRulerRules, was 1.Var
%%[9090.Var
SEM Expr
  | Var         loc         .   ty_                 :=  @lhs.tyVarMp |=> @gTy
                            .   fo_                 :=  @ty_ `fitsIn` (@lhs.tyVarMp |=> @lhs.knTy)
                lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
%%]

-- generated from ruler rules into EHRulerRules, was 2.Var
%%[9090.Var
SEM Expr
  | Var         loc         .   ty_                 :=  @lhs.tyVarMp |=> tyInst @lUniq @gTy
%%]

-- generated from ruler rules into EHRulerRules, was 3.Var
%%[9090.Var
SEM Expr
  | Var         loc         .   fo_                 :=  fitsIn @lhs.fiOpts @fe @lUniq @lhs.tyVarMp @ty_ (@lhs.tyVarMp |=> @lhs.knTy)
                            .   ty_                 :=  @lhs.tyVarMp |=> @gTy
%%]

-- generated from ruler rules into EHRulerRules, was 4_2.Var
%%[9090.Var
SEM Expr
  | Var         loc         .   imprTy              =   @lhs.imprTyVarMp |=> @gTy
%%]

-- generated from ruler rules into EHRulerRules, was 1.Con
%%[9090.Con
SEM Expr
  | Con         loc         .   ty                  =   let  resTy = tyArrowRes @lhs.knTy
                                                        in   tyProdArgs resTy `mkArrow` resTy
%%]

-- generated from ruler rules into EHRulerRules, was 2.Con
%%[9090.Con
SEM Expr
  | Con         loc         .   fo_                 =   let  gTy      = mkTyFreshProdFrom @lUniq (hsnProdArity @nm)
                                                             foKnRes  = gTy `fitsIn` (@lhs.tyVarMp |=> tyArrowRes @lhs.knTy)
                                                        in   foKnRes {foTy =  tyProdArgs (foTy foKnRes)
                                                                                `mkArrow` (foTy foKnRes)}
                            .   ty                  :=  foTy @fo_
                lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
%%]

-- generated from ruler rules into EHRulerRules, was 4.Con
%%[9090.Con
SEM Expr
  | Con         loc         .   (gTy,nmErrs)        :=  valGamLookupTy @nm @lhs.valGam
                            .   ty_                 :=  @lhs.tyVarMp |=> @gTy
                            .   fo_                 :=  fitsIn @lhs.fiOpts @fe @lUniq2 @lhs.tyVarMp @ty_ (@lhs.tyVarMp |=> @lhs.knTy)
%%]

-- generated from ruler rules into EHRulerRules, was 4_2.Con
%%[9090.Con
SEM Expr
  | Con         loc         .   imprTy              =   @lhs.imprTyVarMp |=> @gTy
%%]

-- generated from ruler rules into EHRulerRules, was 1.App
%%[5.App
SEM Expr
  | App AppImpred
                loc         .   argTy               =   Ty_Any
                            .   knFunTy             =   [@argTy] `mkArrow` @lhs.knTy
                func        .   knTy                =   @knFunTy
                (arg.knTy,loc.ty_)                  =   tyArrowArgRes @func.ty
                loc         .   ty                  =   @ty_
%%]

-- generated from ruler rules into EHRulerRules, was 2.App
%%[5.App
SEM Expr
  | App AppImpred
                loc         .   argTy               :=  mkNewTyVar @lUniq
                            .   ty                  :=  @lhs.knTy
                arg         .   knTy                :=  @argTy
%%]
                            .   ty                  :=  @arg.tyVarMp |=> @ty_

%%[9.App
SEM Expr
  | App AppImpred
                loc         .   (knFunTy,imTy,argTy):=  let  [i,a] = mkNewUIDL 2 @lUniq
                                                             im = mkImplsVar i
                                                             at = mkTyVar a
                                                        in   ([im,at] `mkArrow` @lhs.knTy,im,at)
                loc         .   ty_                 :=  @lhs.knTy
                loc         .   (prOccL,implsTl)    =   implsPredsTailWithLkup (varmpImplsLookupCyc2 @arg.tyVarMp) @lhs.predScope $ tyImplsWithLkup (varmpTyLookupCyc2 @arg.tyVarMp) @imTy
                lhs			.	tyVarMp				=	@prvOccTlVarMp |=> @arg.tyVarMp
%%]

%%[12.AppImpl
SEM Expr
  | AppImpl     loc         .   knFunTy             =   [@argPr.ty] `mkArrow` @lhs.knTy
                func        .   knTy                =   @knFunTy
                loc         .   (knImpls,ty_)       =   tyArrowImplsResWithLkup (varmpTyLookupCyc2 @func.tyVarMp) @func.ty
                            .   (knArgImpl,knResImpls)
                                                    =   case @knImpls of
                                                            (a:r)  -> (a,r)
                                                            []     -> (Ty_Any,[])
                            .   foPr                =   fitPredToEvid @lUniq @func.tyVarMp @knArgImpl @lhs.clGam
                arg         .   knTy                =   foTy @foPr
                            .   tyVarMp             =   foVarMp @foPr |=> @func.tyVarMp
                loc         .   ty                  =   @knResImpls `mkArrow` @ty_
%%]

-- generated from ruler rules into EHRulerRules, was 1.Lam
%%[5.Lam
SEM Expr
  | Lam         loc         .   funTy               =   [Ty_Any] `mkArrow` Ty_Any
                            .   fo_fitF_            =   @funTy `fitsIn` @lhs.knTy
                (arg.knTy,body.knTy)                =   tyArrowArgRes (foTy @fo_fitF_)
                arg         .   valGam              =   gamPushNew @lhs.valGam
                loc         .   ty                  =   @lhs.knTy
%%]

-- generated from ruler rules into EHRulerRules, was 2.Lam
%%[5.Lam
SEM Expr
  | Lam         loc         .   (argTy,resTy,funTy)
                                                    :=  let  [a,r] = mkNewTyVarL 2 @lUniq
                                                        in   (a,r,[a] `mkArrow` r)
                            .   fo_fitF_            :=  @funTy `fitsIn` (@lhs.tyVarMp |=> @lhs.knTy)
                arg         .   knTy                :=  @argTy
                            .   tyVarMp             =   foVarMp @fo_fitF_ |=> @lhs.tyVarMp
                body        .   knTy                :=  @resTy
                loc         .   bodyTyVarMp         =   @body.tyVarMp
                            .   ty                  :=  [@bodyTyVarMp |=> @arg.ty] `mkArrow` @body.ty
%%]

-- generated from ruler rules into EHRulerRules, was 4.Lam
%%[5.Lam
SEM Expr
  | Lam         loc         .   lamKnTyVarMp        =   @lhs.tyVarMp
                            .   fo_fitF_            :=  fitsIn @knFunFIOpts @fe @lUniq2 @lamKnTyVarMp @funTy @lhs.knTy
                            .   furtherTyVarMp      =   foVarMp @fo_fitF_ |=> @lhs.tyVarMp
                arg         .   tyVarMp             :=  @furtherTyVarMp
                loc         .   ty                  :=  [@arg.ty] `mkArrow` @body.ty
%%]
  | Lam         loc         .   lamKnTyVarMp        =   @lhs.tyVarMp
                            .   knTySubs            =   @lamKnTyVarMp |=> @lhs.knTy
                            .   fo_fitF_            :=  let  fo = fitsIn @knFunFIOpts @fe @lUniq2 @lamKnTyVarMp @funTy @knTySubs
                                                        in   fo {foTy = foVarMp fo |=> @funTy}

%%[9.Lam
SEM Expr
  | Lam         loc         .   (imTy,argTy,resTy,funTy)
                                                    :=  let  [iv,av,rv] = mkNewUIDL 3 @lUniq
                                                             i = mkImplsVar iv
                                                             a = mkTyVar av
                                                             r = mkTyVar rv
                                                        in   (i,a,r,[i,a] `mkArrow` r)
                loc         .   (knImpls,_,_)       =   tyArrowImplsArgResWithLkup (varmpTyLookupCyc2 @furtherTyVarMp) @funTy
                            .   ty                  :=  (@knImpls ++ [@arg.ty]) `mkArrow` @body.ty
%%]

%%[12.LamImpl
SEM Expr
  | LamImpl     loc         .   funTy               =   let  r = mkNewTyVar @lUniq
                                                        in   [@argPr.ty] `mkArrow` r
                            .   fo_fitF_            =   fitsIn (implFIOpts {fioBindRFirst=True}) @fe @lUniq2 @lhs.tyVarMp @funTy @lhs.knTy
                            .   knImplsVarMp        =   foVarMp @fo_fitF_ |=> @lhs.tyVarMp
                            .   (knImpls,ty_)       =   tyArrowImplsResWithLkup (varmpTyLookupCyc2 @knImplsVarMp) @funTy
                            .   (knArgImpl,knResImpls)
                                                    =   hdAndTl @knImpls
                            .   foPr                =   fitPredToEvid @lUniq4 @knImplsVarMp @knArgImpl @lhs.clGam
                arg         .   knTy                =   foTy @foPr
                            .   tyVarMp             =   foVarMp @foPr |=> @knImplsVarMp
                body        .   knTy                =   @knResImpls `mkArrow` @ty_
                loc         .   ty                  =   [@knArgImpl] `mkArrow` @body.ty
%%]

-- generated from ruler rules into EHRulerRules, was 2.AppTop
%%[5.AppTop
SEM Expr
  | AppTop      loc         .   knTy                =   tyEnsureNonAny @lUniq @lhs.knTy
%%]

20080228, AD:
An type at apptop may not introduce an implicits.
This is to avoid a scope introduction (see implsIsEmpty).
Consequences are yet unclear.
- Does not work, that is enforcing empty predicates here: im = mkImplsNil
  Likely caused by partiap apps yielding types taking more predicates (?)

%%[9.AppTop
SEM Expr
  | AppTop      loc         .   (imTy,knTopTy,resTy)=   let  [i,r] = mkNewUIDL 2 @lUniq
                                                             im = mkImplsVar i
                                                             rt = mkTyVar r
                                                        in   (im,rt,[im] `mkArrow` rt)
                            .   foKnRes             =   fitsIn @lhs.fiOpts @fe @lUniq2 @lhs.tyVarMp @resTy @lhs.knTy
                            .   knTy                :=  @knTopTy
                            .   furtherTyVarMp      =   foVarMp @foKnRes |=> @lhs.tyVarMp
                expr        .   tyVarMp             =   @furtherTyVarMp
                loc         .   ty                  =   [@imTy] `mkArrow` @expr.ty
%%]

%%[8.Undefined
SEM Expr
  | Undefined CaseAltFail
                loc         .   ty                  =   tyEnsureNonAny @lUniq @lhs.knTy
%%]
                loc         .   ty                  =   @lhs.tyVarMp |=> (tyEnsureNonAny @lUniq @lhs.knTy)

-- generated from ruler rules into EHRulerRules, was 1.TypeAs
%%[5.TypeAs
SEM Expr
  | TypeAs      loc         .   fo_                 =   @tyExpr.ty `fitsIn` @lhs.knTy
                expr        .   knTy                =   @tyExpr.ty
%%]

-- not generated from ruler rules into EHRulerRules:
%%[5.TypeAs
SEM Expr
  | TypeAs      loc         .   tyTy                =   @tyExpr.ty
                            .   ty_q_               =   @tyTy
%%]

-- generated from ruler rules into EHRulerRules, was 2.TypeAs
%%[5.TypeAs
SEM Expr
  | TypeAs      loc         .   fo_                 :=  @ty_q_ `fitsIn` (@lhs.tyVarMp |=> @lhs.knTy)
                expr        .   knTy                :=  foVarMp @fo_ |=> @ty_q_
                            .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
%%]

-- generated from ruler rules into EHRulerRules, was 4.TypeAs
-- 20070205 - AD, this does not match ruler rules anymore. Split up in check for context and inner expression,
--   latter should have (e.g.) forall skolemized. Which it now does.
%%[5.TypeAs
SEM Expr
  | TypeAs      loc         .   (gTyTvL,cycVarMp)   =   let  (vg,cycVarMp1) = @lhs.tyVarMp |==> @lhs.valGam
                                                             (tg,cycVarMp2) = @lhs.tyVarMp |==> @lhs.tyGam
                                                        in   (Set.toList $ ftvSet vg `Set.union` ftvSet tg, cycVarMp1 |+> cycVarMp2)
                            .   tyTy                :=  @lhs.tyVarMp |=> @tyExpr.ty
                            .   ty_q_               :=  tyQuantify (`elem` (@tyExpr.tyVarWildL ++ @gTyTvL)) @tyTy
                            .   fo_                 :=  fitsIn strongFIOpts @fe @lUniq @lhs.tyVarMp @ty_q_ @lhs.knTy
                            .   ty_q_2_VarMp        =   foVarMp @fo_ |=> @lhs.tyVarMp
                            .   knTyDown            =   mkTyVar @lUniq3
                            .   fo_fitDown          =   fitsIn (strongFIOpts {fioBindLFirst = False}) @fe @lUniq2 @ty_q_2_VarMp @knTyDown @ty_q_
                expr        .   knTy                :=  @knTyDown
                            .   tyVarMp             :=  foVarMp @fo_fitDown |=> @ty_q_2_VarMp
%%]

%%[10
SEM Expr
  | DynVar      loc         .   ty                  =   Ty_Any
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Data based records
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7 hs
dfCheck :: UID -> FIOpts -> FIEnv -> HsName -> ValGam -> VarMp -> Ty -> (Ty,Ty,FIOut,[Err])
dfCheck uniq fiOpts fe fldNm valGam knTyVarMp knTy
  = (knDataTy,knFldTy,fo,nmErrs)
  where (gTy,nmErrs) = valGamLookupTy (hsnFldUpd fldNm) valGam
        (_,u1,u2)    = mkNewLevUID2 uniq
        (knFldTy,knDataTy,knFldUpdTy)
                     = (e,df,v `mkArrow` knTy)
                     where v@[e,df] = mkNewTyVarL 2 u1
        fo           = fitsIn fiOpts fe u2 knTyVarMp gTy knFldUpdTy
%%]

%%[7
SEM DataFieldExpr
  | Upd         (loc.knDataTy,expr.knTy,loc.fo_,loc.nmErrs)
                                                    =   dfCheck @lUniq @lhs.fiOpts @fe @nm @lhs.valGam @lhs.tyVarMp @lhs.knTy
                dataFieldExpr
                            .   knTy                =   @knDataTy
                            .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
                loc         .   ty                  =   @expr.tyVarMp |=> @knDataTy
  | Con         loc         .   (gTy,nmErrs)        =   valGamLookupTy (hsnUn @nm) @lhs.valGam
                            .   fo_                 =   let [u] = mkNewTyVarL 1 @lUniq
                                                            t = @lhs.tyVarMp |=> @lhs.knTy
                                                            fo = fitsIn @lhs.fiOpts @fe @lUniq2 @lhs.tyVarMp ([t] `mkArrow` u) (@lhs.tyVarMp |=> @gTy)
                                                        in  fo {foTy = foVarMp fo |=> t}
                            .   ty                  =   foTy @fo_
                lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
  | Expr        loc         .   ty                  =   @lhs.tyVarMp |=> @lhs.knTy
%%]

%%[7
ATTR DataFieldExpr [ | updExprTyVarMp: VarMp | updExprTy: Ty ]

SEM Expr
  | DataFields  dataFieldExpr
                            .   updExprTyVarMp      =   @lhs.tyVarMp

SEM DataFieldExpr
  | Expr        expr        .   tyVarMp             =   @lhs.updExprTyVarMp
                            .   knTy                =   mkNewTyVar @lUniq
                lhs         .   updExprTyVarMp      =   @expr.tyVarMp
                            .   updExprTy           =   @expr.ty
                            .   tyVarMp             =   @lhs.tyVarMp
  | Con         lhs         .   updExprTy           =   Ty_Any
%%]

%%[7
SEM Expr
  | DataFields  (dataFieldExpr.knTy,dataFieldExpr.tyVarMp,loc.dfErrs)
                                                    =   case @dataFieldExpr.mbConNm of
                                                          Just _
                                                            -> (@lhs.knTy,@lhs.tyVarMp,[])
                                                          _ -> (t,c,e)
                                                            where (t,_,c,e,_)
                                                                    = foldr (\fldNm (knTy,updExprTy,tyVarMp,errL,u)
                                                                               -> let (u',u1,u2) = mkNewLevUID2 u
                                                                                      (knDTy,knFTy,fo1,e1) = dfCheck u1 @lhs.fiOpts @fe fldNm @lhs.valGam tyVarMp knTy
                                                                                      tyVarMp' = foVarMp fo1 |=> tyVarMp
                                                                                      (gTy,nmErrs) = valGamLookupTy fldNm @lhs.valGam
                                                                                      fo2 = fitsIn @fldFIOpts @fe u2 tyVarMp' gTy ([updExprTy] `mkArrow` knFTy)
                                                                                  in  (knDTy, updExprTy, foVarMp fo2 |=> tyVarMp', foErrL fo2 ++ foErrL fo1 ++ e1 ++ nmErrs ++ errL, u')
                                                                            )
                                                                            (@lhs.knTy,@dataFieldExpr.updExprTy,@dataFieldExpr.updExprTyVarMp,[],@lUniq)
                                                                            (Set.toList $ Set.unions [ Map.keysSet (dtiFldMp i) | i <- @dtiL ] `Set.difference` @fldS)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Row based records
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7
SEM RecExpr
  | Empty       loc         .   fo_                 =   fitsIn (@lhs.fiOpts) @fe @lUniq @lhs.tyVarMp tyRecEmpty @lhs.knTy
                            .   ty                  =   foTy @fo_
                lhs         .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
  | Ext Upd     loc         .   (knRowTy,knRecTy,knTailTy,knExprTy)
                                                    =   let  [r,e] = mkNewTyVarL 2 @lUniq
                                                             tl = hsnRec `mkConApp` [r]
                                                        in   (r, tl `mkTyRecExt` [(@nm,e)], tl, e)
                            .   foKnRec             =   fitsIn @knFIOpts @fe @lUniq2 @lhs.tyVarMp @knRecTy @lhs.knTy
                loc         .   recTyVarMp          =   foVarMp @foKnRec |=> @lhs.tyVarMp
                (loc.knRecHasLab,loc.recKnTlTy,expr.knTy)
                                                    =   maybe (False,@knTailTy,@knExprTy) (\(r,e) -> (True,r,e)) $ tyRecExtrWithLkup (varmpTyLookupCyc2 @recTyVarMp) @nm $ foTy @foKnRec
                recExpr     .   tyVarMp             =   @recTyVarMp
                loc         .   ty                  =   foTy @foKnRec
  | Ext         recExpr     .   knTy                =   @recKnTlTy
  | Upd         recExpr     .   knTy                =   @recKnTlTy `mkTyRecExt` [(@nm,mkNewTyVar @lUniq3)]
%%]

%%[7
SEM Expr
  | Sel         (loc.knRowTy,loc.knExprTy)          =   let r = mkNewTyVar @lUniq
                                                        in  (r, (hsnRec `mkConApp` [r]) `mkTyRecExt` [(@lbl,@lhs.knTy)])
                expr		.	knTy				=	@knExprTy
                loc         .   (_,ty)              =   maybe (Ty_Any,Ty_Any) id (tyRecExtrWithLkup (varmpTyLookupCyc2 @expr.tyVarMp) @lbl @expr.ty)
  | Rec         loc         .   knRecTy             =   let  r = mkNewTyVar @lUniq
                                                        in   hsnRec `mkConApp` [r]
                            .   fo_                 =   fitsIn @fiOpts @fe @lUniq2 @lhs.tyVarMp @knRecTy @lhs.knTy
                recExpr     .   knTy                =   @knRecTy
                            .   tyVarMp             =   foVarMp @fo_ |=> @lhs.tyVarMp
                loc         .   ty                  =   foTy @fo_
%%]

%%[9
SEM Expr
  | Sel         (loc.knRowTy,loc.knExprTy)          :=  let r = mkNewTyVar @lUniq
                                                        in  (r, [Ty_Impls Impls_Nil] `mkArrow` ((hsnRec `mkConApp` [r]) `mkTyRecExt` [(@lbl,@lhs.knTy)]))
                loc         .   (_,ty)              :=  maybe (Ty_Any,Ty_Any) id (tyRecExtrWithLkup (varmpTyLookupCyc2 @expr.tyVarMp) @lbl $ snd $ tyArrowImplsResWithLkup (varmpTyLookupCyc2 @expr.tyVarMp) @expr.ty)
%%]



