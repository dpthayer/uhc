%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to EH/AbsSyn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EH}EH} import({%{EH}Base.Common})
%%]

%%[1 hs export(AGItf(..), Decl(..), Decls, TyExpr(..), Expr(..), PatExpr(..))
%%]

%%[1 hs import({%{EH}HS}(Range)) export(mkRngEH)
%%]

%%[1 hs export(mkLet)
%%]

%%[4 hs import({%{EH}Ty})
%%]

%%[5 hs export(TyExprs, TyVar(..), TyVars, CaseAlt(..), CaseAlts, DataConstr(..), DataConstrs)
%%]

%%[5 hs export(mkCase,mkIf,mkError,mkStr)
%%]

%%[6 hs export(KiExpr(..))
%%]

%%[7 hs export(RecExpr(..), RecPatExpr(..), RowTyExpr(..), DataField(..), DataFields)
%%]

%%[9 hs export(PrExpr(..), PrExprs,FuncDep(..), FuncDeps)
%%]

%%[9 hs export(mkUnit,mkError')
%%]

%%[50 hs export(DataConstrEq(..), DataConstrEqs)
%%]

%%[1 import({EH/AbsSyn})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
mkRngEH :: r -> v -> v
mkRngEH r v = v
%%]
mkRngEH :: r -> (r -> v) -> v

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
mkLet :: Range -> Maybe [Decl] -> Expr -> Expr
mkLet r md e
  = case md of
      Just d@(_:_) -> mkRngEH r Expr_Let d e
      _            -> e
%%]

%%[9 hs
mkUnit :: Range -> Expr
mkUnit r = mkRngEH r Expr_Rec (mkRngEH r RecExpr_Empty)
%%]
mkUnit :: Range -> Expr
mkUnit _ = semCon (hsnProd 0)

%%[5 hs
mkError':: HsName -> Range -> String -> Expr
mkError' e r m
  = mkApp [mkRngEH r Expr_Var e,mkStr r (show r ++ ": " ++ m)]

mkError :: Range -> String -> Expr
mkError = mkError' hsnError

mkStr :: Range -> String -> Expr
mkStr r s
  = mkRngEH r Expr_SConst s

mkCase :: Range -> Expr -> [(PatExpr,Expr)] -> Expr
mkCase r c as
  = mkRngEH r Expr_Case c [ CaseAlt_Pat p e | (p,e) <- as ]

mkIf :: Range -> Expr -> Expr -> Expr -> Expr
mkIf r c t e
  = mkCase r
      ( Expr_TypeAs (TyExpr_Con hsnBool) c )
      [ (PatExpr_Con hsnTrue , t)
      , (PatExpr_Con hsnFalse, e)
      ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SemApp class instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
instance SemApp Expr where
  semApp       = Expr_App
  semAppTop    = Expr_AppTop
  semCon       = Expr_Con . mkHNm
  semParens    = Expr_Parens
%%]

%%[1 hs
instance SemApp PatExpr where
  semApp       = PatExpr_App
  semAppTop    = PatExpr_AppTop
  semCon       = PatExpr_Con . mkHNm
  semParens    = PatExpr_Parens
%%]

%%[1 hs
instance SemApp TyExpr where
  semApp       = TyExpr_App
  semAppTop    = TyExpr_AppTop
  semCon       = TyExpr_Con . mkHNm
  semParens    = TyExpr_Parens
%%]

%%[6 hs
instance SemApp KiExpr where
  semApp       = KiExpr_App
  semAppTop    = KiExpr_AppTop
  semCon       = KiExpr_Con . mkHNm
  semParens    = KiExpr_Parens
%%]

