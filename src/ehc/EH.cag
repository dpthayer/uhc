%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to EH/AbsSyn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EH}EH} import({%{EH}Base.Common})
%%]

%%[1 hs export(AGItf(..), Decl(..), Decls, TyExpr(..), Expr(..), PatExpr(..))
%%]

%%[1 hs import({%{EH}HS}(Range))
%%]

%%[1 hs export(mkLet)
%%]

%%[4 hs import({%{EH}Ty})
%%]

%%[5 hs export(TyExprs, TyVar(..), TyVars, CaseAlt(..), CaseAlts, DataConstr(..), DataConstrs)
%%]

%%[5 hs export(mkCase,mkIf,mkIf',mkError,mkStr)
%%]

%%[6 hs export(KiExpr(..))
%%]

%%[7 hs export(RecExpr(..), RecPatExpr(..), RowTyExpr(..), DataField(..), DataFields)
%%]

%%[8 hs export(mkCase',mkIf'')
%%]

%%[9 hs export(PrExpr(..), PrExprs,FuncDep(..), FuncDeps)
%%]

%%[9 hs export(mkUnit,mkError')
%%]

%%[50 hs export(DataConstrEq(..), DataConstrEqs)
%%]

%%[1 import({EH/AbsSyn})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constructing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
mkLet :: Range -> Maybe [Decl] -> Expr -> Expr
mkLet r md e
  = case md of
      Just d@(_:_) -> rngLift r Expr_Let d e
      _            -> e
%%]

%%[9 hs
mkUnit :: Range -> Expr
mkUnit r = rngLift r Expr_Rec (rngLift r RecExpr_Empty)
%%]
mkUnit :: Range -> Expr
mkUnit _ = semCon (hsnProd 0)

%%[5 hs
mkError':: HsName -> Range -> String -> Expr
mkError' e r m
  = mkApp [rngLift r Expr_Var e,mkStr r (show r ++ ": " ++ m)]

mkError :: Range -> String -> Expr
mkError = mkError' hsnError

mkStr :: Range -> String -> Expr
mkStr r s
  = rngLift r Expr_SConst s
%%]

%%[5 hs
%%[[5
mkIf' :: [HsName] -> Range -> Expr -> Expr -> Expr -> Expr
mkIf' (bn:tn:fn:_) r c t e
%%][8
mkIf'' :: [HsName] -> Range -> Expr -> Expr -> Expr -> Maybe UID -> Expr
mkIf'' (bn:tn:fn:_) r c t e i
%%]]
  = case c of
      Expr_Con n | n == tn -> t
                 | n == fn -> e
%%[[5
      _ -> mkCase r
%%][8
      _ -> mkCase' r
%%]]
             ( Expr_TypeAs (TyExpr_Con bn) c )
             [ (PatExpr_Con tn, t)
             , (PatExpr_Con fn, e)
             ]
%%[[8
             i
%%]]
%%]

%%[8 hs
mkIf' :: [HsName] -> Range -> Expr -> Expr -> Expr -> Expr
mkIf' ns r c t e = mkIf'' ns r c t e Nothing
%%]

%%[5 hs
mkIf :: Range -> Expr -> Expr -> Expr -> Expr
mkIf = mkIf' [hsnBool,hsnTrue,hsnFalse]
%%]

%%[5.mkCase hs
mkCase :: Range -> Expr -> [(PatExpr,Expr)] -> Expr
mkCase r c as
  = rngLift r Expr_Case c [ CaseAlt_Pat p e | (p,e) <- as ]
%%]

%%[8 -5.mkCase hs
mkCase' :: Range -> Expr -> [(PatExpr,Expr)] -> Maybe UID -> Expr
mkCase' r c as id
  = rngLift r Expr_Case c [ CaseAlt_Pat p e | (p,e) <- as ] id

mkCase :: Range -> Expr -> [(PatExpr,Expr)] -> Expr
mkCase r c as
  = mkCase' r c as Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SemApp class instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
instance SemApp Expr where
  semApp       = Expr_App
  semAppTop    = Expr_AppTop
  semCon       = Expr_Con . mkHNm
  semParens    = Expr_Parens
  mkRngCon _   = Expr_Con . mkHNm
  mkRngVar _   = Expr_Var . mkHNm
%%]
%%[7 hs
  mkProdApp l
    = Expr_Rec $ RecExpr_Empty `mkRow` l
    where mkRow = foldl (\r e -> RecExpr_Ext r Nothing e)
%%]


%%[1 hs
instance SemApp PatExpr where
  semApp       = PatExpr_App
  semAppTop    = PatExpr_AppTop
  semCon       = PatExpr_Con . mkHNm
  semParens    = PatExpr_Parens
  mkRngCon _   = PatExpr_Con . mkHNm
  mkRngVar _   = PatExpr_Var . mkHNm
%%]
%%[7 hs
  mkProdApp l
    = PatExpr_Rec $ RecPatExpr_Empty `mkRow` l
    where mkRow = foldl (\r e -> RecPatExpr_Ext r Nothing e)
%%]

%%[1 hs
instance SemApp TyExpr where
  semApp       = TyExpr_App
  semAppTop    = TyExpr_AppTop
  semCon       = TyExpr_Con . mkHNm
  semParens    = TyExpr_Parens
  mkRngCon _   = TyExpr_Con . mkHNm
%%]
%%[1.mkRngVar hs
  mkRngVar     = mkRngCon
%%]
%%[3 -1.mkRngVar hs
  mkRngVar _   = TyExpr_Var . mkHNm
%%]
%%[7 hs
  mkProdApp l
    = TyExpr_Row $ RowTyExpr_Empty `mkRow` l
    where mkRow = foldl (\r e -> RowTyExpr_Ext r Nothing e)
%%]

%%[6 hs
instance SemApp KiExpr where
  semApp       = KiExpr_App
  semAppTop    = KiExpr_AppTop
  semCon       = KiExpr_Con . mkHNm
  semParens    = KiExpr_Parens
  mkRngCon _   = KiExpr_Con . mkHNm
  mkRngVar _   = KiExpr_Var . mkHNm
%%]

