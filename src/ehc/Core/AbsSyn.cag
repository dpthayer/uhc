%%[(0 codegen)
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax for Core code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
DATA CodeAGItf
  | AGItf       module          : CModule
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Top level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
DATA CModule
  | Mod         moduleNm        : {HsName}
                expr            : CExpr
                ctagsMp         : {CTagsMp}
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Expression
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
DATA CExpr
  | Let         categ           : {CBindingsCateg}
                binds           : CBindL
                body            : CExpr
  | App         func            : CExpr
                arg             : CExpr
                argMeta         : CMetaVal
  | Lam         arg             : {HsName}
                argMeta         : CMetaVal
                body            : CExpr
  | Var         nm              : {HsName}
  | Case        expr            : CExpr
                alts            : CAltL
                dflt            : CExpr
  | Int         int             : {Int}
  | Char        char            : {Char}
  | String      str             : {String}
  | Tup         tag             : {CTag}
  | TupDel      expr            : CExpr
                tag             : {CTag}
                nm              : {HsName}
                offset          : CExpr
  | TupIns      expr            : CExpr
                tag             : {CTag}
                nm              : {HsName}
                offset          : CExpr
                fldExpr         : CExpr
  | TupUpd      expr            : CExpr
                tag             : {CTag}
                nm              : {HsName}
                offset          : CExpr
                fldExpr         : CExpr
  | CaseAltFail caseId          : {UID}
                errorExpr       : CExpr
%%]

%%[(9 codegen)
DATA CExpr
  | Hole        uid             : {UID}
  | HoleLet     bindsUid        : {UID}
                body            : CExpr
  | CoeArg
  | ImplsApp    func            : CExpr
                uid             : {ImplsVarId}
  | ImplsLam    uid             : {ImplsVarId}
                body            : CExpr
%%]

%%[(97 codegen)
DATA CExpr
  | Integer     integer         : {Integer}
%%]

%%[(8 codegen)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Meta information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
TYPE CMetas 	= (CMetaBind,CMetaVal)

DATA CMetaBind
  | Plain		-- by default a binding is Plain
  | Function0   -- special case of Plain, indicating it is a nullary function on top level (that is, the RHS is the computational part for a CAF)
  | Function1   -- special case of Plain, indicating it is a non-nullary function on top level (that is, the RHS is a lambda)
  | Apply0	    -- special case of Plain, indicating it is an apply of a Function0 (intended to implement lazy behaviour for a CAF)

DATA CMetaVal
  | Val
%%[[9
  | Dict
  | DictClass     tracks:  {[Track]}
  | DictInstance  tracks:  {[Track]}
  | Track         track:  {Track}
%%]]

SET AllMetaVal	= CMetaVal CMetas
SET AllMetaBind = CMetaBind CMetas
SET AllMeta		= CMetaVal CMetaBind CMetas
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Annotations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
DATA CExpr
  | Ann         ann             : CExprAnn
                expr            : CExpr
%%]

%%[(8 codegen)
DATA CExprAnn
  | Ty			ty				: {Ty}
%%]

%%[(8 codegen)
SET AllAnn		= CExprAnn
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Let binding
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
DATA CBind
  | Bind        nm              : {HsName}
                bindAspects     : CBindAspectL

DATA CBindAspect
  | Bind        -- nm              : {HsName}
                bindMeta        : CMetas
                expr            : CExpr
  | FFI         callconv        : {FFIWay}
                safety          : {String}
%%[[8
                impEnt          : {String}
%%][90
                impEnt          : {ForeignEnt}
%%]]
                -- nm              : {HsName}
                ty              : {Ty}
%%[[90
  | FFE         -- nm              : {HsName}
                callconv        : {FFIWay}
                expEnt          : {ForeignEnt}
                expNm           : {HsName}
                ty              : {Ty}
%%]]

TYPE CBindL     	=   [CBind]
TYPE CBindAspectL	=	[CBindAspect]
%%]

%%[(8 codegen)
SET AllBindAspect   =   CBindAspect CBindAspectL
SET AllBind     	=   CBind CBindL AllBindAspect
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% 20100731 AD: this is brainstorming about allowing a binding to bind to multiple aspects, indexed by a aspect key
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhat.CBind doclatex
Design for multiple variations of same binding.

The aim is to be able to express
\begin{itemize}
\item The difference between code and closure wrapped around the code
\item Variants of code accepting different calling conventions, or other features (i.e. explicit stack tracing)
\end{itemize}

Design particular(itie)s:
\begin{itemize}
\item (HsName,ACoreBindAspectKeyS) pair is used to refer to values,
\item CValTy describes some of its runtime structure. A type, but reflecting early representational choices
\item Redundancy: ACoreBindAspectKey_Closure0 only goes with CValTy_Boxed
\item a ACoreBindAspectKey_Closure0 implies always a ACoreBindAspectKey_Code for the same name
\end{itemize}

Extensibility at:
\begin{itemize}
\item ACoreBindAspectKey, additional alternatives describing extra aspects of a binding
\item CValTyProp, additional typing expressivity for a boxed value
\end{itemize}
%%]

-- overriding
%%[(8889 codegen)
DATA CBind
  | Bind        nm              : {HsName}
                bindAspects     : CBindAspectL

DATA CExpr
  | Var         nm              : {HsName}			-- reference to the Val of a CBindAspect
  				aspectKeyS		: {ACoreBindAspectKeyS}
%%]

-- new
%%[(8889 codegen)
DATA CBindAspect
  -- the classical binding to a CExpr; transitional
  | Bind		bindMeta        : CMetas
                expr            : CExpr
  
  -- + FFI/FFE stuff
  
  -- binding to a runtime related value, keyed
  | Val			aspectKeyS		: {ACoreBindAspectKeyS}
  				encoding		: CValTy
  				expr            : CExpr
  
  -- non-runtime binding info/annotation, keyed
  | Meta		aspectKeyS		: {ACoreBindAspectKeyS}
  				meta            : CMetas

TYPE CBindAspectL	=	[CBindAspect]

DATA CValTy
  | Unknown											-- type yet to be determined, only for transition to this encoding
  | Boxed		props			: {CValTyPropS}		-- boxed
  				mbVal			: MbCValTy			-- perhaps we know more about the contents
  | Fun			args			: CValTyLL			-- known calling convention, specifying arg/res arity/grouping, boxedness/evaluation
  				res				: CValTyL
  | Basic		basicannot		: {BasicAnnot}		-- unboxed (and evaluated), with additional annotation about its basic size & type
  
TYPE MbCValTy		=	MAYBE CValTy
TYPE CValTyL		=	[CValTy ]
TYPE CValTyLL		=	[CValTyL]

DATA CValTyProp
  | Evaluated

TYPE CValTyPropS	=	SET CValTyProp

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case alternative + pattern + pattern binding
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
DATA CAlt
  | Alt         pat             : CPat
                expr            : CExpr

TYPE CAltL      =   [CAlt]
%%]

%%[(8 codegen)
DATA CPat
  | Var         pnm             : {HsName}
  | Con         tag             : {CTag}
                rest            : CPatRest
                binds           : CPatFldL
  | Int         int             : {Int}
  | Char        char            : {Char}

TYPE CPatL      =   [CPat]
%%]

%%[(8 codegen)
DATA CPatRest
  | Var         nm              : {HsName}
  | Empty

DATA CPatFld
  | Fld         lbl             : {HsName}
                offset          : CExpr
                fldNm           : {HsName}

TYPE CPatFldL   =   [CPatFld]
%%]

%%[(97 codegen)
DATA CPat
  | BoolExpr    cexpr           : {CExpr}
%%]

  | TupSplit    pnm             : {RPatNm}
                pat             : CPat
                tag             : {CTag}
                nm              : {HsName}
                offset          : CExpr
                fldPat          : CPat

%%[(8 codegen)
SET AllAlt      =   CAlt CAltL
SET AllPat      =   CPatRest CPat CPatL AllPatFld
SET AllPatFld   =   CPatFld CPatFldL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Sets of NT's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SET AllCodeNT   =   CModule AllExpr

SET AllExpr
  = CExpr AllAnn AllBind AllAlt AllPat
    AllMeta

SET AllNT
  = AllCodeNT
%%]

