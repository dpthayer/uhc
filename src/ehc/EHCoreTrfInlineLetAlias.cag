%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Inline let bindings for variables and constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs import(Data.Maybe,qualified Data.Map as Map,{%{BASE}Common},EHCore,EHTy) export(cmodTrfInlineLetAlias)
%%]

%%[8.WRAPPER import(EHCoreAbsSyn,EHCoreCommonLev)
WRAPPER CodeAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
cmodTrfInlineLetAlias :: CModule -> CModule
cmodTrfInlineLetAlias cmod
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod)) Inh_CodeAGItf
     in   cTrf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Let bindings for just names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type NmMp = Map.Map HsName CExpr
%%]

%%[8
ATTR AllCodeNT [ nmMp: NmMp | | ]

SEM CodeAGItf
  | AGItf       module      .   nmMp        =   Map.empty

SEM CExpr
  | Let         loc         .   allowTrf    =   @categ /= CBindStrict && @categ /= CBindFFI -- && @lhs.lev > cLevOuter
                            .   nmMpNew     =   if @allowTrf
                                                then  Map.foldWithKey
                                                        (\n r m
                                                          -> case r of
                                                               CExpr_Var nm
                                                                 | nm `Map.member` @binds.bindNmMp
                                                                   -> Map.delete n m
                                                                 | otherwise
                                                                   -> Map.insert n r' m
                                                                 where r' = maybe r id . Map.lookup nm $ @lhs.nmMp
                                                               _   -> m
                                                        )
                                                        @binds.bindNmMp
                                                        @binds.bindNmMp
                                                else  Map.empty
                            .   nmMp        =   @nmMpNew `Map.union` @lhs.nmMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is expr a substitutable value?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR CExpr [ | | mbRepl: {Maybe CExpr} ]

SEM CExpr
  | Var         lhs         .   mbRepl      =   Just @cTrf
  | Int         lhs         .   mbRepl      =   Just @cTrf
  | * - Var Int
                lhs         .   mbRepl      =   Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Bound id's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllBind [ | | bindNmMp USE {`Map.union`} {Map.empty}: NmMp ]
ATTR AllBind [ | | bindL USE {++} {[]}: {[(HsName,CBind)]} ]

SEM CBind
  | Bind        lhs         .   (bindNmMp,bindL)
                                            =   case @expr.mbRepl of
                                                  Just r | @nm /= hsnMain
                                                    -> (@nm `Map.singleton` r,[(@nm,@cTrf)])
                                                  _ -> (Map.empty,[(@nm,@cTrf)])
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]
%%]

%%[8
SEM CExpr
  | Let         lhs         .   cTrf        =   if @allowTrf
                                                then mkCExprLet @categ [ b | (n,b) <- @binds.bindL, not (n `Map.member` @nmMpNew)] @body.cTrf
                                                else @cTrf
  | Var         lhs         .   cTrf        =   maybe @cTrf id . Map.lookup @nm $ @lhs.nmMp
%%]

