%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to HI/AbsSyn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs module {%{EH}HI} import({%{EH}Base.Common},{%{EH}Ty},{%{EH}Core},{%{EH}GrinCode},{%{EH}Gam},{%{EH}NameAspect},qualified {%{EH}Pred} as Pr)
%%]

%%[20 hs import({%{EH}Module},{%{EH}Pred.ToCHR},{%{EH}CHR.Solve})
%%]

%%[20 hs import(qualified Data.Map as Map,qualified EH.Util.Rel as Rel,qualified EH.Util.FastSeq as Seq,EH.Util.Utils)
%%]

%%[20 hs export(AGItf(..),Module(..),Binding(..),Bindings)
%%]

%%[20 ag import({HI/AbsSyn})
%%]

%%[99 hs import({%{EH}Base.ForceEval})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional defs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% HI info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs export(HIInfo(..), emptyHIInfo)
data HIInfo
  = HIInfo
      { hiiModEntRel		:: !ModEntRel
      , hiiFixityGam		:: !FixityGam
      , hiiIdDefOccGam		:: !IdDefOccGam
      , hiiValGam			:: !ValGam
      , hiiTyGam			:: !TyGam
      , hiiDataGam			:: !DataGam
      , hiiPrIntroGam		:: !Pr.PrIntroGam
      , hiiCHRStore			:: !ScopedPredStore
      , hiiCArityMp			:: !CArityMp
      , hiiGrInlMp			:: !GrInlMp
      }

emptyHIInfo :: HIInfo
emptyHIInfo = HIInfo Rel.empty emptyGam emptyGam emptyGam emptyGam emptyGam emptyGam emptyCHRStore Map.empty Map.empty
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Building
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20 hs export(hiFromHIInfo)
hiFromHIInfo :: HIInfo -> Seq.FastSeq Binding
hiFromHIInfo i
  = hiFromAllGams
      (hiiModEntRel 	i)
      (hiiFixityGam 	i)
      (hiiIdDefOccGam 	i)
      (hiiValGam	 	i)
      (hiiTyGam	 		i)
      (hiiDataGam	 	i)
      (hiiPrIntroGam 	i)
      (hiiCHRStore	 	i)
      (hiiCArityMp	 	i)
      (hiiGrInlMp	 	i)
%%]

%%[20 hs
hiFromGam :: (HsName -> v -> Binding) -> Gam HsName v -> Seq.FastSeq Binding
hiFromGam mk g = Seq.fromList [ mk n v | (n,v) <- gamToAssocL g ]

hiFromAllGams 
  :: ModEntRel
     -> FixityGam
     -> IdDefOccGam
     -> ValGam
     -> TyGam
     -> DataGam
     -> Pr.PrIntroGam
     -> ScopedPredStore
     -> CArityMp
     -> GrInlMp
     -> Seq.FastSeq Binding
hiFromAllGams exps fg idg vg tg dg ig chrStore arityMp inlMp
  =          Seq.fromList [Binding_Export exps]
    Seq.:++: Seq.fromList [Binding_Ids [ (o,doccOcc docc) | (o,docc) <- gamToAssocL idg ]]
    Seq.:++: Seq.fromList [Binding_Arities $ Map.toList arityMp]
    Seq.:++: Seq.fromList [Binding_GrInlines [ (n,(a,g)) | (n,GrInl_Call a g) <- Map.toList inlMp ] ]
    Seq.:++: hiFromGam  (\n fgi  -> Binding_Fixity n (fgiPrio fgi) (fgiFixity fgi)) fg
    Seq.:++: hiFromGam  (\n vgi  -> Binding_Val n (vgiTy vgi)) vg
    Seq.:++: hiFromGam  (\n tgi  -> Binding_Ty n (tgiTy tgi) (tgiKi tgi)) tg
    Seq.:++: hiFromGam  (\n dgi  -> let mkt i = (dtiCTag i,Map.toList $ Map.map dfiOffset $ dtiFldMp i)
                                in  Binding_DataCon n (assocLMapElt mkt $ dgiConstrTagAssocL dgi) (dgiIsNewtype dgi)
                    ) dg
    Seq.:++: hiFromGam  (\n pigi -> Binding_Class n (Pr.pigiPrToEvidTy pigi) (Pr.pigiKi pigi) (Pr.pigiRuleTy pigi) (Pr.pigiRuleNmEvid pigi)) ig
    Seq.:++: Seq.fromList [Binding_CHRStore $ chrStoreElems chrStore]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ForceEval
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[99 hs
instance ForceEval HIInfo
%%]



