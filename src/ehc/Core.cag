%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{EH}Core} import({%{EH}Base.Builtin},{%{EH}Base.Common},{%{EH}Base.Opts},Data.List,UU.Pretty) export(CodeAGItf(..), CModule(..), CExpr(..), CBind(..), CBindL, CBindCateg(..), CPatRest(..)) 
%%]

%%[8 hs export(CAlt(..), CAltL, CPat(..), CPatL, CPatBind(..), CPatBindL) 
%%]

%%[8 hs export(RPatNm(..))
%%]

%%[8 hs export(mkCExprLet,mkCExprLetRec,mkCExprLam,mkCExprApp)
%%]

%%[8 hs export(mkCExprStrictIn)
%%]

%%[8 hs import(qualified Data.Map as Map,qualified Data.Set as Set,{%{EH}Ty}) export(FvS,FvSMp,cLevOuter,LevMp,fvLev,fvsLev,levMpAdd)
%%]

%%[8 hs export(mkCExprAddInt)
%%]

%%[8 hs export(mkCMod)
%%]

%%[8 hs export(CaseFailSubst)
%%]

%%[9 hs export(Coe(..), mkCoe, coeId, coeIsId, mkAppCoe, mkLamCoe, mkLetRecCoe)
%%]

%%[9 hs import(Data.Maybe) export(CxBindLMap(..), emptyCxBindLMap, mkCxBindLForPoiL, mkCxBindLForPoiL', plusCxBM, cxbmDpdPoiS, cxbmIntroPoiL)
%%]

%%[9 hs export(cbindLNub)
%%]

%%[9 hs export(mkCExprPrHole)
%%]

%%[12 hs export(cModMerge)
%%]

%%[8 import({Core/AbsSyn})
DERIVING *     : Show, Eq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax for encoding case+pattern rewrite info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(RAlt(..),RPat(..),RPatConBind(..),RPatBind(..))
data RAlt
  = RAlt_Alt			{ rcaPats :: [RPat], raaExpr :: CExpr }

data RPat
  = RPat_Var			{ rcpPNm :: RPatNm }
  | RPat_Con			{ rcpPNm :: RPatNm, rcpTag :: CTag, rcpBinds :: RPatConBind }
  | RPat_Int			{ rcpPNm :: RPatNm, rcpInt :: Int }
  | RPat_Char			{ rcpPNm :: RPatNm, rcpChar :: Char }
  | RPat_Irrefutable	{ rcpPNm :: RPatNm, rcpCBindL :: [CBind] }
%%[[99
  | RPat_BoolExpr		{ rcpPNm :: RPatNm, rcpExpr :: CExpr }
%%]]

data RPatConBind
  = RPatConBind_One		{ rpcbRest :: CPatRest, rpcbBinds :: [RPatBind] }
  | RPatConBind_Many	{ rpcbConBinds :: [RPatConBind] }

data RPatBind
  = RPatBind_Bind		{ rpbLbl :: HsName, rpbOffset :: CExpr, rpbNm :: HsName, rpbPat :: RPat }
%%]

%%[8 hs export(rcaPat,raltLPatNms)
rcaPat :: RAlt -> RPat
rcaPat = head . rcaPats

raltLPatNms :: [RAlt] -> [RPatNm]
raltLPatNms = nub . sort . map (rcpPNm . rcaPat)
%%]

%%[8 hs export(rcaTag)
rpatConTag :: RPat -> CTag
rpatConTag (RPat_Int  _ _   )  = ctagInt
rpatConTag (RPat_Char _ _   )  = ctagChar
rpatConTag p                   = rcpTag p

rcaTag :: RAlt -> CTag
rcaTag = rpatConTag . head . rcaPats
%%]

%%[8 hs export(raltIsVar,raltIsConst)
raltIsVar :: RAlt -> Bool
raltIsVar (RAlt_Alt (RPat_Var _ : _) _)  = True
raltIsVar _                              = False

raltIsConst :: RAlt -> Bool
raltIsConst (RAlt_Alt (p : _) _)
  = c p
  where c (RPat_Int   _ _) = True
        c (RPat_Char  _ _) = True
        c _                = False
%%]

%%[8 hs export(raltIsConMany)
raltIsConMany :: RAlt -> Bool
raltIsConMany (RAlt_Alt (RPat_Con _ _ (RPatConBind_Many _) : _) _) = True
raltIsConMany _                                                    = False
%%]

%%[8 hs export(raltIsIrrefutable)
raltIsIrrefutable :: RAlt -> Bool
raltIsIrrefutable (RAlt_Alt (RPat_Irrefutable _ _ : _) _) = True
raltIsIrrefutable _                                       = False
%%]

%%[99 hs export(raltIsBoolExpr)
raltIsBoolExpr :: RAlt -> Bool
raltIsBoolExpr (RAlt_Alt (RPat_BoolExpr _ _ : _) _)  = True
raltIsBoolExpr _                                     = False
%%]

%%[8 hs export(rpatConBindUnFlatten)
rpatConBindUnFlatten :: [RPatConBind] -> RPatConBind
rpatConBindUnFlatten [b] = b
rpatConBindUnFlatten bs  = RPatConBind_Many bs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Conversion from Rxxx -> Cxxx
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(rpat2CPat,rpatConBind2CPatConBind,rpatBind2CPatBind)
rpat2CPat :: RPat -> CPat
rpat2CPat p
  = case p of
      RPat_Var      n       -> CPat_Var (rpatNmNm n)
      RPat_Con      n t b   -> CPat_Con (rpatNmNm n) t r bs
                            where (r,bs) = rpatConBind2CPatConBind b
      RPat_Int      n v     -> CPat_Int (rpatNmNm n) v
      RPat_Char     n v     -> CPat_Char (rpatNmNm n) v
%%[[99
      RPat_BoolExpr n v     -> CPat_BoolExpr (rpatNmNm n) v
%%]]

rpatConBind2CPatConBind :: RPatConBind -> (CPatRest,[CPatBind])
rpatConBind2CPatConBind b
  = case b of
  	  RPatConBind_One 	r bs 	-> (r,map rpatBind2CPatBind bs)
  	  RPatConBind_Many 	bs 		-> head (map rpatConBind2CPatConBind bs)

rpatBind2CPatBind :: RPatBind -> CPatBind
rpatBind2CPatBind (RPatBind_Bind l o n p) = CPatBind_Bind l o n (rpat2CPat p)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tuple operator info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(cTupLbl)
cTupLbl :: CExpr -> HsName
cTupLbl e
  =  case e of
         CExpr_TupIns _ _ l _ _ -> l
         CExpr_TupUpd _ _ l _ _ -> l
         CExpr_TupDel _ _ l _   -> l
%%]

%%[8 hs export(cTupTag)
cTupTag :: CExpr -> CTag
cTupTag e
  =  case e of
         CExpr_TupIns _ t _ _ _ -> t
         CExpr_TupUpd _ t _ _ _ -> t
         CExpr_TupDel _ t _ _   -> t
%%]

%%[8 hs export(cTupOff)
cTupOff :: CExpr -> CExpr
cTupOff e
  =  case e of
         CExpr_TupIns _ _ _ o _ -> o
         CExpr_TupUpd _ _ _ o _ -> o
         CExpr_TupDel _ _ _ o   -> o
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tag
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Binding category
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data CBindCateg = CBindRec | CBindStrict | CBindPlain | CBindFFI deriving (Show,Eq)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Remove duplicate bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
cbindLNub :: CBindL -> CBindL
cbindLNub = nubBy (\(CBind_Bind n1 _) (CBind_Bind n2 _) -> n1 == n2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Bindings using a pred
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
newtype CxBindLMap = CxBindLMap (Map.Map PredOccId [(CBind,PredOccId,Set.Set PredOccId)])

emptyCxBindLMap = CxBindLMap Map.empty

infixr `plusCxBM`

plusCxBM :: CxBindLMap -> CxBindLMap -> CxBindLMap
plusCxBM (CxBindLMap m1) (CxBindLMap m2) = CxBindLMap (m2 `Map.union` m1)

cxbmDpdPoiS :: CxBindLMap -> PredOccId -> Set.Set PredOccId
cxbmDpdPoiS (CxBindLMap m) poi = maybe Set.empty (Set.unions . map thd) (Map.lookup poi m) `Set.union` Set.singleton poi

cxbmIntroPoiL :: CxBindLMap -> [PredOccId]
cxbmIntroPoiL (CxBindLMap m) = nub [ i | l <- Map.elems m, (_,i,_) <- l ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Bindings using a pred
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
mkCxBindLForPoiL' :: (PredOccId -> Bool) -> CxBindLMap -> [PredOccId] -> CBindL
mkCxBindLForPoiL' isAvailPoi (CxBindLMap m) inclPoiL
  = cbindLNub [ b | i <- inclPoiL, bs <- maybeToList (Map.lookup i m), (b,_,dpd) <- bs, all isAvailPoi . Set.toList $ dpd ]
%%]

%%[9 hs
mkCxBindLForPoiL :: Set.Set PredOccId -> CxBindLMap -> [PredOccId] -> CBindL
mkCxBindLForPoiL availPoiS = mkCxBindLForPoiL' (`Set.member` availPoiS)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name of a pattern var/con
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
data RPatNm
  = RPatNmOrig {rpatNmNm :: HsName}
  | RPatNmUniq {rpatNmNm :: HsName}
  deriving (Ord,Eq)

instance Show RPatNm where
  show pnm = show (rpatNmNm pnm)
%%]

cpatNmEither :: (HsName -> a) -> (HsName -> a) -> RPatNm -> a
cpatNmEither o u pnm = case pnm of {RPatNmOrig n -> o n; RPatNmUniq n -> u n}

cpatNmNone :: RPatNm
cpatNmNone = RPatNmOrig hsnWild

ppRPatNmNm :: (HsName -> PP_Doc) -> RPatNm -> PP_Doc
ppRPatNmNm ppNm = cpatNmEither (ppNm) (\n -> "uniq" >#< ppNm n)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
mkCExprLet :: CBindCateg -> CBindL -> CExpr -> CExpr
mkCExprLet c bs e = if null bs then e else CExpr_Let c bs e

mkCExprLetRec :: CBindL -> CExpr -> CExpr
mkCExprLetRec = mkCExprLet CBindRec

mkCExprLam :: [HsName] -> CExpr -> CExpr
mkCExprLam as e = foldr (\n e -> CExpr_Lam n e) e as

mkCExprApp :: CExpr -> [CExpr] -> CExpr
mkCExprApp f as = foldl (\f a -> CExpr_App f a) f as

mkCExprStrictIn :: HsName -> CExpr -> (CExpr -> CExpr) -> CExpr
mkCExprStrictIn nm e mkC = CExpr_Let CBindStrict [CBind_Bind nm e] (mkC (CExpr_Var nm))
%%]

%%[8 hs
mkCExprAddInt :: CExpr -> Int -> CExpr
mkCExprAddInt e i = if i == 0 then e else CExpr_Var hsnPrimAddInt `mkCExprApp` [e,CExpr_Int i]
%%]

%%[8 hs
mkCMod :: CExpr -> CModule
mkCMod e = CModule_Mod (HNm "") e []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Inspection/deconstruction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(cexprVar)
cexprVar :: CExpr -> HsName
cexprVar (CExpr_Var n) = n
cexprVar _             = hsnUnknown
%%]

%%[8 hs export(cexprTupFld)
cexprTupFld :: CExpr -> CExpr
cexprTupFld (CExpr_TupIns _ _ _ _ e) = e
cexprTupFld _                        = CExpr_Var hsnUnknown
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% String
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(cstring)
cstring :: EHCOpts -> String -> CExpr
cstring opts m = CExpr_Var (ehbnFromPackedString $ ehcOptBuiltinNames opts) `mkCExprApp` [CExpr_String m]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Error
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(cerror,cundefined)
cerror :: EHCOpts -> String -> CExpr
cerror opts m = CExpr_Var (ehbnError $ ehcOptBuiltinNames opts) `mkCExprApp` [cstring opts m]

cundefined :: EHCOpts -> CExpr
cundefined opts = CExpr_Var (ehbnUndefined $ ehcOptBuiltinNames opts)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Misc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs export(caltTag) 
cpatConTag :: CPat -> CTag
cpatConTag (CPat_Con  _ t _ _)  = t
cpatConTag (CPat_Int  _ _    )  = ctagInt
cpatConTag (CPat_Char _ _    )  = ctagChar

caltTag :: CAlt -> CTag
caltTag (CAlt_Alt p _) = cpatConTag p
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Support for transformations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type FvS = HsNameS
type FvSMp = Map.Map HsName FvS
%%]

%%[8 hs
cLevOuter = 0
%%]

%%[8 hs
type LevMp = Map.Map HsName Int

fvLev :: LevMp -> HsName -> Int
fvLev lm n = Map.findWithDefault cLevOuter n lm

fvsLev :: LevMp -> FvS -> Int
fvsLev lm fvs = foldr (\n l -> fvLev lm n `max` l) cLevOuter . Set.toList $ fvs

levMpAdd :: LevMp -> FvSMp -> LevMp
levMpAdd lm fvm = Map.map (fvsLev lm) fvm `Map.union` lm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Hole construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
mkCExprPrHole :: PredOccId -> CExpr
mkCExprPrHole = CExpr_Hole . poiId
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Coercion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9 hs
data Coe = CoeId | Coe (CExpr -> CExpr) | CoeC CExpr | CoeImplApp ImplsVarId | CoeImplLam ImplsVarId

coeId :: Coe
coeId = CoeC CExpr_CoeArg

coeIsId :: Coe -> Bool
coeIsId (CoeC CExpr_CoeArg) = True
coeIsId _                   = False

mkCoe :: (CExpr -> CExpr) -> Coe
mkCoe = Coe

mkAppCoe :: [CExpr] -> Coe
mkAppCoe eL = mkCoe (\e -> e `mkCExprApp` eL)

mkLamCoe :: HsName -> Coe
mkLamCoe n = mkCoe (\e -> n `CExpr_Lam` e)

mkLetRecCoe :: CBindL -> Coe
mkLetRecCoe b = mkCoe (\e -> mkCExprLet CBindRec b e)

instance Show Coe where
  show _ = "COE"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module merge
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[12 hs
cModMerge :: [CModule] -> CModule
cModMerge mL
  = foldr1 cmb mL
  where get (CExpr_Let c b e) = CExpr_Let c b . get e
        get  _                = id
        cmb (CModule_Mod m1 e1 t1) (CModule_Mod m2 e2 t2)
          = CModule_Mod m2 (get e1 e2) (t1++t2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Subst to replace CaseAltFail
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type CaseFailSubst = Map.Map UID CExpr
%%]

