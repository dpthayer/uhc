%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell interface to AG generated code for compiler
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs import(Data.Char,Data.List as List,UU.Pretty,{%{BASE}Common},{%{EHC}Opts}, EHTy,{%{EHC}Gam},EHError,EHErrorPretty,{%{EHC}TyFitsIn},{%{EHC}TyFitsInCommon},EHTyPretty,EHAbsSyn)
%%]

%%[2 hs import({%{EHC}Cnstr},{%{EHC}Substitutable},Data.Maybe)
%%]

%%[3 hs import(EHTyQuantify,EHTyInstantiate)
%%]

%%[4 hs import({%{BASE}Debug})
%%]

%%[4_2 hs import(qualified Data.Set as Set,{%{EHC}GamUtils},EHTyElimAlts,EHTyFreshVar)
%%]

%%[8 hs import(EH.Util.Utils(groupSortOn))
%%]

%%[8 hs import(qualified Data.Map as Map,EHCore,{%{EHC}CoreUtils},EHCorePretty)
%%]

%%[9 hs import(qualified Data.Set as Set,{%{EHC}Pred},EHCoreSubst)
%%]

%%[11 hs import(EHTyElimEqual,{%{EHC}GamUtils})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Import of all separate aspects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 import(EHAbsSynAG,EHPretty,EHPrettyAST,EHRulerRules,EHInfer,EHInferExpr,EHInferPatExpr,EHInferTyExpr,EHExtraChecks,EHGatherError)
WRAPPER AGItf
%%]

%%[2 import(EHUniq)
%%]

%%[5 import(EHInferCaseExpr,EHInferData)
%%]

%%[6 import(EHInferKiExpr)
%%]

%%[8 import(EHGenCore)
%%]

%%[9 import(EHResolvePred,EHInferClass)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
ATTR AllNT AGItf [ opts: EHCOpts | | ]
%%]

%%[8
ATTR AGItf [ baseName: String | | ]
%%]
