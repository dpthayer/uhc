%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

Normalizes a polarity type by:
* Removing double negations
* Remove negation on basic polarities

%%[17 hs module {%{EH}Ty.Trf.PolEval} import({%{EH}Base.Common},{%{EH}Ty})
%%]

%%[17.WRAPPER ag import({Ty/AbsSyn})
WRAPPER TyAGItf
%%]

%%[17 hs export(polEval)

polEval :: Ty -> Ty
polEval ty
  = ty'
  where t = wrap_TyAGItf
              (sem_TyAGItf (TyAGItf_AGItf ty))
              (Inh_TyAGItf {})
        (TyAGItf_AGItf ty') = result_Syn_TyAGItf t

%%]

%%[17 ag

ATTR TyAGItf AllTyAndFlds [ | | result : SELF ]

SEM Ty
  | App
      lhs.result = evaluate @loc.result

%%]

%%[17 hs

evaluate :: Ty -> Ty
evaluate ty@(Ty_App (Ty_Con nm') ty1)
  | nm' == hsnPolNegation
    = case ty1 of
        Ty_App (Ty_Con nm) ty2 
          | nm == hsnPolNegation   -> ty2

        Ty_Con nm
          | nm == hsnCovariant     -> mkPolContravariant
          | nm == hsnContravariant -> mkPolCovariant
          | nm == hsnInvariant     -> mkPolInvariant

        _ -> ty
evaluate ty = ty

%%]

