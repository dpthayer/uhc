%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Modules: import/export relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Import
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[12
ATTR Import [ | | modEntSpec: ModEntSpec ]

SEM Import
    | Variable
        lhs             .   modEntSpec  =   ModEntSpec @name Nothing
    | TypeOrClass
        lhs             .   modEntSpec  =   case @names of
                                              Just ns -> ModEntSpec @name (Just (ModEntSubs ns))
                                              Nothing -> ModEntSpec @name Nothing
    | TypeOrClassComplete
        lhs             .   modEntSpec  =   ModEntSpec @name (Just ModEntSubAll)
%%]

%%[12
ATTR Imports AllImportSpecification [ | | modEntSpecL: {[ModEntSpec]} ]

SEM Imports
    | Cons
        lhs             .   modEntSpecL =   @hd.modEntSpec : @tl.modEntSpecL
    | Nil
        lhs             .   modEntSpecL =   []

SEM MaybeImportSpecification
    | Nothing
        lhs             .   modEntSpecL =   []
%%]

%%[12
ATTR AllImportSpecification [ | | isHiding: Bool ]

SEM ImportSpecification
    | Import
        lhs             .   isHiding    =   @hiding

SEM MaybeImportSpecification
    | Nothing
        lhs             .   isHiding    =   True
%%]

%%[12
ATTR AllImportDeclaration Body [ | | modImpL USE {++} {[]}: {[ModImp]} ]

SEM ImportDeclaration
    | Import
        lhs             .   modImpL     =   let as = maybe @name id @asname
                                            in  [ModImp @qualified @name as @importspecification.isHiding @importspecification.modEntSpecL]
    | * - Import
        lhs             .   modImpL     =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Export
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[12
ATTR Export [ | | modExp: ModExp ]

SEM Export
    | Variable
        lhs             .   modExp      =   ModExpEnt (ModEntSpec @name Nothing)
    | TypeOrClass
        lhs             .   modExp      =   case @names of
                                              Just ns -> ModExpEnt (ModEntSpec @name (Just (ModEntSubs ns)))
                                              Nothing -> ModExpEnt (ModEntSpec @name Nothing)
    | TypeOrClassComplete
        lhs             .   modExp      =   ModExpEnt (ModEntSpec @name (Just ModEntSubAll))
    | Module
        lhs             .   modExp      =   ModExpMod @name
%%]

%%[12
ATTR Exports [ | | modExpL: {[ModExp]} ]

SEM Exports
    | Cons
        lhs             .   modExpL     =   @hd.modExp : @tl.modExpL
    | Nil
        lhs             .   modExpL     =   []
%%]


%%[12
ATTR MaybeExports [ | | modExpsMb: {Maybe [ModExp]} ]

SEM MaybeExports
    | Just
        lhs             .   modExpsMb   =   Just @just.modExpL
    | Nothing
        lhs             .   modExpsMb   =   Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[12
ATTR Declaration Declarations Body [ | | modDefsRel USE {`Rel.union`} {Rel.empty}: ModEntRel ]

SEM Declaration
    | Data Newtype
        lhs             .   modDefsRel  =   Rel.singleton
                                              @simpletype.name
                                              (ModEntData @simpletype.name
                                                          (Set.fromList $ map ModEntVal $ @constructors.conNames))

SEM Body
    | Body
        lhs             .   modDefsRel  =   @declarations.modDefsRel
                                            `Rel.union` 
                                            (Rel.fromList [ (n,ModEntVal n) | (n,_) <- idDefOccGamByKind IdOcc_Val @declarations.idOccDefGam ])
SEM Declaration
    | Class
        lhs             .   modDefsRel  =   Rel.singleton
                                              @simpletype.name
                                              (ModEntClass @simpletype.name
                                                           (Set.fromList [ ModEntVal n | (n,_) <- idDefOccGamByKind IdOcc_Val @where.idOccDefGam ]))
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[12
ATTR Module AGItf [ | | mod: Mod ]

SEM Module
    | Module
        lhs             .   mod         =   Mod (maybe (mkHNm "Main") id @name)
                                                @exports.modExpsMb @body.modImpL @body.modDefsRel
%%]


