-------------------------------------------------------------------------
-- Expr
-------------------------------------------------------------------------

scheme expr "Expr" =
  view E =
    holes [ node e: Expr, valGam: ValGam, tyGam: TyGam, kiGam: KiGam | ty: Ty | ]
    judgespec kiGam ; tyGam ; valGam :- e : ty
    judgeuse tex valGam :-.."e" e : ty
    explain (Within environment |valGam| , expression |e| has type |ty| .)
    explain ty = (Type of expression)
    explain e = (Expression)
    explain valGam = (Environment | (ident :-> ty)..._ | for value identifiers)
  view K =
    holes [ knTy: Ty | | retain ty: Ty ]
    judgespec kiGam ; tyGam; valGam; knTy :- e : ty
    judgeuse tex valGam; knTy :-.."e" e : ty
    explain (Within environment |valGam| , expecting the type of expression |e| to be |knTy| , |e| has type |ty| .)
    explain knTy = ("Expected/known" type of expression)
    explain tyGam = (Environment | (ident :-> ty)..._ | for type identifiers, cannot be modified (hence treated as a global constant in "\\ruleRef{e.ann}"))
  view C =
    holes [ | thread tyCnstr: Cnstr | ]
    judgespec kiGam ; tyGam ; valGam ; tyCnstr.inh ; knTy :- e : ty ~> tyCnstr.syn
    judgeuse tex valGam ; tyCnstr.inh ; knTy :-.."e" e : ty ~> tyCnstr.syn
    explain (Within environment |valGam| , expecting the type of expression |e| to be |tyCnstr.inh knTy| , |e| has type |ty| , under constraints |tyCnstr.syn| .)
    explain tyCnstr.inh = (Already known constraints)
    explain tyCnstr.syn = (|tyCnstr.inh| + new constraints)
  view I1 =
    holes [ fiopt: FIOpts | | ]
    judgespec fiopt ; kiGam ; tyGam ; valGam ; tyCnstr.inh ; knTy :- e : ty ~> tyCnstr.syn
    judgeuse tex fiopt ; valGam ; tyCnstr.inh ; knTy :-.."e" e : ty ~> tyCnstr.syn
    explain (Within environment |valGam| and context |fiopt| , expecting the type of expression |e| to be |tyCnstr.inh knTy| , |e| has type |ty| , under constraints |tyCnstr.syn| .)
    explain fiopt = (|fitsIn| options, additional contextual information for | <= |)
  view I2 =
    holes [ | thread ityCnstr: ICnstr | retain ity: Ty ]
    judgespec fiopt ; kiGam ; tyGam ; valGam ; ityCnstr.inh ; tyCnstr.inh ; knTy :- e : ity ; ty ~> ityCnstr.syn ; tyCnstr.syn
    judgeuse tex fiopt ; valGam ; ityCnstr.inh ; tyCnstr.inh ; knTy :-.."e" e : ity ; ty ~> ityCnstr.syn ; tyCnstr.syn
    explain (Within environment |valGam| and context |fiopt| , expecting the types of expression |e| to be |ityCnstr.inh knTy| (and |tyCnstr.inh knTy|)
            , |e| has type |ity| (and |ty|) , under constraints |ityCnstr.syn| (and |tyCnstr.syn|) .
            )
    explain ityCnstr.inh = (Already known constraints (for quantifier propagation))
    explain ityCnstr.syn = (|ityCnstr.inh| + new constraints (for quantifier propagation))
    explain ity = (Type (with type alternatives |talt|) of expression (for quantifier propagation))
  view CG =
    holes [ | | retain translExpr: TranslExpr ]
    judgespec fiopt ; kiGam ; tyGam ; valGam ; tyCnstr.inh ; knTy :- e : ty ~> tyCnstr.syn ; translExpr
    judgeuse tex fiopt ; valGam ; tyCnstr.inh ; knTy :-.."e" e : ty ~> tyCnstr.syn ; translExpr
    explain translExpr = (Translated expression)


-------------------------------------------------------------------------
-- Declaration
-------------------------------------------------------------------------

scheme decl "Decl" =
  view E =
    holes [ kiGam: KiGam, tyGam: TyGam, valGam: ValGam, node d: Decl | | gathTySigGam: ValGam ]
    judgespec kiGam ; tyGam ; valGam :-.."d" d : gathTySigGam
    judgeuse tex valGam :-.."d" d : gathTySigGam
    explain (Within environment |valGam| , declaration |d| has type signature bindings |gathTySigGam| .)
    explain valGam = (Environment with known bindings)
    explain gathTySigGam = (Environment with type signature bindings)
    explain d = (Declaration)
  view K =
    holes [ tySigGam: ValGam | thread patValGam: ValGam | ]
    judgespec tySigGam ; patValGam.inh ; kiGam ; tyGam ; valGam :- d : gathTySigGam ; patValGam.syn
    judgeuse tex tySigGam ; patValGam.inh ; valGam :-.."d" d : gathTySigGam ; patValGam.syn
    explain (Declaration |d| has explicit type bindings |gathTySigGam| ,
             within explicit bindings |tySigGam| and implicit type bindings |patValGam.inh| ,
             and type checks within |valGam| ,
             yielding additional bindings |patValGam.syn| .
            )
    explain gathTySigGam = (Environment with new type signature bindings)
    explain tySigGam = (Collected |gathTySigGam| , used by patterns to extract bindings for pattern variables)
    explain patValGam.inh = ("Known/gathered" pattern variable bindings)
    explain patValGam.syn = (|patValGam.inh| + new bindings)
    explain tyGam = (Environment | (ident :-> ty)..._ | for type identifiers, cannot be modified (hence treated as a global constant in "\\ruleRef{e.ann}"))
  view C =
    holes [ | thread tyCnstr: Cnstr, thread patTyCnstr: Cnstr | ]
    judgespec tySigGam ; patValGam.inh ; kiGam ; tyGam ; valGam ; patTyCnstr.inh ; tyCnstr.inh :- d : gathTySigGam ; patValGam.syn ~> patTyCnstr.syn ; tyCnstr.syn
    judgeuse tex tySigGam ; patValGam.inh ; valGam ; patTyCnstr.inh ; tyCnstr.inh :-.."d" d : gathTySigGam ; patValGam.syn ~> patTyCnstr.syn ; tyCnstr.syn
    explain (Declaration |d| has explicit type bindings |gathTySigGam| ,
             within explicit bindings |tySigGam| and implicit type bindings |patTyCnstr.inh patValGam.inh| ,
             and type checks within |tyCnstr.inh valGam| ,
             yielding additional bindings |patValGam.syn| ,
             under constraints |patTyCnstr.syn| (for |patValGam.syn|) and
             |tyCnstr.syn| (for |valGam|).
            )
    explain patTyCnstr.inh = ("Known/gathered" constraints during type inference of patterns (i.e. use of type signatures and pattern structure))
    explain patTyCnstr.syn = (|patTyCnstr.inh| + new constraints)
    explain tyCnstr.inh = ("Known/gathered" constraints during type inference of expressions bound to patterns)
    explain tyCnstr.syn = (|tyCnstr.inh| + new constraints)
  view I2 =
    holes [ | thread ityCnstr: ICnstr, thread tySigTyCnstr: Cnstr | ]
    judgespec tySigGam ; patValGam.inh ; kiGam ; tyGam ; valGam ; tySigTyCnstr.inh ; patTyCnstr.inh ; ityCnstr.inh ; tyCnstr.inh :- d : gathTySigGam ; patValGam.syn ~> tySigTyCnstr.syn ; patTyCnstr.syn ; ityCnstr.syn ; tyCnstr.syn
    judgeuse tex tySigGam ; patValGam.inh ; valGam ; tySigTyCnstr.inh ; patTyCnstr.inh ; ityCnstr.inh ; tyCnstr.inh :-.."d" d : gathTySigGam ; patValGam.syn ~> tySigTyCnstr.syn ; patTyCnstr.syn ; ityCnstr.syn ; tyCnstr.syn
    explain tySigTyCnstr.inh = (Type signature information represented as constraint for binding to type variable in |gathTySigGam|)
    explain tySigTyCnstr.syn = (|tySigTyCnstr.inh| + new constraints)
    explain ityCnstr.inh = ("Known/gathered" constraints during quantifier propagation)
    explain ityCnstr.syn = (|ityCnstr.inh| + new constraints)
  view CG =
    holes [ | | translBind: TransDecl ]
    judgespec tySigGam ; patValGam.inh ; kiGam ; tyGam ; valGam ; patTyCnstr.inh ; tyCnstr.inh :- d : gathTySigGam ; patValGam.syn ~> patTyCnstr.syn ; tyCnstr.syn ; translBind
    judgeuse tex tySigGam ; patValGam.inh ; valGam ; patTyCnstr.inh ; tyCnstr.inh :-.."d" d : gathTySigGam ; patValGam.syn ~> patTyCnstr.syn ; tyCnstr.syn ; translBind



