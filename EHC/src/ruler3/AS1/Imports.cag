-------------------------------------------------------------------------
-- Imports of Ruler module
-------------------------------------------------------------------------

{
module AS1.Imports
  ( ImpModMp
  , as1Imports
  , as1JoinAGItfs
  )
  where

import qualified Data.Map as Map
import Common
import AbsSyn.AbsSyn1
}

-------------------------------------------------------------------------
-- Inclusion of split off parts
-------------------------------------------------------------------------

INCLUDE "AbsSyn/AbsSyn1AG.cag"
INCLUDE "AbsSyn/CommonAG.cag"
INCLUDE "Expr/AbsSynAG.cag"

-------------------------------------------------------------------------
-- Interfacing to AST
-------------------------------------------------------------------------

WRAPPER AGItf 

{
type ImpModMp = Map.Map Nm SPos

as1Imports :: AGItf -> ImpModMp
as1Imports r
  = (impModMp_Syn_AGItf r2)
  where r1 = sem_AGItf r
        r2 = wrap_AGItf r1
                (Inh_AGItf )

as1JoinAGItfs :: [AGItf] -> AGItf
as1JoinAGItfs ais = AGItf_AGItf $ concat $ [ ds | (AGItf_AGItf ds) <- ais ]
}

-------------------------------------------------------------------------
-- Imports
-------------------------------------------------------------------------

ATTR AllDecl AGItf [ | | impModMp USE {`Map.union`} {Map.empty}: {ImpModMp} ]

SEM Decl
  | Include         lhs     .   impModMp    =   Map.singleton @nm @pos

