-------------------------------------------------------------------------
-- Haskell interface to Ruler AST pass 2
-------------------------------------------------------------------------

{
module AbsSyn.AbsSyn2
  ( module Expr.Expr
  , module Ty.Ty
  , module ARule.ARule
  , module ViewSel.ViewSel

  , AGItf(..)
  , Decl(..), Decls
  , RsVwDecl(..), RsVwDecls
  , AttrAGDecl(..)
  , DataAGDecl(..)
  , DataAGAlt(..), DataAGAlts
  , DataAGFld(..), DataAGFlds
  , VwDecl(..), VwDecls
  , RlDecl(..), RlDecls
  , Jd(..), Jds
  , JdAt(..), JdAts
  
  , wrapInChunk
  )
  where

import qualified Data.Set as Set
import Opts
import Common
import Expr.Expr
import Ty.Ty
import ARule.ARule
import ViewSel.ViewSel
}

INCLUDE "AbsSyn/AbsSyn2AG.cag"
INCLUDE "AbsSyn/CommonAG.cag"

-------------------------------------------------------------------------
-- Optional wrap in chunk
-------------------------------------------------------------------------

{
wrapInChunk :: (Nm -> a->a) -> Opts -> Nm -> a -> a
wrapInChunk mk opts n
  = if optFragWrap opts
    then mk n
    else id
}