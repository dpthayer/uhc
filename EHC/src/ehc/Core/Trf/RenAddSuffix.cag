%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Simplify code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{EH}Core.Trf.RenAddSuffix} import(Data.Maybe,Data.Char,qualified Data.Map as Map,{%{EH}Base.Common},{%{EH}Core},{%{EH}Ty}) export(cmodTrfRenAddSuffix, CModule(..))
%%]

%%[8.WRAPPER ag import({Core/AbsSyn})
WRAPPER CodeAGItf
%%]

%%[99
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
cmodTrfRenAddSuffix :: String -> CModule -> CModule
cmodTrfRenAddSuffix newSuffix cmod
  =  let  t = wrap_CodeAGItf  (sem_CodeAGItf (CodeAGItf_AGItf cmod))
              (Inh_CodeAGItf newSuffix)
     in   cTrf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Suffix
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ suffix: {String} | | ]
ATTR CodeAGItf [ suffix: {String} | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module name used to uniqify globally over all modules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20
ATTR AllExpr [ moduleNm: HsName | | ]

SEM CModule
  | Mod         expr        .   moduleNm    =   @moduleNm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% alpha renaming so all identifiers are unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8

SEM CPat
  | *           loc  .  nm     =   @pnm
                loc  .  nm     :   {HsName}


SEM CExpr
  | Var         lhs  .  cTrf   =   CExpr_Var (addSuffix @nm @lhs.suffix)
  | Lam         lhs  .  cTrf   =   CExpr_Lam (addSuffix @arg @lhs.suffix) @argMeta.cTrf @body.cTrf
  | TupDel      lhs  .  cTrf   =   let nm' = addSuffix @nm @lhs.suffix
                                   in CExpr_TupDel @expr.cTrf @tag nm' @offset.cTrf
  | TupIns      lhs  .  cTrf   =   let nm' = addSuffix @nm @lhs.suffix
                                   in CExpr_TupIns @expr.cTrf @tag nm' @offset.cTrf @fldExpr.cTrf
  | TupUpd      lhs  .  cTrf   =   let nm' = addSuffix @nm @lhs.suffix
                                   in CExpr_TupUpd @expr.cTrf @tag nm' @offset.cTrf @fldExpr.cTrf

SEM CBind
  | Bind        lhs  .  cTrf   =   let nm' = addSuffix @nm @lhs.suffix
                                   in CBind_Bind nm' @bindMeta.cTrf @expr.cTrf
  | FFI         lhs  .  cTrf   =   let nm' = addSuffix @nm @lhs.suffix
                                   in CBind_FFI  @callconv @safety @impEnt nm' @ty
  | FFE         lhs  .  cTrf   =   let nm' = addSuffix @nm @lhs.suffix
                                   in CBind_FFE nm' @callconv @expEnt @expNm @ty

SEM CPatBind
  | Bind        lhs  .  cTrf   =   CPatBind_Bind @lbl @offset.cTrf (addSuffix @nm @lhs.suffix) @pat.cTrf

SEM CPat
  | Var         lhs  .  cTrf   =   CPat_Var (addSuffix @nm @lhs.suffix)
  | Con         lhs  .  cTrf   =   CPat_Con (addSuffix @nm @lhs.suffix) @tag @rest.cTrf @binds.cTrf
  | Int         lhs  .  cTrf   =   CPat_Int (addSuffix @nm @lhs.suffix) @int
  | Char        lhs  .  cTrf   =   CPat_Char (addSuffix @nm @lhs.suffix) @char

SEM CPatRest
  | Var         lhs  .  cTrf   =   CPatRest_Var (addSuffix @nm @lhs.suffix)

{

addSuffix = hsnSuffix

{-
addSuffix :: HsName -> String -> HsName
addSuffix (HNm s) suf = HNm $ s ++ suf 
addSuffix (HNmQ ns@(_:_)) suf
    = HNmQ $ repLast ns
      where repLast [s]    = [addSuffix s suf]
            repLast (s:ss) = s : repLast ss
addSuffix h _ = h
-}

}
%%]


