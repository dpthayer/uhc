%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Simplify code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{EH}Core.Trf.RenAddSuffix} import(Data.Maybe,Data.Char,qualified Data.Map as Map,{%{EH}Base.Common},{%{EH}Core},{%{EH}Ty}) export(cmodTrfRenAddSuffix, CModule(..))
%%]

%%[8.WRAPPER ag import({Core/AbsSyn})
WRAPPER CodeAGItf
%%]

%%[99
PRAGMA strictcase
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell itf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
cmodTrfRenAddSuffix :: String -> CModule -> CModule
cmodTrfRenAddSuffix newSuffix cmod
  =  let  t = wrap_CodeAGItf  (sem_CodeAGItf (CodeAGItf_AGItf cmod))
              (Inh_CodeAGItf newSuffix)
     in   cTrf_Syn_CodeAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Suffix
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ suffix: {String} | | ]
ATTR CodeAGItf [ suffix: {String} | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module name used to uniqify globally over all modules
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[20
ATTR AllExpr [ moduleNm: HsName | | ]

SEM CModule
  | Mod         expr        .   moduleNm    =   @moduleNm
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ | | cTrf: SELF ]
ATTR CodeAGItf [ | | cTrf: CModule ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% alpha renaming so all identifiers are unique
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs
type ARenMp = Map.Map HsName HsName
%%]


%%[8

SEM CPat
  | Var Con     loc         .   nm          =   @pnm
                loc         .   nm          :   {HsName}

%%]

%%[8
SEM CExpr
  | Var         lhs         .   cTrf        =   CExpr_Var (addSuffix @nm @lhs.suffix)
  | Lam         lhs         .   cTrf        =   CExpr_Lam (addSuffix @arg @lhs.suffix) @argMeta.cTrf @body.cTrf

SEM CBind
  | Bind        lhs         .   cTrf        =   CBind_Bind (addSuffix @nm @lhs.suffix) @bindMeta.cTrf @expr.cTrf

SEM CPatBind
  | Bind        lhs         .   cTrf        =   CPatBind_Bind @lbl @offset.cTrf (addSuffix @nm @lhs.suffix) @pat.cTrf

SEM CPat
  | Var         lhs         .   cTrf        =   CPat_Var (addSuffix @nm @lhs.suffix)
  | Con         lhs         .   cTrf        =   CPat_Con (addSuffix @nm @lhs.suffix) @tag @rest.cTrf @binds.cTrf

SEM CPatRest
  | Var         lhs         .   cTrf        =   CPatRest_Var (addSuffix @nm @lhs.suffix)

{

-- XXX is this right?
addSuffix :: HsName -> String -> HsName
addSuffix (HNm s) suf = HNm $ s ++ suf 
addSuffix (HNmQ ns@(_:_)) suf
    = HNmQ $ repLast ns
      where repLast [s]    = [addSuffix s suf]
            repLast (s:ss) = s : repLast ss
addSuffix h _ = h


}
%%]


