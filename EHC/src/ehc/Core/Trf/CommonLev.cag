%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Common AG for Core transformations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Copy/Self
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9
ATTR AllMeta [ | | self: SELF ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% CVarIntro's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
SEM CExpr
  | Lam         loc         .   cvi                 =   CVarIntro
                                                          { cviLev  = @lev
%%[[9
                                                          , cviMeta = @argMeta.self
%%]]
                                                          }

SEM CBind
  | Bind        loc         .   cvi                 =   emptyCVarIntro { cviLev  = @lhs.lev }
                            .   cviExpr             =   emptyCVarIntro { cviLev  = @expr.levOf }

SEM CAlt
  | Alt         loc         .   cvi                 =   emptyCVarIntro { cviLev  = @lev }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Level of id's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ cvarIntroMp: CVarIntroMp | | ]

SEM CodeAGItf
  | AGItf       module      .   cvarIntroMp =   Map.empty

SEM CExpr
  | Lam         body        .   cvarIntroMp =   Map.insert @arg @cvi @lhs.cvarIntroMp
  | Let         loc         .   maxBindLev  =   fvsLev @lhs.cvarIntroMp cLevModule @binds.fvS
                (loc.strLev,binds.cvarIntroMp)
                                            =   case @categ of
                                                    CBindStrict -> (const @lhs.lev,@lhs.cvarIntroMp)
                                                    CBindRec    -> ( const @maxBindLev
                                                                   , Map.map (\cvi -> cvi {cviLev = @maxBindLev}) @binds.cvarIntroExprMp
                                                                       `Map.union` @lhs.cvarIntroMp
                                                                   )
                                                    _           -> (id,@lhs.cvarIntroMp)
                body        .   cvarIntroMp =   Map.map (\cvi -> cvi {cviLev = @strLev $ cviLev cvi}) @binds.cvarIntroExprMp `Map.union` @lhs.cvarIntroMp

SEM CAlt
  | Alt         expr        .   cvarIntroMp =   Map.fromList (zip @pat.nmL (repeat @cvi)) `Map.union` @lhs.cvarIntroMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Intro level of id's
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ introCVarIntroMp: CVarIntroMp | | ]

SEM CodeAGItf
  | AGItf       module      .   introCVarIntroMp    =   Map.empty

SEM CExpr
  | Lam         body        .   introCVarIntroMp    =   Map.insert @arg @cvi @lhs.introCVarIntroMp
  | Let         loc         .   introCVarIntroMp    =   Map.map (\cvi -> cvi {cviLev = @lhs.lev}) @binds.bindsIntroCVarIntroMp `Map.union` @lhs.introCVarIntroMp

SEM CAlt
  | Alt         expr        .   introCVarIntroMp    =   Map.fromList (zip @pat.nmL (repeat @cvi)) `Map.union` @lhs.introCVarIntroMp
%%]

%%[8
ATTR AllBind [ | | bindsIntroCVarIntroMp USE {`Map.union`} {Map.empty}: CVarIntroMp ]

SEM CBind
  | Bind        lhs         .   bindsIntroCVarIntroMp
                                                    =   Map.singleton @nm @cvi
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Level of expr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR AllCodeNT [ | | levOf USE {`max`} {cLevModule}: Int ]

SEM CExpr
  | Var         lhs         .   levOf       =   fvLev @nm @lhs.cvarIntroMp
  | App         loc         .   levOf       =   @func.levOf `max` @arg.levOf
  | Case        loc         .   levOf       =   @expr.levOf `max` @alts.levOf `max` @dflt.levOf
  | TupDel      loc         .   levOf       =   @expr.levOf `max` @offset.levOf
  | TupIns TupUpd
                loc         .   levOf       =   @expr.levOf `max` @offset.levOf `max` @fldExpr.levOf
  | Lam         loc         .   levOf       =   fvsLev @lhs.cvarIntroMp cLevModule @body.fvS
  | Let         loc         .   levOf       =   fvsLev @lhs.cvarIntroMp cLevModule @fvS
%%[[20
  | String      loc         .   levOf       =   cLevIntern
%%]]

SEM CAlt
  | Alt         lhs         .   levOf       =   fvsLev @lhs.cvarIntroMp cLevModule @expr.fvS

ATTR AllBind [ | | cvarIntroExprMp USE {`Map.union`} {Map.empty}: CVarIntroMp ]

SEM CBind
  | Bind        lhs         .   cvarIntroExprMp
                                            =   Map.singleton @nm @cviExpr
%%]

