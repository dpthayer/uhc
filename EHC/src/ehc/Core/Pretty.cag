%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Core Pretty Printer
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}Core.Pretty} import(EH.Util.Pretty,{%{EH}Base.Builtin},{%{EH}Base.CfgPP},{%{EH}Opts.Base},{%{EH}Base.Common},{%{EH}Ty},{%{EH}Ty.Pretty},{%{EH}Core},{%{EH}Scanner.Common(coreScanOpts)}) export(ppCModule)
%%]

%%[(8 codegen) hs import({%{EH}AnaDomain.Pretty})
%%]
%%[(8 codegen) hs import({%{EH}LamInfo})
%%]

%%[(8 codegen) hs import(qualified Data.Map as Map,qualified Data.Set as Set,{%{EH}Ty.Pretty})
%%]

%%[(90 codegen) hs import({%{EH}Foreign.Pretty})
%%]

%%[(8 codegen).WRAPPER ag import({Core/AbsSyn})
WRAPPER
  CodeAGItf CExpr
%%[[9
  CMetas
%%]]
%%]

%%[(8 codegen) hs
ppCModule :: EHCOpts -> LamMp -> CModule -> PP_Doc
ppCModule opts lamMp cmod
  =  let  t = wrap_CodeAGItf (sem_CodeAGItf (CodeAGItf_AGItf cmod))
                             (Inh_CodeAGItf
                               { lamMp_Inh_CodeAGItf = lamMp
                               })
     in   (pp_Syn_CodeAGItf t)

ppCExpr :: CExpr -> PP_Doc
ppCExpr ce
  =  let  t = wrap_CExpr (sem_CExpr ce)
                         (Inh_CExpr
                            { varPPMp_Inh_CExpr = Map.empty
                            , lamMp_Inh_CExpr = Map.empty
                            })
     in   (pp_Syn_CExpr t)

instance PP CExpr where
  pp ce = ppCExpr ce
%%]

%%[(8 codegen) hs
ppCNm :: HsName -> PP_Doc
-- ppCNm = cfgppHsName CfgPP_Core
ppCNm = ppHsnNonAlpha coreScanOpts'
  where coreScanOpts' = coreScanOpts emptyEHCOpts

ppMbCNm :: Maybe HsName -> PP_Doc
ppMbCNm = maybe (ppCNm (hsnFromString "_")) ppCNm

ppManyCNm :: [HsName] -> PP_Doc
ppManyCNm  =  ppListSep "" "" " " . map ppCNm

%%]

%%[(9 codegen) hs
ppTrack :: Track -> PP_Doc
ppTrack t = text (show t)

ppHole :: UID -> PP_Doc
ppHole i = "<" >|< pp i >|< ">"
%%]

%%[(9 codegen) hs
ppOptCMetas :: CMetas -> PP_Doc
ppOptCMetas x
  =  let  t = wrap_CMetas (sem_CMetas x)
                          (Inh_CMetas
                             { lamMp_Inh_CMetas = Map.empty
                             })
     in   (pp_Syn_CMetas t)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Debugging only
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 codegen) hs export(ppCBindL)
ppCBindL :: CBindL -> PP_Doc
ppCBindL = ppAssocL . map (\(CBind_Bind n [CBindAspect_Bind m v]) -> (n,v >|< ppOptCMetas m))
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs

ppSignedInt :: Int -> PP_Doc
ppSignedInt n = " " >#< show n

ppDef :: (PP a, PP b) => a -> b -> PP_Doc
ppDef n v   = n >-< indent 2 v

ppDef' :: (PP a, PP b) => a -> b -> PP_Doc
ppDef' n v   = ppOr (n >-< indent 2 v) (n >#< v)
-- ppDef' n v   = ppDef n v

ppOr :: (PP a, PP b) => a -> b -> PP_Doc
-- ppOr a b   = join (a >//< b)
ppOr a b   = pp a

ppOr' :: (PP a, PP b) => a -> b -> PP_Doc
-- ppOr' a b   = ppOr a b
ppOr' a b   = pp a

ppLit :: String -> String -> PP_Doc
ppLit kind val = "#" >|< kind >|< pp (show val)

ppTag :: CTag -> PP_Doc
ppTag t = ppCTag' CfgPP_Core t

ppCurlyList :: (a -> PP_Doc) -> [a] -> PP_Doc
ppCurlyList pL xs = ppListSep "{ " " }" ", " $ map pL xs

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR CodeAGItf AllCodeNT [ lamMp: LamMp | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printed code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR CodeAGItf AllCodeNT [ | | pp USE {>-<} {empty} : PP_Doc ]
ATTR CPatFldL CBindL CAltL CBindAspectL CBindAnnL [ | | ppL: {[PP_Doc]} ]
ATTR CExpr [ | | lamBodyPP: PP_Doc  lamArgPPL: {[PP_Doc]} ]
ATTR CExpr [ | | appFunPP : PP_Doc  appArgPPL: {[PP_Doc]} ]

SEM CModule
  | Mod         lhs         .   pp          =   "module" >#< ppCNm @moduleNm >#< "=" >-< @expr.pp >-< "-- data type tag map:" >-< ppCTagsMp CfgPP_Core @ctagsMp

SEM CExpr
  | Int         loc         .   pp          =   ppLit "Int"    (show @int)
  | Char        loc         .   pp          =   ppLit "Char"   [@char]
  | String      loc         .   pp          =   ppLit "String" @str
%%[[97
  | Integer     loc         .   pp          =   ppLit "Integer" (show @integer)
%%]
  | Var         loc         .   pp          =   ppACoreBindRef ppCNm @ref
  | App         loc         .   pp          =   let args = reverse $ map ppParens $ @appArgPPL
                                                    fun  = ppParens @appFunPP
                                                in  ppDef fun (vlist args)
  | Let         loc         .   ppCateg     =   case @categ of
                                                  CBindCateg_Rec     -> pp " rec"
                                                  CBindCateg_Strict  -> pp " !"
                                                  CBindCateg_FFI     -> pp " foreign"
%%[[90
                                                  CBindCateg_FFE     -> pp " foreignexport"
%%]]
                                                  _                  -> empty
                            .   pp          =   ppDef ("let" >|< @ppCateg) (ppCurlysSemisBlock @binds.ppL) >#< "in" >-< @body.pp
  | Lam         loc         .   pp          =   ppDef ("\\" >|< ppSpaces @lamArgPPL >#< "->") (@lamBodyPP)
  | Case        loc         .   pp          =   "case" >#< @expr.pp >#< "of"
                                                >-< indent 1 (ppCurlysSemisBlock @alts.ppL >-< ppCurlysSemisBlock [ppDef "default" @dflt.pp])
  | Tup         loc         .   pp          =   "#Tag" >#< ppTag @tag
  | TupDel      loc         .   pp          =   ppDef (ppParens @expr.pp) ("-=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm])
  | TupIns      loc         .   pp          =   ppDef (ppParens @expr.pp) (ppDef ("+=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm]) (ppParens @fldExpr.pp))
  | TupUpd      loc         .   pp          =   ppDef (ppParens @expr.pp) (ppDef (":=" >|< ppCurlysCommas' [ppTag @tag,@offset.pp,ppCNm @nm]) (ppParens @fldExpr.pp))
  | CaseAltFail loc         .   pp          =   pp "FAIL" >#< @failReason
  | FFI         loc         .   pp          =   ("foreign" >#< ppCurlysCommasBlock [pp (show @callconv),pp (show @safety),@ppent,ppTy @ty])
%%[[8
                loc         .   ppent       =   pp (show @impEnt)
%%][90
                loc         .   ppent       =   "\"" >|< @impEnt >|< "\""
%%]]

SEM CExpr
  | Lam         loc         .   lamBodyPP   =   @body.lamBodyPP
                            .   lamArgPPL   =   (ppCNm @arg) : @body.lamArgPPL
  | * - Lam     lhs         .   lamBodyPP   =   @pp
                            .   lamArgPPL   =   []

SEM CExpr
  | App         loc         .   appFunPP    =   @func.appFunPP
                            .   appArgPPL   =   (@arg.pp) : @func.appArgPPL
  | * - App     lhs         .   appFunPP    =   @pp
                            .   appArgPPL   =   []

SEM CBind
 | Bind         lhs         .   pp          =   let p [a] = a
                                                    p as  = ppCurlysSemisBlock as
                                                in  ppDef (ppCNm @nm) (p $ @bindAspects.ppL ++ (maybe [] (\x -> [pp x]) $ Map.lookup @nm @lhs.lamMp))

SEM CBindAspect
  | Bind        lhs         .   pp          =   @bindMeta.pp >-< "=" >#< @expr.pp
  | Ty     		lhs         .   pp          =   "::" >#< ppACBaspKeyS @aspectKeyS >#< @tyPP -- pp @relevTy
  | RelevTy     lhs         .   pp          =   "::_R" >#< ppACBaspKeyS @aspectKeyS >#< @tyPP -- pp @relevTy
  | Meta        lhs         .   pp          =   "::_M" >#< ppACBaspKeyS @aspectKeyS >#< @cmetas.pp
  | Val         lhs         .   pp          =   "=" >#< ppACBaspKeyS @aspectKeyS >#< @expr.pp
%%[[90
  | FFE         lhs         .   pp          =   "=" >#< ("foreignexport" >#< ppCurlysCommasBlock [pp (show @callconv),"\"" >|< @expEnt >|< "\"",@expr.pp {- ppCNm @expNm -},ppTyWithCfg' CfgPP_Plain @ty])
%%]]

SEM CBindAspectL CBindL CPatFldL CAltL CBindAnnL
  | Nil         lhs         .   ppL         =   []
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL

SEM CAlt
  | Alt         lhs         .   pp          =   ppDef (@pat.pp >#< "->") (@expr.pp)

SEM CPat
  | Int         lhs         .   pp          =   ppLit "Int"    (show @int)
  | Char        lhs         .   pp          =   ppLit "Char"   [@char]
  | Var         lhs         .   pp          =   ppCNm @pnm
  | Con         lhs         .   pp          =   ppDef ("#Tag" >#< ppTag @tag)
                                                      (ppCurly (@rest.pp >#< "|" >#< ppCommas' @binds.ppL))

SEM CPatFld
  | Fld         lhs         .   pp          =   ppCurlysCommas' [ppCNm @lbl,@offset.pp {- ,ppCNm @nm -}] >|< "=" >|< ppCNm @fldNm
                                                >|< (if null @fldAnns.ppL then empty else ppParensCommas' @fldAnns.ppL)

SEM CPatRest
  | Var         lhs         .   pp          =   ppCNm @nm

%%]
  | Undef       lhs         .   pp          =   pp hsnUnknown

  | TupSplit    lhs         .   pp          =   (cpatNmEither ((>|< "@") . pp) (const empty) @pnm)
                                                >|< ppParens (@pat.pp >#< "|">#< pp @tag >|< ":" >|< @offset.pp >|< "=" >|< @fldPat.pp)

%%[(8 codegen)
ATTR CMetaVal [ | | optPP : PP_Doc ]

SEM CMetas
  | Tuple       loc         .   pp          =   ppCurlysCommas [@x1.pp,@x2.pp]

SEM CMetaBind
  | Plain       loc         .   pp          =   pp "BINDPLAIN"
  | Function0   loc         .   pp          =   pp "BINDFUNCTION0"
  | Function1   loc         .   pp          =   pp "BINDFUNCTION1"
  | Apply0      loc         .   pp          =   pp "BINDAPPLY0"

SEM CMetaVal
  | Val         loc         .   pp          =   pp "VAL"
%%[[9
  | Dict        loc         .   pp          =   pp "DICT"
  | DictClass   loc         .   pp          =   pp "DICTCLASS"    >|< ppCurlyList ppTrack @tracks
  | DictInstance loc        .   pp          =   pp "DICTINSTANCE" >|< ppCurlyList ppTrack @tracks
  | Track        loc        .   pp          =   pp "TRACK"        >|< ppCurlys (show @track)
%%]]

SEM CMetaVal
  | Val         loc         .   optPP       =   empty
  | * - Val     loc         .   optPP       =   " :" >#< @pp

%%]

%%[(8 codegen)
SEM CExpr
  | Ann         loc         .   pp          =   ppParens (@expr.pp >#< @ann.pp)

SEM CExprAnn
  | Ty          loc         .   pp          =   "::" >#< ppTyWithCfg' CfgPP_Plain @ty
  | Coe			loc			.	pp			=	"~" >#< ppRelevCoe @lhs.varPPMp @coe
  | Debug		loc			.	pp			=	ppCmt $ pp @info

SEM CBindAnn
  | Coe			loc			.	pp			=	"~" >#< ppRelevCoe @lhs.varPPMp @coe
%%]

%%[(9 codegen)
SEM CExpr
  | Hole        loc         .   pp          =   ppHole @uid
  | HoleLet     loc         .   pp          =   "let --" >#< ppHole @bindsUid >-< ppDef "in" @body.pp
  | CoeArg      loc         .   pp          =   pp "<_>"
  | ImplsApp    loc         .   pp          =   ppDef (@func.pp >#< "-- Impl") (ppHole @uid)
  | ImplsLam    loc         .   pp          =   ppDef ("\\" >|< ppHole @uid >#< "-- Impl") ("->" >#< @body.pp)

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% UID mapping
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllExprBase [ varPPMp: VarPPMp | | ]

SEM CModule
  | Mod			expr		.	varPPMp		=	Map.empty
%%]

%%[(8 codegen)
ATTR AllBindAspect [ | | gathVarPPMp USE {`Map.union`} {Map.empty}: VarPPMp ]

SEM CBindAspect
  | RelevTy		(loc.tyPP,lhs.gathVarPPMp)	=	ppRelevTy Map.empty @relevTy		-- circular when given desired @lhs.varPPMp
  | Ty			loc			.	tyPP		=	ppTy @ty

SEM CBind
  | Bind        bindAspects	.	varPPMp		=	Map.union @bindAspects.gathVarPPMp @lhs.varPPMp
%%]

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% AG type signatures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
SEM *
  | *			loc			.	tyPP		:	PP_Doc
%%]
