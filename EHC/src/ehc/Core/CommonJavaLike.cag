%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Common stuff for Java like backends
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Level, Let's also one level higher
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 jazy || jscript)
SEM CExpr
  | Let         binds       .   lev         =   @lhs.lev + 1
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Global name info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 jazy || jscript)
ATTR AllNT [ topClassNm: HsName  pkgNm: HsName | | ]
%%[[8
ATTR AllNT [ moduleClassNm: HsName | | ]
%%][99
ATTR AllNT - CodeAGItf CModule [ moduleClassNm: HsName | | ]
ATTR CodeAGItf CModule [ | | moduleClassNm: HsName ]
%%]]
%%]

%%[(8 jazy || jscript)
SEM CModule
  | Mod         loc         .   topClassNm      =   @moduleNm
                            .   pkgNm           =   @moduleNm
%%[[8
                            .   moduleClassNm   =   @moduleNm
%%][20
                            .   moduleClassNm   =   hsnSetQual @moduleNm $ hsnQualified @moduleNm
%%]]

SEM CodeAGItf
  | AGItf       loc         .   topClassNm      =   hsnUnknown
                            .   pkgNm           =   hsnUnknown
%%[[8
                            .   moduleClassNm   =   hsnUnknown
%%][99
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Various contextual info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 jazy || jscript)
ATTR AllExprOnly [ mbLamNm: {Maybe (HsName,HsName)} | | ]

SEM CExpr
  | App Lam     loc         .   mbLamNm         =   Nothing

SEM CAlt
  | Alt         loc         .   mbLamNm         =   Nothing

SEM CBindAspect
  | Bind Val    expr        .   mbLamNm         =   Just (@varnm,@lhs.nm)

SEM CPatFld
  | Fld         offset      .   mbLamNm         =   Nothing

SEM CModule
  | Mod         expr        .   mbLamNm         =   Nothing
%%]

%%[(8 jazy || jscript)
SEM CExpr
  | Lam         loc         .   (hasFunHere,(lamNm,origLamNm))
                                                =   if @lhs.whatAbove /= ExprIsLam
                                                    then (True,fromJust @lhs.mbLamNm)
                                                    else (False,(hsnUnknown,hsnUnknown))

SEM CBindAspect
  | Bind Val    loc         .   isCAF           =   @expr.whatBelow /= ExprIsLam
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Variable bindings for other than global
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

assuming def for
 hs
  : CVarMp
  , tyDefault
 ag
  : CExpr.Let : @loc.nmToRefAssocL
  , CExpr.Lam : @loc.lamBindings
  , CPatFld.Fld: @loc.cviField

%%[(8 jazy || jscript)
ATTR AllBind [ | | bindNmL USE {++} {[]} : {[HsName]} ]

SEM CBind
  | Bind        loc         .   bindNmL         =   [@nm]
%%]

%%[(8 jazy || jscript)
ATTR AllNT [ cvarMp: CVarMp | | ]

SEM CodeAGItf
  | AGItf       loc         .   cvarMp          =   Map.empty

%%]

%%[(8 jazy || jscript)
ATTR AllPat [ | | patCVarMp USE {`Map.union`} {Map.empty} : CVarMp ]

SEM CPatFld
  | Fld         loc         .   patCVarMp       =   Map.singleton @fldNm @cviField
%%]

%%[(8 jazy || jscript)
SEM CExpr
  | Lam         loc         .   cvarMp          =   Map.fromList @lamBindings `Map.union` @lhs.cvarMp
  | Let         loc         .   (nLocals,cvarMpNew)
                                                =   if @isGlobal
                                                    then (0,Map.empty)
                                                    else let nLocals = length @binds.bindNmL
                                                         in  ( nLocals
                                                             , Map.fromList
                                                                 [ (n,CVarInfo_Local tyDefault o)
                                                                 | (n,o) <- @nmToRefAssocL
                                                                 ]
                                                             )
                            .   cvarMp          =   @cvarMpNew `Map.union` @lhs.cvarMp

SEM CAlt
  | Alt         loc         .   cvarMpOffsets   =   Map.fromList [ (n,cvi) | (n,cvi,_) <- @pat.offsetBinds ]
                expr        .   cvarMp          =   Map.unions [@cvarMpOffsets, @pat.patCVarMp, @lhs.cvarMp]
%%]

%%[(8 jazy || jscript)
SEM CExpr
  | Var         loc         .   cvi             =   Map.findWithDefault (cvarGlob tyDefault @lhs.moduleClassNm @nm @varnm) @nm @lhs.cvarMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Lam args
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 jazy || jscript)
ATTR CExpr [ | | nmArgL: {[HsName]} ]

SEM CExpr
  | Lam         loc         .   nmArgL      =   @arg : @body.nmArgL
                loc         .   nmArgL      :   {[HsName]}
  | * - Lam Ann lhs         .   nmArgL      =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Case: scrutinee
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 jazy || jscript)
ATTR AllAlt AllPat [ scrutineeCVarInfo: CVarInfo | | ]
%%]

%%[(8 jazy || jscript)
ATTR AllPatFld [ ctag: CTag | | ]

SEM CPat
  | Con         binds       .   ctag            =   @tag
%%]

%%[(8 jazy || jscript)
ATTR AllAlt CPat [ | | scrutinees USE {++} {[]} : {[Scrutinee]} ]

SEM CPat
  | Con         lhs         .   scrutinees      =   [Scrutinee_Tag @tag]
  | Var         lhs         .   scrutinees      =   [Scrutinee_Var @pnm]
  | Int         lhs         .   scrutinees      =   [Scrutinee_Int @int]
  | Char        lhs         .   scrutinees      =   [Scrutinee_Other "char"]
  | * - Con Var Int Char Ann
                lhs         .   scrutinees      =   [Scrutinee_Other "other"]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Bind gathering
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 jazy || jscript)
ATTR AllBind CExpr [ | | jbinds USE {`Seq.union`} {Seq.empty}: JBinds]
%%]

%%[(8 jazy || jscript)
SEM CExpr
  | Let         lhs         .   jbinds          =   @jbindsLet `Seq.union` @body.jbinds
%%]

