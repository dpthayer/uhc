%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to HS/AbsSyn (was: UHA_Syntax)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EH}HS} import({%{EH}Base.Common}, UU.Scanner.Position, EH.Util.ScanUtils) export(module UU.Scanner.Position)
%%]

%%[1 hs export(AGItf(..), Module(..), Body(..), Declaration(..), Declarations, MaybeDeclarations, Type(..), Types, Expression(..), Expressions, MaybeExpression, FunctionBinding(..), FunctionBindings, LeftHandSide(..), RightHandSide(..), Pattern(..), Patterns, Literal(..), Name, Names, MaybeName, MaybeNames, Strings, Range(..), Fixity(..))
%%]

%%[1 hs export(mkQName,mkQNames)
%%]

%%[1 hs export(mkRngNm,mkRngNm',mkRngStr,mkInt,mkStr)
%%]

%%[5 hs export(Constructor(..), Constructors)
%%]

%%[5 hs export(GuardedExpression(..), GuardedExpressions, Alternative(..), Alternatives, Qualifier(..), Qualifiers)
%%]

%%[5 hs export(SimpleType(..), AnnotatedType(..), AnnotatedTypes)
%%]

%%[7 hs export(FieldDeclaration(..), FieldDeclarations)
%%]

%%[77 hs export(RowExtension(..), RowExtensions, RowType(..))
%%]

%%[77 hs export(RecordPatternBinding(..), RecordPatternBindings)
%%]

%%[7 hs export(RecordExpressionBinding(..), RecordExpressionBindings)
%%]

%%[7 hs export(RowRecordExpressionUpdate(..), RowRecordExpressionUpdates, RowRecordPatternBinding(..), RowRecordPatternBindings, RowTypeUpdate(..), RowTypeUpdates)
%%]

%%[8 hs export(Export(..), Exports, MaybeExports, ImportDeclaration(..), ImportDeclarations, ImportSpecification(..), MaybeImportSpecification, Import(..), Imports)
%%]

%%[9 hs export(ContextItem(..), ContextItems, ContextedExpression(..), ContextedExpressions, ContextedPattern(..), ContextedPatterns, FunctionalDependency(..), FunctionalDependencies, Deriving(..), Derivings)
%%]

%%[9 hs export(Statement(..), Statements)
%%]

%%[1.Token hs import(UU.Scanner.Token)
%%]

%%[5 -1.Token hs import({%{EH}Scanner.Token})
%%]

%%[1 import({HS/AbsSyn})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Additional defs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
type Name = HsName
type Names = [Name]
type MaybeName = Maybe Name
type MaybeNames = Maybe Names
%%]

%%[1 hs
%%]

%%[1 hs
-- Assumption: tokTpIsInt (genTokTp t) == True
mkInt :: Token -> Int
mkInt t
  = case genTokTp t of
      Just TkInteger10 -> read v
      _                -> 0
  where v = genTokVal t

mkStr :: Token -> String
mkStr = genTokVal
%%]

%%[1.mkQName hs
mkQName :: Token -> HsName
mkQName = HNm . genTokVal
%%]

%%[7 -1.mkQName hs
mkQName :: Token -> HsName
mkQName t
  = case genTokTp t of
      Just tp | tokTpIsInt tp -> HNPos $ mkInt t
      _                       -> mkHNm $ genTokVal t
%%]

%%[1 hs
mkQNames :: [Token] -> [HsName]
mkQNames = map mkQName

instance HSNM Token where
  mkHNm = mkQName
%%]

%%[1 hs
mkRngNm' :: (Position t,HSNM t) => (Range -> HsName -> r) -> t -> (r,Range)
mkRngNm' ast t
  = (ast r (mkHNm t),r)
  where r = mkRange1 t

mkRngNm :: (Position t,HSNM t) => (Range -> HsName -> r) -> t -> r
mkRngNm ast t = fst (mkRngNm' ast t)

mkRngStr :: (Range -> String -> r) -> Token -> r
mkRngStr ast t = ast (mkRange1 t) (mkStr t)
%%]

%%[1 hs
%%]
instance Show Range where
  show (Range_Range p _) = show p
  show Range_Unknown     = "??"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% SemApp instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
instance SemApp Type where
  semApp       = \e1 e2 -> Type_Application emptyRange False e1 [e2]
  semAppTop    = id
  semCon       = mkRngNm Type_Constructor
  semParens    = Type_Parenthesized emptyRange
  mkApp (a:as) = if null as then a else Type_Application emptyRange False a as
  mkRngCon r n = Type_Constructor r (mkHNm n)
%%]
%%[1.mkRngVar hs
  mkRngVar     = mkRngCon
%%]
%%[3 -1.mkRngVar hs
  mkRngVar r n = Type_Variable r (mkHNm n)
%%]

%%[1 hs
instance SemApp Expression where
  semApp       = \e1 e2 -> Expression_NormalApplication emptyRange e1 [e2]
  semAppTop    = id
  semCon       = mkRngNm Expression_Constructor
  semParens    = Expression_Parenthesized emptyRange
  mkApp (a:as) = if null as then a else Expression_NormalApplication emptyRange a as
  mkRngCon r n = Expression_Constructor r (mkHNm n)
  mkRngVar r n = Expression_Variable r (mkHNm n)
%%]


