%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to forceEval on Ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[99 hs module {%{EH}Ty.Trf.ForceEval} import({%{EH}Base.Common},{%{EH}Ty},{%{EH}Base.ForceEval})
%%]

%%[99.WRAPPER ag import({Ty/AbsSyn})
WRAPPER Ty Label Pred
%%]

%%[99 hs
instance ForceEval Ty {- where
  forceEval x = repl_Syn_Ty t `seq` x
              where t = wrap_Ty (sem_Ty x) (Inh_Ty)

-}
instance ForceEval Pred {- where
  forceEval x = repl_Syn_Pred t `seq` x
              where t = wrap_Pred (sem_Pred x) (Inh_Pred)

-}
instance ForceEval Label {- where
  forceEval x = repl_Syn_Label t `seq` x
              where t = wrap_Label (sem_Label x) (Inh_Label)

-}
instance ForceEval PredScope {- where
  forceEval x@(PredScope_Lev l) = forceEval l `seq` x
  forceEval x@(PredScope_Var v) = forceEval v `seq` x

-}
instance ForceEval LabelOffset {- where
  forceEval x@(LabelOffset_Off o) = forceEval o `seq` x
  forceEval x@(LabelOffset_Var v) = forceEval v `seq` x

-}
instance ForceEval CHRPredOcc {- where
  forceEval x = forceEval (cpoPr x) `seq` forceEval (cpoScope x) `seq` x

-}
instance ForceEval PredOccId
instance ForceEval ImplsProveOcc

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ForceEval over structure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[99
ATTR AllTyAndFlds  [ | | repl USE {`seq`} {()}: {()}  ]

SEM Ty
  | Con				lhs		.	repl		=	forceEval' @nm
  | Var				lhs		.	repl		=	forceEval @tv `seq` @categ.repl
  | Quant			lhs		.	repl		=	forceEval @tv `seq` forceEval @qu.repl `seq` @ty.repl
  | Lam				lhs		.	repl		=	forceEval @tv `seq` @ty.repl
  | Ext				lhs		.	repl		=	forceEval @nm `seq` forceEval @extTy.repl `seq` @ty.repl
  | Pred			lhs		.	repl		=	forceEval' @pr.repl						-- not necessary... ??
  | Impls			lhs		.	repl		=	forceEval' @impls.repl					-- not necessary... ??

SEM Pred
  | Var				lhs		.	repl		=	forceEval' @pv
  | Pred			lhs		.	repl		=	forceEval' @ty.repl						-- not necessary... ??
  | Class			lhs		.	repl		=	forceEval' @ty.repl						-- not necessary... ??
  | Preds			lhs		.	repl		=	forceEval' @seq.repl					-- not necessary... ??

SEM Impls
  | Tail			lhs		.	repl		=	forceEval @iv `seq` forceEval' @proveOccs
  | Cons			lhs		.	repl		=	forceEval @iv `seq` forceEval @pv `seq` forceEval @proveOccs `seq` @pr.repl `seq` @tl.repl

SEM Label
  | Lab				lhs		.	repl		=	forceEval' @nm
  | Var				lhs		.	repl		=	forceEval' @lv

SEM PredSeq
  | Var				lhs		.	repl		=	forceEval' @av

SEM RowExts
  | Var				lhs		.	repl		=	forceEval' @ev
  | Exts			lhs		.	repl		=	forceEval' @exts

%%]

