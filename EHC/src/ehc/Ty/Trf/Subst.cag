%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2 hs module {%{EH}Ty.Trf.Subst} import({%{EH}Base.Common},{%{EH}Ty},{%{EH}Cnstr}) export(tyAppCnstr)
%%]

%%[2.WRAPPER ag import({Ty/AbsSyn})
WRAPPER TyAGItf
%%]

%%[2.tyAppCnstr.sig hs
tyAppCnstr :: Cnstr -> Ty -> Ty
%%]

%%[9.tyAppCnstr.sig -2.tyAppCnstr.sig hs
tyAppCnstr :: Cnstr -> Ty -> Ty
%%]

%%[2.tyAppCnstr hs
tyAppCnstr cnstr ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf {cnstr_Inh_TyAGItf = cnstr})
     in   repl_Syn_TyAGItf t
%%]

%%[3 hs
type IsBound = TyVarId -> Bool

tvRepl :: TyVarId -> Cnstr -> IsBound -> Ty -> Ty
tvRepl tv c isBound repl
  =  case (cnstrTyLookup tv c) of
        Just t | not (isBound tv)  -> t
        _                          -> repl
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Apply substitution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[2.TySubst
ATTR TyAGItf AllTy  [ cnstr: Cnstr  | |             ]
ATTR AllTyAndFlds   [               | | repl: SELF  ]
ATTR TyAGItf        [               | | repl: Ty    ]

SEM Ty
  | Var             lhs     .   repl        =   maybe @repl id (cnstrTyLookup @tv @lhs.cnstr)
%%]

%%[3
ATTR AllTy [ isBound: IsBound | | ]

SEM TyAGItf
  | AGItf           ty      .   isBound     =   const False

SEM Ty
  | Var             lhs     .   repl        :=  tvRepl @tv @lhs.cnstr @lhs.isBound @repl
  | Quant
%%[[11
    Lam
%%]]
                    ty      .   isBound     =   (\v -> v == @tv || @lhs.isBound v)
%%]

%%[4_2
SEM Ty
  | Alts Both       lhs     .   repl        =   tvRepl @tv @lhs.cnstr @lhs.isBound @repl
%%]

%%[9
SEM Impls
  | Tail            lhs     .   repl        =   maybe @repl id (cnstrImplsLookup @iv @lhs.cnstr)

SEM Pred
  | Var             lhs     .   repl        =   maybe @repl id (cnstrPredLookup @pv @lhs.cnstr)
%%]

%%[50
SEM Ty
  | Equal           lhs     .   repl        =   tvRepl @tv @lhs.cnstr @lhs.isBound @repl
%%]

