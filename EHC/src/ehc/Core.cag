%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[doesWhat doclatex
Core AST as Haskell datatype.

Datatype LamInfo holds the implementation info to be exported from a module.
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}Core} import({%{EH}Base.Builtin},{%{EH}Base.Common},{%{EH}Opts.Base})
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore}) export(module {%{EH}AbstractCore})
%%]

%%[(8 codegen) hs import({%{EH}AnaDomain}) export (module {%{EH}AnaDomain})
%%]

%%[(8 codegen) hs import ({%{EH}Base.Target}(FFIWay(..),TargetFlavor(..))) export(module {%{EH}Base.Target})
%%]

%%[(8 codegen) hs import(Data.Maybe,Data.Char,Data.List,EH.Util.Pretty,EH.Util.Utils)
%%]

%%[(8 codegen) hs export(CodeAGItf(..), CModule(..), CExpr(..), MbCExpr, CBind(..), CBindAspect(..), CMetaVal(..), CExprAnn(..), CMetaBind(..), CMetas, CBindL, CBindAspectL, CPatRest(..), CAlt(..), CAltL, CPat(..), CPatL, CPatFld(..), CPatFldL) 
%%]

%%[(8 codegen) hs import(qualified Data.Map as Map,qualified Data.Set as Set)
%%]

%%[(8 codegen) hs import({%{EH}LamInfo},{%{EH}Ty})
%%]

%%[(20 codegen grin) hs import(Control.Monad, {%{EH}Base.Binary}, {%{EH}Base.Serialize})
%%]
%%[(20 codegen grin) hs import(Data.Typeable(Typeable), Data.Generics(Data))
%%]

%%[(90 codegen) hs import({%{EH}Foreign}) export(module {%{EH}Foreign})
%%]

%%[(9999 codegen) hs import({%{EH}Base.ForceEval})
%%]

%%[(8 codegen) ag import({Core/AbsSyn})
DERIVING *
  : Show, Eq
%%[[20
  , Typeable, Data
%%]]
%%]

%%[(20 codegen) ag
DERIVING CMetaBind
  : Enum
%%]

-- for debug only
%%[(8 codegen) hs import({%{EH}Base.Debug})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Abstract syntax for encoding case+pattern rewrite info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(RAlt,RPat,RPatConBind,RPatFld)
type RAlt 			= RAlt' 		CExpr Ty CBind CPatRest
type RPat 			= RPat' 		CExpr Ty CBind CPatRest
type RPatConBind 	= RPatConBind' 	CExpr Ty CBind CPatRest
type RPatFld 		= RPatFld' 		CExpr Ty CBind CPatRest
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tuple operator info
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(10 codegen) hs export(cTupLbl)
cTupLbl :: CExpr -> HsName
cTupLbl e
  =  case e of
         CExpr_TupIns _ _ l _ _ -> l
         CExpr_TupUpd _ _ l _ _ -> l
         CExpr_TupDel _ _ l _   -> l
%%]

%%[(10 codegen) hs export(cTupTag)
cTupTag :: CExpr -> CTag
cTupTag e
  =  case e of
         CExpr_TupIns _ t _ _ _ -> t
         CExpr_TupUpd _ t _ _ _ -> t
         CExpr_TupDel _ t _ _   -> t
%%]

%%[(10 codegen) hs export(cTupOff)
cTupOff :: CExpr -> CExpr
cTupOff e
  =  case e of
         CExpr_TupIns _ _ _ o _ -> o
         CExpr_TupUpd _ _ _ o _ -> o
         CExpr_TupDel _ _ _ o   -> o
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utility functions for CMeta
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(cmetasDefault)
cmetasDefault :: CMetas
cmetasDefault = (CMetaBind_Plain,CMetaVal_Val)
%%]

%%[(8 codegen) hs export(cmetasVal)
cmetasVal :: CMetas -> CMetaVal
cmetasVal (_,v) = v
%%]

%%[(8 codegen) hs export(cmetasMapVal)
cmetasMapVal :: (CMetaVal -> CMetaVal) -> CMetas -> CMetas
cmetasMapVal f (b,v) = (b,f v)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Binding category, per group of bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(CBindingsCateg(..))
data CBindingsCateg
  = CBindings_Rec				-- mutually recursive
  | CBindings_Strict			-- strictly evaluated
  | CBindings_Plain				-- plain
  | CBindings_FFI				-- imported function
%%[[90
  | CBindings_FFE				-- exported function (not implemented yet)
%%]]
  deriving (Show,Eq,Enum)
%%]

%%[(20 codegen) hs
deriving instance Typeable CBindingsCateg
deriving instance Data CBindingsCateg
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Context: strictness as required by context
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(EvalCtx(..),isStrict)
data EvalCtx
  = EvalCtx_None         -- nothing known, no strictness required
  | EvalCtx_Eval         -- strictness (thus eval) required
  | EvalCtx_EvalUnbox    -- strictness (thus eval) + unboxing required
  deriving Eq

isStrict :: EvalCtx -> Bool
isStrict EvalCtx_Eval        = True
isStrict EvalCtx_EvalUnbox   = True
isStrict _                   = False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Properties
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(cexprIsLam)
cexprIsLam :: CExpr -> Bool
cexprIsLam (CExpr_Lam _ _) = True
cexprIsLam _               = False
%%]

%%[(8 codegen) hs export(cbindNm)
cbindNm :: CBind -> HsName
cbindNm (CBind_Bind      n _) = n
-- cbindNm (CBind_FFI _ _ _ n _  ) = n
%%]

%%[(9797 codegen) hs export(cexprMbConst)
cexprMbConst :: CExpr -> Maybe Integer
cexprMbConst e@(CExpr_Int     i) = Just $ toInteger i
cexprMbConst e@(CExpr_Char    c) = Just $ toInteger $ ord c
cexprMbConst e@(CExpr_Integer i) = Just i
cexprMbConst _                   = Nothing
%%]



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Remove duplicate bindings
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 codegen) hs export(cbindLNub)
cbindLNub :: CBindL -> CBindL
cbindLNub = nubBy (\b1 b2 -> cbindNm b1 == cbindNm b2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Lifting to CMetaVal tupled
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 codegen) hs export(cmetaLift)
cmetaLift :: Functor f => f x -> f (x,CMetaVal)
cmetaLift = fmap2Tuple CMetaVal_Val
%%]

%%[(9999 codegen) hs export(cmetaLiftDict)
cmetaLiftDict :: Functor f => f x -> f (x,CMetaVal)
cmetaLiftDict = fmap2Tuple CMetaVal_Dict
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(mkCMod,emptyCModule)
mkCMod :: CExpr -> CModule
mkCMod e = CModule_Mod (hsnFromString "") e []

emptyCModule :: CModule
emptyCModule = mkCMod (acoreInt 0)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Inspection/deconstruction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(cexprMbVar,cexprVar)
cexprMbVar :: CExpr -> Maybe HsName
cexprMbVar (CExpr_Var r) = Just (acbrefNm r)
cexprMbVar _             = Nothing

cexprVar :: CExpr -> HsName
cexprVar = maybe hsnUnknown id . cexprMbVar
%%]

%%[(8 codegen) hs export(cexprTupFld)
cexprTupFld :: CExpr -> CExpr
cexprTupFld (CExpr_TupIns _ _ _ _ e) = e
cexprTupFld _                        = acoreVar hsnUnknown
%%]

%%[(8 codegen) hs export(cexprIsEvaluated)
cexprIsEvaluated :: CExpr -> Bool
cexprIsEvaluated (CExpr_Int  _) = True
cexprIsEvaluated (CExpr_Char _) = True
cexprIsEvaluated _              = False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Integer construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9797 codegen) hs export(cinteger)
cinteger :: EHCOpts -> Integer -> CExpr
cinteger opts i = acoreBuiltinApp opts ehbnPackedStringToInteger [CExpr_String $ show $ i]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name extraction (temporary, 20100330)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 codegen) hs export(cpatVarNm) 
cpatVarNm :: CPat -> HsName
cpatVarNm (CPat_Var n) = n
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Tags, in general
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 codegen) hs export(caltIntTag) 
cpatConTag :: CPat -> CTag
cpatConTag (CPat_Con    t _ _)  = t
cpatConTag (CPat_Int    _    )  = ctagInt
cpatConTag (CPat_Char   _    )  = ctagChar

cpatIntTag :: CPat -> Int
cpatIntTag (CPat_Con    t _ _)  = ctagTag t
cpatIntTag (CPat_Int    i    )  = i
cpatIntTag (CPat_Char   c    )  = ord c

caltIntTag :: CAlt -> Int
caltIntTag (CAlt_Alt p _) = cpatIntTag p
%%]
caltConTag :: CAlt -> CTag
caltConTag (CAlt_Alt p _) = cpatConTag p


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% List
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In the following, note the hardcodedness!!!!!

%%[(9999 codegen) hs export(mkCListSingleton)
mkCListSingleton :: EHCOpts -> CExpr -> CExpr
mkCListSingleton opts e
  = acoreTagTup (ctagCons opts) [e,acoreTagTup (ctagNil opts) []]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Var introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(CVarIntro(..),emptyCVarIntro)
data CVarIntro
  = CVarIntro
      { cviLev		:: Int		-- lexical level
      , cviMeta		:: CMetaVal	-- meta info
      }

emptyCVarIntro :: CVarIntro
emptyCVarIntro
  = CVarIntro cLevExtern CMetaVal_Val
%%]

%%[(8 codegen) hs export(CVarIntroMp,CVarIntroL,cviLookup)
type CVarIntroMp = Map.Map HsName CVarIntro
type CVarIntroL  = AssocL  HsName CVarIntro

cviLookup :: HsName -> CVarIntroMp -> CVarIntro
cviLookup n m = Map.findWithDefault emptyCVarIntro n m
%%]

%%[(8 codegen) hs export(cLevModule,cLevExtern)
cLevModule, cLevExtern :: Int
cLevModule = 0
cLevExtern = 0
%%]

%%[(20 codegen) hs export(cLevIntern)
cLevIntern :: Int
cLevIntern = 1
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement in general
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(CVarRepl(..))
data CVarRepl r
  = CVarRepl
      { cvrRepl		:: r		-- replacement
      , cvrMeta		:: CMetaVal	-- meta info
      }
%%]

%%[(8 codegen) hs export(CVarReplMp)
type CVarReplMp  r = Map.Map HsName (CVarRepl r)
type CVarReplAsc r = AssocL  HsName (CVarRepl r)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement with HsName
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(CVarReplNm,emptyCVarReplNm)
type CVarReplNm = CVarRepl HsName

emptyCVarReplNm :: CVarReplNm
emptyCVarReplNm = CVarRepl hsnUnknown CMetaVal_Val
%%]

%%[(8 codegen) hs export(CVarReplNmMp,CVarReplNmL)
type CVarReplNmMp = CVarReplMp  HsName
type CVarReplNmL  = CVarReplAsc HsName
%%]

%%[(8 codegen) hs export(cvrFromCvi)
cvrFromCvi :: CVarIntro -> CVarReplNm
cvrFromCvi i
  = emptyCVarReplNm
      { cvrMeta 	= cviMeta i
      }
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Support for transformations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(fvLev,fvsLev)
fvLev :: HsName -> CVarIntroMp -> Int
fvLev n m = cviLev $ cviLookup n m

fvsLev :: CVarIntroMp -> Int -> FvS -> Int
fvsLev lm lDflt fvs = foldr (\n l -> fvLev n lm `max` l) lDflt $ Set.toList $ fvs
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name to offset (in a record)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(20 codegen) hs export(HsName2OffsetMp,HsName2OffsetMpMp)
type HsNameOffset      = Int
type HsName2OffsetMp   = Map.Map HsName HsNameOffset
type HsName2OffsetMpMp = Map.Map HsName (Int,HsName2OffsetMp)
%%]

%%[(20 codegen) hs export(offMpKeysSorted,offMpMpKeysSet)
-- | Module names, sorted on import order, which is included as 0-based offset (used as index in import entry table)
offMpKeysSorted :: HsName2OffsetMpMp -> AssocL HsName Int
offMpKeysSorted m = sortOn snd [ (n,o) | (n,(o,_)) <- Map.toList m ]

offMpMpKeysSet :: HsName2OffsetMpMp -> HsNameS
offMpMpKeysSet m = Set.unions [ Map.keysSet m' | (_,m') <- Map.elems m ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Module merge
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(20 codegen) hs export(cModMerge)
cModMerge :: [CModule] -> CModule
cModMerge mL
  = foldr1 cmb mL
  where get (CExpr_Let c b e) = CExpr_Let c b . get e
        get  _                = id
        cmb (CModule_Mod m1 e1 t1) (CModule_Mod m2 e2 t2)
          = CModule_Mod m2 (get e1 e2) (t1++t2)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instances: Binary, Serialize, ForceEval
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(20 codegen) hs
instance Serialize LamInfo where
  sput (LamInfo a b c d) = sput a >> sput b >> sput c >> sput d
  sget = liftM4 LamInfo  sget sget sget sget

instance Serialize StackTraceInfo where
  sput (StackTraceInfo_None                ) = sputWord8 0
  sput (StackTraceInfo_HasStackTraceEquiv a) = sputWord8 1 >> sput a
  sput (StackTraceInfo_IsStackTraceEquiv  a) = sputWord8 2 >> sput a
  sget
    = do t <- sgetWord8
         case t of
           0 -> return StackTraceInfo_None
           1 -> liftM  StackTraceInfo_HasStackTraceEquiv sget
           2 -> liftM  StackTraceInfo_IsStackTraceEquiv  sget
%%]

%%[(20 codegen grin) hs
instance Serialize CModule where
  sput (CModule_Mod   a b c   ) = sputWord8 0 >> sput a >> sput b >> sput c
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM3 CModule_Mod         sget sget sget

instance Serialize CExpr where
  sput (CExpr_Let       a b c       ) = sputWord8  0 >> sput a >> sput b >> sput c
  sput (CExpr_App       a b         ) = sputWord8  1 >> sput a >> sput b
  sput (CExpr_Lam       a b         ) = sputWord8  2 >> sput a >> sput b
  sput (CExpr_Case      a b c       ) = sputWord8  3 >> sput a >> sput b >> sput c
  sput (CExpr_Var       a           ) = sputWord8  4 >> sput a
  sput (CExpr_Int       a           ) = sputWord8  5 >> sput a
  sput (CExpr_Char      a           ) = sputWord8  6 >> sput a
  sput (CExpr_String    a           ) = sputWord8  7 >> sput a
  sput (CExpr_Tup       a           ) = sputWord8  8 >> sput a
  sput (CExpr_TupDel    a b c d     ) = sputWord8  9 >> sput a >> sput b >> sput c >> sput d
  sput (CExpr_TupIns    a b c d e   ) = sputWord8 10 >> sput a >> sput b >> sput c >> sput d >> sput e
  sput (CExpr_TupUpd    a b c d e   ) = sputWord8 11 >> sput a >> sput b >> sput c >> sput d >> sput e
  sput (CExpr_CaseAltFail
                        a b         ) = sputWord8 12 >> sput a >> sput b
  sput (CExpr_Hole      a           ) = sputWord8 13 >> sput a
  sput (CExpr_HoleLet   a b         ) = sputWord8 14 >> sput a >> sput b
  sput (CExpr_ImplsApp  a b         ) = sputWord8 15 >> sput a >> sput b
  sput (CExpr_ImplsLam  a b         ) = sputWord8 16 >> sput a >> sput b
  sput (CExpr_CoeArg                ) = sputWord8 17
%%[[97
  sput (CExpr_Integer   a           ) = sputWord8 18 >> sput a
%%]]
  sput (CExpr_Ann       a b         ) = sputWord8 19 >> sput a >> sput b
  sput (CExpr_FFI       a b c d     ) = sputWord8 20 >> sput a >> sput b >> sput c >> sput d
  sget
    = do t <- sgetWord8
         case t of
           0  -> liftM3 CExpr_Let           sget sget sget
           1  -> liftM2 CExpr_App           sget sget
           2  -> liftM2 CExpr_Lam           sget sget
           3  -> liftM3 CExpr_Case          sget sget sget
           4  -> liftM  CExpr_Var           sget
           5  -> liftM  CExpr_Int           sget
           6  -> liftM  CExpr_Char          sget
           7  -> liftM  CExpr_String        sget
           8  -> liftM  CExpr_Tup           sget
           9  -> liftM4 CExpr_TupDel        sget sget sget sget
           10 -> liftM5 CExpr_TupIns        sget sget sget sget sget
           11 -> liftM5 CExpr_TupUpd        sget sget sget sget sget
           12 -> liftM2 CExpr_CaseAltFail   sget sget
           13 -> liftM  CExpr_Hole          sget
           14 -> liftM2 CExpr_HoleLet       sget sget
           15 -> liftM2 CExpr_ImplsApp      sget sget
           16 -> liftM2 CExpr_ImplsLam      sget sget
           17 -> return CExpr_CoeArg    
%%[[97
           18 -> liftM  CExpr_Integer       sget
%%]]
           19 -> liftM2 CExpr_Ann           sget sget
           20 -> liftM4 CExpr_FFI           sget sget sget sget

instance Serialize CMetaVal where
  sput (CMetaVal_Val                ) = sputWord8 0
  sput (CMetaVal_Dict               ) = sputWord8 1
  sput (CMetaVal_DictClass      a   ) = sputWord8 2 >> sput a
  sput (CMetaVal_DictInstance   a   ) = sputWord8 3 >> sput a
  sput (CMetaVal_Track          a   ) = sputWord8 4 >> sput a
  sget
    = do t <- sgetWord8
         case t of
            0 -> return CMetaVal_Val                    
            1 -> return CMetaVal_Dict
            2 -> liftM  CMetaVal_DictClass          sget
            3 -> liftM  CMetaVal_DictInstance       sget
            4 -> liftM  CMetaVal_Track              sget

instance Serialize CExprAnn where
  sput (CExprAnn_Ty    a) = sputWord8 0 >> sput a
  sput (CExprAnn_Coe   a) = sputWord8 1 >> sput a
  sput (CExprAnn_Debug _) = sputWord8 2
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  CExprAnn_Ty         sget            
            1 -> liftM  CExprAnn_Coe        sget            
            2 -> return (CExprAnn_Debug     "")

instance Serialize CBindAspect where
  sput (CBindAspect_Bind 	a b      ) = sputWord8 0 >> sput a >> sput b
  -- sput (CBindAspect_FFI  	a b c d  ) = sputWord8 1 >> sput a >> sput b >> sput c >> sput d
%%[[90
  sput (CBindAspect_FFE  	a b c d  ) = sputWord8 2 >> sput a >> sput b >> sput c >> sput d
%%]]
  sput (CBindAspect_RelevTy a b      ) = sputWord8 3 >> sput a >> sput b
  sput (CBindAspect_Meta    a b      ) = sputWord8 4 >> sput a >> sput b
  sput (CBindAspect_Val     a b      ) = sputWord8 5 >> sput a >> sput b
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM2 CBindAspect_Bind          sget sget
            -- 1 -> liftM4 CBindAspect_FFI           sget sget sget sget
%%[[90           
            2 -> liftM4 CBindAspect_FFE           sget sget sget sget
%%]]
            3 -> liftM2 CBindAspect_RelevTy       sget sget
            4 -> liftM2 CBindAspect_Meta          sget sget
            5 -> liftM2 CBindAspect_Val           sget sget

instance Serialize CBind where
  sput (CBind_Bind a b      ) = sputWord8 0 >> sput a >> sput b
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM2 CBind_Bind          sget sget

instance Serialize CAlt where
  sput (CAlt_Alt   a b      ) = sputWord8 0 >> sput a >> sput b
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM2 CAlt_Alt         sget sget         

instance Serialize CPat where
  sput (CPat_Var       a        ) = sputWord8 0 >> sput a
  sput (CPat_Con       a b c    ) = sputWord8 1 >> sput a >> sput b >> sput c
  sput (CPat_Int       a        ) = sputWord8 2 >> sput a
  sput (CPat_Char      a        ) = sputWord8 3 >> sput a
%%[[97
  sput (CPat_BoolExpr  a        ) = sputWord8 4 >> sput a
%%]]
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  CPat_Var         sget         
            1 -> liftM3 CPat_Con         sget sget sget      
            2 -> liftM  CPat_Int         sget         
            3 -> liftM  CPat_Char        sget         
%%[[97
            4 -> liftM  CPat_BoolExpr    sget         
%%]]

instance Serialize CPatRest where
  sput (CPatRest_Var   a        ) = sputWord8 0 >> sput a
  sput (CPatRest_Empty          ) = sputWord8 1
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM  CPatRest_Var           sget         
            1 -> return CPatRest_Empty  

instance Serialize CPatFld where
  sput (CPatFld_Fld   a b c   ) = sputWord8 0 >> sput a >> sput b >> sput c
  sget
    = do t <- sgetWord8
         case t of
            0 -> liftM3 CPatFld_Fld         sget sget sget

instance Serialize CBindingsCateg where
  sput = sputEnum8
  sget = sgetEnum8

instance Serialize CMetaBind where
  sput = sputEnum8
  sget = sgetEnum8
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% AbstractCore instance
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
instance AbstractCore CExpr CMetaVal CBind CBindAspect CBindingsCateg CMetaBind Ty CPat CPatRest CPatFld CAlt where
  -- expr
  acoreApp1       f a      				= CExpr_App f a
  acoreLam1Ty a _ e 				    = CExpr_Lam a e
  acoreTagTupTy   tg _ es 				= acoreApp (CExpr_Tup tg) es
  acoreBindasp1CatLevMetasTy _ _ _ m _ e= CBindAspect_Bind m e
  acoreBind1Asp n as					= CBind_Bind n as
  acoreLetBase							= CExpr_Let
  acoreCaseDflt	e as d					= CExpr_Case e as (maybe (acoreVar hsnUnknown) id d)
  acoreVar n							= CExpr_Var (ACoreBindRef n Nothing) 
  acoreStringTy _ i						= CExpr_String i
  acoreCharTy _ i						= CExpr_Char i
  acoreIntTy _ i						= CExpr_Int i
  acoreIntTy2 _ i						= CExpr_Int (fromInteger i)
%%[[8
  acoreUidHole							= panic "Core.acoreUidHole"
%%][9
  acoreUidHole							= CExpr_Hole
%%]
%%[[9
  acoreHoleLet							= CExpr_HoleLet
%%]

  -- ty
  -- acoreTyInt2							= tyInt

  -- pat
  acorePatVarTy n _						= CPat_Var n
  acorePatCon 							= CPat_Con
  acorePatIntTy _ i						= CPat_Int i
  acorePatIntTy2 _ i					= CPat_Int (fromInteger i)
  acorePatCharTy _ i					= CPat_Char i
%%[[97
  acorePatBoolExpr 						= CPat_BoolExpr
%%]]
  
  -- patfld
  acorePatFldTy _ (lbl,off) n 			= CPatFld_Fld lbl off n

  -- patrest
  acorePatRestEmpty  					= CPatRest_Empty
  acorePatRestVar						= CPatRest_Var

  -- alt
  acoreAlt                             	= CAlt_Alt

  -- acoreTy2ty            t = t

  -- defaults
  acoreMetavalDflt       				= CMetaVal_Val
%%[[9
  acoreMetavalDfltDict   				= CMetaVal_Dict
%%]]
  acoreMetabindDflt      				= CMetaBind_Plain
  acoreTyErr           _ 				= Ty_Any
  acoreTyChar 							= tyChar
  acoreTyInt 							= tyInt
%%[[8
  acoreTyString _ 						= tyString
%%][11
  acoreTyString o 						= tyString o
%%]]
  
  -- bindcateg
  acoreBindcategRec 					= CBindings_Rec
  acoreBindcategStrict 					= CBindings_Strict
  acoreBindcategPlain					= CBindings_Plain

  -- inspecting
  acoreExprMbLet (CExpr_Let c b e)      = Just (c,b,e)
  acoreExprMbLet _                      = Nothing

  acoreExprMbVar (CExpr_Var r)          = Just (acbrefNm r)
  acoreExprMbVar _                      = Nothing

  acoreExprMbInt (CExpr_Int i)          = Just (tyInt,toInteger i)
  acoreExprMbInt _                      = Nothing

  acoreBindcategMbRec CBindings_Rec     = Just CBindings_Rec
  acoreBindcategMbRec _                 = Nothing

  acorePatMbCon (CPat_Con tg r fs)		= Just (tg,r,fs)
  acorePatMbCon _                 		= Nothing

  acorePatMbInt (CPat_Int i)			= Just (tyInt,toInteger i)
  acorePatMbInt _                 		= Nothing

  acorePatMbChar (CPat_Char i)			= Just (tyChar,i)
  acorePatMbChar _                 		= Nothing

  acoreUnAlt (CAlt_Alt p e)				= (p,e)
  acoreUnPatFld (CPatFld_Fld l o n)		= (Ty_Any,(l,o),n)

  -- coercion
%%[[8
  acoreCoeArg 							= panic "Core.acoreCoeArg"
  acoreExprIsCoeArg						= const False
%%][9
  acoreCoeArg 							= CExpr_CoeArg
  acoreExprIsCoeArg						= (== CExpr_CoeArg)
%%]]
%%]




