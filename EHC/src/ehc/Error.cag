%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Error
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EH}Error} import(UU.Pretty,{%{EH}Base.Common},{%{EH}Ty}) export(Err(..), ErrL, mkErr_NamesNotIntrod, mkErr_NamesNotIntrod', mkNestErr)
%%]

%%[1 import({Error/AbsSyn})
%%]

%%[9 hs import({%{EH}Core})
%%]

%%[9
DERIVING *     : Show
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Nested error
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.mkNestErr hs
mkNestErr :: PP_Doc -> ErrL -> ErrL
mkNestErr wher errL | null errL = []
                    | otherwise = [Err_NestedIn wher errL]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Err construction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
mkErr_NamesNotIntrod' :: PP n => String -> [(n,Maybe [Range])] -> Err
mkErr_NamesNotIntrod' m ns = Err_NamesNotIntrod m (assocLMapKey pp ns)

mkErr_NamesNotIntrod :: String -> [HsName] -> Err
mkErr_NamesNotIntrod m ns = mkErr_NamesNotIntrod' m (zip (map pp ns) (repeat Nothing))
%%]
