%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[(8 codegen grin) hs module {%{EH}GrinCode.ToCil} export(grin2cil)
%%]
%%[(8 codegen grin) hs import(Language.Cil)
%%]

%%[(8 codegen grin) ag import({GrinCode/AbsSyn})
%%]

%%[(8 codegen grin) hs import(Debug.Trace)
%%]
%%[(8 codegen grin) hs import(Data.List((\\)), Data.Maybe, qualified Data.Map as Map, qualified Data.Set as Set, Data.Bits)
%%]
%%[(8 codegen grin) hs import(EH.Util.Pretty, EH.Util.Utils)
%%]
%%[(8 codegen grin) hs import({%{EH}Base.Common}, {%{EH}Base.Opts}, {%{EH}GrinCode})
%%]
%%[(8 codegen grin) hs import({%{EH}GrinCode.Common} hiding (Variable(..)), {%{EH}Config}, {%{EH}Silly})
%%]
%%[(8 codegen grin) hs import({%{EH}Cil.Common} (ctag2ConstrDottedName, hsn2TypeDottedName, ctag2ParamTypes, ctagTypeDef))
%%]

%%[(8 codegen grin)
WRAPPER GrAGItf
%%]

%%[(8 codegen grin) hs
grin2cil :: HptMap -> GrModule -> EHCOpts -> Assembly
grin2cil hptmap gr opts
  = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf gr)) (Inh_GrAGItf)
   in cilAssembly_Syn_GrAGItf t

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin)

ATTR GrAGItf GrModule [ | | cilAssembly : {Assembly} ]

ATTR GrGlobal GrGlobalL [ | | cilFields USE {++} {[]} : {[FieldDef]} ]

ATTR GrBind GrBindL [ | | cilMethods USE {++} {[]} : {[MethodDef]} ]

ATTR GrExpr GrPatLam GrVal GrValL GrTag [ | | cilCode USE {++} {[]} : {[MethodDecl]} ]
-- ATTR GrExpr GrPatLam GrVal GrValL GrTag [ | | localVars USE {++} {[]} : {[HsName]} ]

ATTR AllNT [ | | self : SELF ]

ATTR AllNTNoMod [ className : {DottedName} | | ]
ATTR AllNTNoMod [ ctags : {AssocL HsName CTag} | | ]

SEM GrModule
  | Mod lhs.cilAssembly = Assembly [] "EhcGenerated" (@loc.classDef : @loc.typeDefs)
        loc.classDef    = classDef Public @loc.className noExtends [] @globalL.cilFields (@loc.mainDef : @bindL.cilMethods) []
        loc.mainDef     = Method Static AssemblyVisible Void "AssemblyMain" []
                            [ entryPoint
                            , call StaticCallConv Object "" @loc.className "fun_main" []
                            , call StaticCallConv Void "mscorlib" "System.Console" "WriteLine" [Object]
                            , ret
                            ]
        loc.typeDefs     = map ctagTypeDef @ctagsMp
        loc.className   = hsn2TypeDottedName @moduleNm
        globalL.className = @loc.className
        bindL.className   = @loc.className
        -- pass ctag mapping without type names
        loc.ctags         = concatMap snd @ctagsMp
        globalL.ctags     = @loc.ctags
        bindL.ctags       = @loc.ctags


SEM GrGlobal
  | Global lhs.cilFields = [Field Static AssemblyVisible Object (hsnShowAlphanumeric @nm)]

SEM GrBind
  | Bind  lhs.cilMethods  = [Method Static AssemblyVisible Object (hsnShowAlphanumeric @nm) @loc.params @expr.cilCode]
          loc.params      = map (Param Object . hsnShowAlphanumeric) @argNmL
  | Rec   lhs.cilMethods  = error "Geen idee."

SEM GrExpr
  | Seq         lhs.cilCode = @expr.cilCode ++ @pat.cilCode ++ @body.cilCode
  | Unit        lhs.cilCode = debugComment @self @val.cilCode
  | UpdateUnit  lhs.cilCode = [no @self]
  | Case        lhs.cilCode = [no @self]
  | FetchNode   lhs.cilCode = [no @self]
  | FetchUpdate lhs.cilCode = [no @self]
  | FetchField  lhs.cilCode = [no @self]
  | Store       lhs.cilCode = [no @self]
  | Call        lhs.cilCode = [no @self]
  | FFI         lhs.cilCode = debugComment @self $ @argL.cilCode ++ ffcall @nm
  | Eval        lhs.cilCode = [no @self]
  | App         lhs.cilCode = [no @self]
  | Throw       lhs.cilCode = [no @self]
  | Catch       lhs.cilCode = [no @self]

SEM GrVal
  | Empty       lhs.cilCode = [no @self]
  | LitInt      lhs.cilCode = debugComment @self [ldc_i4 @int]
  | Tag         lhs.cilCode = [no @self]
  | Var         lhs.cilCode = [no @self]
  | Node        lhs.cilCode = debugComment @self $ @fldL.cilCode ++ @tag.cilCode
  | VarNode     lhs.cilCode = [no @self]
  | BasicNode   lhs.cilCode = debugComment @self $ [ldlocN $ hsnShowAlphanumeric @nm] ++ @tag.cilCode
  | EnumNode    lhs.cilCode = [no @self]
  | OpaqueNode  lhs.cilCode = [no @self]
  | PtrNode     lhs.cilCode = [no @self]
  -- TODO NodeAdapt in variant 10

SEM GrPatLam
  | Empty       lhs.cilCode = [no @self]
  | Var         lhs.cilCode = debugComment @self [stlocN $ hsnShowAlphanumeric @nm]
  | VarNode     lhs.cilCode = [no @self]
  | BasicNode   lhs.cilCode = debugComment @self [localsInit [Local Object @varName], stlocN @varName]
                loc.varName = hsnShowAlphanumeric @nm
  | EnumNode    lhs.cilCode = [no @self]
  | PtrNode     lhs.cilCode = [no @self]
  | OpaqueNode  lhs.cilCode = [no @self]
  | BasicAnnot  lhs.cilCode = debugComment @self [localsInit [Local Object @varName], stlocN @varName]
                loc.varName = hsnShowAlphanumeric @nm
  | EnumAnnot   lhs.cilCode = [no @self]
  | PtrAnnot    lhs.cilCode = [no @self]
  | OpaqueAnnot lhs.cilCode = [no @self]

SEM GrTag
  | Con         lhs.cilCode = debugComment @self [newobj "" (ctag2ConstrDottedName $ @loc.ctag) (ctag2ParamTypes @loc.ctag)]
                loc.ctag    = lookupTag @nm @lhs.ctags
  | Fun         lhs.cilCode = [no @self]
  | PApp        lhs.cilCode = [no @self]
  | App         lhs.cilCode = [no @self]
  | Unboxed     lhs.cilCode = [no @self]
  | Hole        lhs.cilCode = [no @self]
  | Rec         lhs.cilCode = [no @self]
  | World       lhs.cilCode = [no @self]
  | Any         lhs.cilCode = [no @self]
%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Helper functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[(8 codegen grin) hs

no a = comment $ "TODO   " ++ show a

-- Idea: replace debugComment in the AG by an attribute that gets initialized
-- to debugComment or fakeComment, according to some compiler option.
type DebugComment = Show a => a -> [MethodDecl] -> [MethodDecl]
debugComment, fakeComment :: DebugComment
debugComment a []  = [comment $ "NOP    " ++ show a]
debugComment a [m] = [comment $ "SINGLE " ++ show a, m]
debugComment a ms  = [comment $ "BEGIN  " ++ show a]
                     ++ ms ++
                     [comment $ "END    " ++ show a]
fakeComment = flip const

ffcall :: String -> [MethodDecl]
ffcall "primAddInt" = [add]

lookupTag :: HsName -> AssocL HsName CTag -> CTag
lookupTag n ts = case lookup n ts of
  Nothing -> error $ "Use of an undefined tag " ++ show n ++ "."
  Just t  -> t

%%]
