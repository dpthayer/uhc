%%[doesWhat doclatex

do not do \textit{APPLY} on variables that bind the result of a previous \textit{UNIT} of a P-node.
Instead, do a \textit{CALL} of the function if it is now saturated, or build a new P-node if it is undersaturated.

%%]


For each pattern
   UNIT (#P/needs/f x y) ;\r ->
   ...
   APPLY r a b
replace the APPLY expression by
   CALL f x y a b           if n==needs
   UNIT (#P/m/f x y a b)    if n< needs
where n = |a b|
      m = needs - n


  
And for each pattern
   p <- (#P/needs/f x y)
   ...
   STORE (A p a b)
replace the STORE expression by
   STORE (F/f x y a b)     if n==needs

   
TODO: And for each pattern
   p <- (#P/needs/f x y)
   ...
   CALL app p a b
replace the CALL expression by
   CALL f x y a b           if n==needs
(this pattern can occur if the inline transformation and the evalStored transformation are done before applyUnited.
Then, the STORE (A p a b) expression might have been combined with a subsequent EVAL, brought there by inlining,
and we'll have to deal with  CALL app p a b)
For the moment, the inline transformation is postponed till after applyUnited, so there is no urgency to fix this.


%%[(8 codegen grin wholeprogAnal) ag import({GrinCode/AbsSyn})
%%]
%%[(8 codegen grin wholeprogAnal) hs import (qualified Data.Map as Map, qualified Data.Set as Set)
%%]
%%[(8 codegen grin wholeprogAnal) hs import ({%{EH}Base.Common}, {%{EH}GrinCode.Common}, {%{EH}GrinCode}, {%{EH}Base.HsName} )
%%]
%%[(8 codegen grin wholeprogAnal) hs import(Debug.Trace)
%%]
%%[(8 codegen grin wholeprogAnal)
WRAPPER GrAGItf
%%]
%%[(8 codegen grin wholeprogAnal) hs module {%{EH}GrinCode.Trf.ApplyUnited} export(applyUnited)

applyUnited :: GrModule -> GrModule
applyUnited grmod = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf grmod))
                                         (Inh_GrAGItf)
                    in grTrf_Syn_GrAGItf t
%%]


%%[(8 codegen grin wholeprogAnal)
ATTR GrAGItf [ | | grTrf: GrModule ]
ATTR AllNT [ | | grTrf: SELF ]
%%]


%%[(8 codegen grin wholeprogAnal)


ATTR AllGlobal [ | | initialEnv USE {`Map.union`} {Map.empty} : {Map.Map HsName GrVal} ]

ATTR GrVal [ | | hasPTag : {Bool} ]

ATTR GrTag [ | | isPTag : {Bool} ]

SEM GrGlobal
  | Global    lhs.initialEnv  =  if @val.hasPTag
                                 then Map.singleton @nm @val.grTrf
                                 else Map.empty

SEM GrVal
  | Node      lhs.hasPTag  =  @tag.isPTag
  | * - Node  lhs.hasPTag  =  False

SEM GrTag
  | PApp      lhs.isPTag   =  True
  | *-PApp    lhs.isPTag   =  False

SEM GrModule
  | Mod       bindL.globalPnodes  =  @globalL.initialEnv


-- Environment passes information about variables that hold a P-node.

ATTR AllGrExpr  GrBind GrBindL [  globalPnodes : {Map.Map HsName GrVal}  | | ]

ATTR AllGrExpr  [  env : {Map.Map HsName GrVal}  | | ]

ATTR GrExpr [  | | mbUnitPNode : {Maybe GrVal} ]
                   
ATTR GrPatLam [ | | getName : {HsName} ]

ATTR GrVal [ | | hasPAppTag : {Bool} ]

SEM GrPatLam
  | Var       lhs.getName  =  @nm
  | * - Var   lhs.getName  =  error "ApplyUnited: getName from non-variable"

SEM GrVal
  | Node      lhs.hasPAppTag  =  isPAppTag @tag.grTrf
  | * - Node  lhs.hasPAppTag  =  False


SEM GrBind
  | Bind      expr.env     =  Map.empty

SEM GrExpr
  | Seq       body.env  =  maybe @lhs.env
                                 (\val -> Map.insert @pat.getName val @lhs.env)
                                 @expr.mbUnitPNode
                                 
  | Unit            lhs.mbUnitPNode    =  if @val.hasPAppTag
                                          then Just @val.grTrf
                                          else Nothing
  | * - Unit        lhs.mbUnitPNode    =  Nothing
 
  | App             lhs.grTrf          =  maybe @loc.grTrf
                                                id
                                                (do   -- in the Maybe monad
                                                 { node <- Map.lookup @nm @lhs.env
                                                 ; applyNode @nm @argL.grTrf node
                                                 })
                                                 
  | Store           lhs.grTrf          =  maybe @loc.grTrf
                                                id
                                                (do   -- in the Maybe monad
                                                 { _ <- @val.mbAname
                                                 ; let (v:vs) = @val.variables
                                                 ; node <- Map.lookup v @lhs.globalPnodes
                                                 ; let (GrVal_Node t ws) = node
                                                 ; let (GrTag_PApp needs name) = t
                                                 ; _ <- if needs==length vs then Just () else Nothing
                                                 ; return (GrExpr_Store (GrVal_Node (GrTag_Fun name) (ws++(map GrVal_Var vs))))
                                                 })

-- Auxiliary attributes needed for gathering

ATTR GrVal GrTag  [ | | mbAname : {Maybe HsName} ]
ATTR GrVal GrValL [ | | variables USE {++} {[]} : {[HsName]} ]

SEM GrVal
  | Node   lhs.mbAname      = @tag.mbAname
  | *-Node lhs.mbAname      = Nothing
  
SEM GrTag
  | App    lhs.mbAname      = Just @nm
  | *-App  lhs.mbAname      = Nothing

SEM GrVal
  | Var    lhs.variables = [ @nm ]



%%]

%%[(8 codegen grin wholeprogAnal) hs


applyNode nm2 flds2 node@(GrVal_Node (GrTag_PApp needs nm) flds1) 
  =  let n = length flds2
     in  if n<needs
         then Just (GrExpr_Unit  (GrVal_Node (GrTag_PApp (needs-n) nm) (flds1++flds2)) GrType_None)
         else if n==needs
              then Just (GrExpr_Call  nm  (flds1++flds2))
              else Nothing   -- oversaturated situation, forget it

%%]
