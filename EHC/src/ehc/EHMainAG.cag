%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell interface to AG generated code for compiler
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EHC}MainAG} import(Data.Char,Data.List as List,UU.Pretty,{%{BASE}Common},{%{EHC}Opts}, {%{AST}Ty},{%{EHC}Gam},{%{AST}Error},{%{ERR}Pretty},{%{TY}FitsIn},{%{TY}FitsInCommon},{%{TY}Pretty},{%{AST}AbsSyn})
%%]

%%[2 hs import({%{EHC}Cnstr},{%{EHC}Substitutable},Data.Maybe)
%%]

%%[3 hs import({%{TY}Quantify},{%{TY}Instantiate})
%%]

%%[4 hs import({%{BASE}Debug})
%%]

%%[4_2 hs import(qualified Data.Set as Set,{%{EHC}GamUtils},{%{TY}ElimAlts},{%{TY}FreshVar})
%%]

%%[8 hs import(EH.Util.Utils(groupSortOn))
%%]

%%[8 hs import(qualified Data.Map as Map,{%{AST}Core},{%{CORE}Utils},{%{CORE}Pretty})
%%]

%%[9 hs import(qualified Data.Set as Set,{%{EHC}Pred},{%{CORE}Subst})
%%]

%%[11 hs import({%{TY}ElimEqual},{%{EHC}GamUtils})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Import of all separate aspects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 import(AbsSynAG,Pretty,PrettyAST,EHRulerRules,Infer,InferExpr,InferPatExpr,InferTyExpr,ExtraChecks,GatherError)
WRAPPER AGItf
%%]

%%[2 import(Uniq)
%%]

%%[5 import(InferCaseExpr,InferData)
%%]

%%[6 import(InferKiExpr)
%%]

%%[8 import(GenCore)
%%]

%%[9 import(ResolvePred,InferClass)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
ATTR AllNT AGItf [ opts: EHCOpts | | ]
%%]

%%[8
ATTR AGItf [ baseName: String | | ]
%%]
