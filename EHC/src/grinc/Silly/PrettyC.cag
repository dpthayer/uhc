%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Prettyprint Silly program as C
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs module {%{GRIN}Silly.PrettyC} import(Data.List(intersperse), UU.Pretty, EH.Util.PPUtils, qualified Data.Map as Map, {%{GRIN}GRINCCommon} hiding (Variable(..)),{%{GRIN}Silly}, {%{GRIN}BuiltinPrims}, {%{GRIN}Config}) export(prettyC)
%%]
%%[8 hs import({%{EH}Base.Common})
%%]
%%[8 hs import({%{EH}Base.Opts})
%%]
%%[8 import({Silly/AbsSyn})
%%]

%%[8 hs
prettyC :: EHCOpts -> SilModule -> PP_Doc
prettyC opts silmod
  = let t = wrap_SilModule (sem_SilModule silmod)
                           (Inh_SilModule { opts_Inh_SilModule = opts
                                          }
                           )
     in  prettyC_Syn_SilModule t

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options to adapt the structure of the generated code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[8

WRAPPER SilModule

ATTR SilModule
  [ opts : {EHCOpts} | | ]

ATTR Functions Function Statements Statement Alternatives Alternative
  [ optTraceCall     : {Bool} -- when True, function entrance/exit is logged
    optCaseDefault   : {Bool} -- when True, error messages are given as default case for each switch
    optOwnCalls      : {Bool} -- when True, all Silly functions will be part of 1 C function, using a custom calling mechanism for Silly functions
  | | ]

SEM SilModule
  | SilModule  loc.optTraceCall   = ehcOptGenTrace       @lhs.opts
               loc.optCaseDefault = ehcOptGenCaseDefault @lhs.opts
               loc.optOwnCalls    = ehcOptGenOwnCalls    @lhs.opts || @loc.optGenAsmSP
               loc.optGenAsmSP    = ehcOptGenAsmSP       @lhs.opts

{
optTraceAssign = False
}
%%]


%%[8
ATTR SilModule Functions Function Statements Statement Alternatives Alternative Value Variable Constant
         [ | | prettyC USE {>-<} {empty} : PP_Doc ]

ATTR Functions Function [ | | protoC USE {>-<} {empty} : {PP_Doc} ]

ATTR Values [ | | prettyCs : {[PP_Doc]} ]

ATTR Variable [ | | prettyPtr : {PP_Doc}  ]

ATTR Functions Function Statements Statement Alternatives Alternative
         [  |  retNr : {Int} |  ]
         
SEM SilModule
  | SilModule   lhs.prettyC   = preambule
                                >-< comment "Tag constants"
                                >-< ppVertically (map constantDefinition @constants)
                                >-< text ""
                                >-< comment "Global table"
                                >-< ppVertically (map variableDeclaration @variables)
                                >-< text ""
                                >-< comment "Main C function"
                                >-< @loc.cMain
                                >-< text ""
                                >-< comment "Function definitions"
                                >-< if @loc.optOwnCalls
                                     then  @loc.silMain1
                                           >-< text ""
                                           >-< @functions.prettyC
                                           >-< @loc.silMain2
                                     else  @functions.protoC
                                           >-< text ""
                                           >-< @loc.silMain1
                                           >-< @loc.silMain2
                                           >-< text ""
                                           >-< @functions.prettyC
                                >-< text ""
                functions.retNr = 3
                loc.silMain1 =  text "int silly_main()"
                                >-< text "{"
                                >-< ppWhen @loc.optGenAsmSP (text "register GrWord* SP asm (\"%esp\");")
                                >-< indent 4 (    callSillyFunctionFromC @loc.optOwnCalls 1 "initialize"
                                             >-<  callSillyFunctionFromC @loc.optOwnCalls 2 "fun_main"
                                             >-<  "return 0;"
                                             )
                loc.silMain2 =  text "}"
                loc.cMain    =  text "int main(int argc, char** argv)"
                                >-< text "{"
                                >-< indent 4 (    text "main_Sil_Init1(argc, argv);"
                                             >-<  text "main_Sil_Run(argc, argv);"
                                             >-<  text "return main_Sil_Exit(argc, argv);"
                                             )
                                >-< text "}"


SEM Function
  | Function    lhs.prettyC   = methodHeader @lhs.optOwnCalls @lhs.optTraceCall @name @parameters
                                >-< indent 4 (   ppWhen @tailJumps jumpPrepare
                                             >-< methodLocals @locals
                                             >-< @body.prettyC
                                             )
                                >-< methodFooter @lhs.optOwnCalls @lhs.optTraceCall @name

                lhs.protoC    = methodHead @name @parameters >|< ";"

SEM Statement
  | Comment     lhs.prettyC   = comment @comment
  | Assignment  lhs.prettyC   = assignment @dest.prettyC @source.prettyC
  | Increment   lhs.prettyC   = assignincr @dest.prettyC @source.prettyC
  | Switch      lhs.prettyC   = switch @lhs.optCaseDefault @scrutinee.prettyC @body.prettyC
  | Call        lhs.prettyC   = callSillyFunctionFromSilly @lhs.optOwnCalls @lhs.retNr @name @args.prettyCs
  | Jump        lhs.prettyC   = jumpSillyFunctionFromSilly @lhs.optOwnCalls @name
  | Return      lhs.prettyC   = returnFromSillyFunction @lhs.optOwnCalls @diff
  | Enter       lhs.prettyC   = error "Enter obsolete"
  | Leave       lhs.prettyC   = error "Leave obsolete"

SEM Statement
  | Call        lhs.retNr     = @lhs.retNr + 1

SEM Alternative
  | Alternative lhs.prettyC   = alternative @when.prettyC @body.prettyC

SEM Values
  | Nil         lhs.prettyCs  = []
  | Cons        lhs.prettyCs  = @hd.prettyC : @tl.prettyCs

SEM Value
  | Con         lhs.prettyC   = @con.prettyC
  | Var         lhs.prettyC   = @var.prettyC
  | Call        lhs.prettyC   = ( maybe (callCfunction @name)
                                        fromSillyPrim
                                        (lookupPrim BackendSilly @name)  ) @args.prettyCs
  | Alloc       lhs.prettyC   = "heapalloc(" >|< show @size >|< ")"

SEM Constant
  | LiteralInt  lhs.prettyC   = text (show @value)
  | LiteralStr  lhs.prettyC   = "((GrWord)" >|< text (show @value) >|< ")"
  | Alias       lhs.prettyC   = text @name

SEM Variable
  | Global
    Local
    Param       lhs.prettyC   = text @name
                lhs.prettyPtr = "((Pointer)" >|< text @name >|< ")"
  | SP          lhs.prettyC   = text "SP"
                lhs.prettyPtr = text "SP"
  | SPOffset    lhs.prettyC   = "((GrWord)(" >|< text "SP + " >|< show @dist >|< "))"
                lhs.prettyPtr = "(" >|< text "SP + " >|< show @dist >|< ")"
  | RP          lhs.prettyC   = text "RP"
                lhs.prettyPtr = text "RP"
  | Subs        lhs.prettyC   =                   @array.prettyPtr >|< "[" >|< @index.prettyC >|< "]"
                lhs.prettyPtr = "((Pointer)(" >|< @array.prettyPtr >|< "[" >|< @index.prettyC >|< "]" >|< "))"
  | SubsPtr     lhs.prettyC   = "((Pointer)(" >|< @array.prettyPtr >|< "[" >|< @index.prettyC >|< "]" >|< "))"
                lhs.prettyPtr = "((Pointer)(" >|< @array.prettyPtr >|< "[" >|< @index.prettyC >|< "]" >|< "))"
  | None        lhs.prettyC   = error "attempt to use Variable_None as value"
                lhs.prettyPtr = error "attempt to use Variable_None as pointer"


%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Building a C program
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 hs


label :: String -> PP_Doc
label nm = nm >|< ":"

commaSeparated :: [String] -> String
commaSeparated = concat . intersperse ", "

macroDefinition :: PP_Doc -> PP_Doc -> PP_Doc
macroDefinition nm body
 = "#define" >#< nm >#< body

decrementWith p n
 = incrementWith p (-n)

incrementWith p n
 = if n>0
   then p >#< "+=" >#< n >#< ";"
   else if n<0
   then p >#< "-=" >#< (-n) >#< ";"
   else empty

declareNames :: String -> [String] -> PP_Doc
declareNames tp ns
 = tp >#< commaSeparated ns >|< ";"

declareName :: String -> String -> String
declareName tp nm
 = tp ++ (' ' : nm)

trace :: String -> PP_Doc
trace s
 = text ("printf(\"" ++ s ++ " SP=%d\\n\", SP-Stack); fflush(stdout);")

caseDefault :: PP_Doc -> PP_Doc
caseDefault x
 =  "default: printf(\"undefined case for " >|< x >|< " : %d\\n\", " >|< x >|< "); exit(1);"

comment :: String -> PP_Doc
comment s = text ("/* " ++ s ++ " */")

callCfunction ::  String -> [PP_Doc] -> PP_Doc
callCfunction f ps
 = f >|< "(" >|< ppHorizontally (intersperse (text ", ") ps) >|< ")"

callSillyFunctionFromC :: Bool -> Int -> String -> PP_Doc
callSillyFunctionFromC False _ nm
 = nm >|< "();"
callSillyFunctionFromC True n nm
 = let lab = "retlab" ++ show n
   in  "*--SP = (GrWord)(&&" >|< lab >|< ");"   -- return address
       >-< "*--SP = (GrWord)0;"                 -- link
       >-< "goto" >#< nm >|< ";"                -- do the call
       >-< label ("retlab" ++ show n)           -- return here
 
 
callSillyFunctionFromSilly ::  Bool -> Int -> String -> [PP_Doc] -> PP_Doc
callSillyFunctionFromSilly False _ nm pars
 = callCfunction nm pars >|< ";"
callSillyFunctionFromSilly True n nm _
 = let lab = "retlab" ++ show n
   in  "SP[1] = (GrWord)(&&" >|< lab >|< ");"   -- return address
       >-< ppWhen optTraceAssign
           (" printf(\"def " >#< lab >#< " = %d\\n\", &&" >#< lab >#< "); fflush(stdout);")
       >-< "goto" >#< nm >|< ";"                -- do the call
       >-< label ("retlab" ++ show n)           -- return here
 
returnFromSillyFunction False _ 
 = text ""
returnFromSillyFunction True n
 = ppWhen optTraceAssign
          (" printf(\"return to %d\\n\", (SP[-" >|< show n >|< "])"  >#< "); fflush(stdout);")
   >-< "goto *(SP[-" >|< show n >|< "]);"
 
 
 
 

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Semantic functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%[8 hs

preambule :: PP_Doc
preambule
 = comment "Generated C code"
   >-< text "#include \"rts.h\""
   >-< text ""

constantDefinition :: (String,Int) -> PP_Doc
constantDefinition (x,n)
 = macroDefinition (text x) (text (show n))

variableDeclaration :: String -> PP_Doc
variableDeclaration x
 = "GrWord" >#< text x >|< ";"

methodHead :: String -> [String] -> PP_Doc
methodHead nm params
 =  let parameters = if null params
                      then "void"
                      else commaSeparated (map (declareName "GrWord") params)
    in  "void" >#< nm >|< "(" >|< parameters >|< ")"

methodHeader :: Bool -> Bool -> String -> [String] -> PP_Doc
methodHeader False optTrace nm params
 =  methodHead nm params
    >#< "{"
    >-< ppWhen optTrace (trace ("enter " ++ init (tail (show nm))))
methodHeader True optTrace nm _
 =  label nm
    >-< ppWhen optTrace (trace ("enter " ++ init (tail (show nm))))

methodFooter ::  Bool -> Bool -> String -> PP_Doc
methodFooter False optTrace nm
 =  ppWhen optTrace (trace ("leave "++init (tail (show nm))))
    >-< text "}"
    >-< text ""
methodFooter True _ _
 = text ""

methodLocals :: [String] -> PP_Doc
methodLocals ns
 = ppUnless (null ns)
            (   comment "Local names"
            >-< declareNames "GrWord" ns
            )

jumpPrepare :: PP_Doc
jumpPrepare
 =  pp machDepCForTailcallEnter

jumpSillyFunctionFromSilly :: Bool -> String -> PP_Doc
jumpSillyFunctionFromSilly False nm
 =  machDepCForTailcallLeave1
    >#< "register void* _tail_call_dest = ((void*)" >|< nm >|< ");"
    >#< machDepCForTailcallLeave2
    >-< "goto *_tail_call_dest;"
jumpSillyFunctionFromSilly True nm
 = "goto" >#< nm >|< ";"





assignment :: PP_Doc -> PP_Doc -> PP_Doc
assignment v e
 = v
   >#< "="
   >#< e
   >|< ";"
   >|< ppWhen optTraceAssign
              (" printf(\"assignment" >#< show v >#< "=" >#< e >#< " : %d at %d\\n\", " >#< show v >#< ", &(" >#< show v >#<  ")); fflush(stdout);")

assignincr :: PP_Doc -> PP_Doc -> PP_Doc
assignincr v e
 = v
   >#< "+="
   >#< e
   >|< ";"
   >|< ppWhen optTraceAssign
              (" printf(\"assignincr" >#< show v >#< "+=" >#< e >#< " : %d at %d\\n\", " >#< show v >#< ", &(" >#< show v >#<  ")); fflush(stdout);")

switch :: Bool -> PP_Doc -> PP_Doc -> PP_Doc
switch optDef scrutinee body
 = "switch ("
   >|< scrutinee
   >|< ")"
   >#< "{"
   >-< indent 4 body
   >-< ppWhen optDef (indent 4 (caseDefault scrutinee))
   >-< "}"

alternative :: PP_Doc -> PP_Doc -> PP_Doc
alternative when body
 = "case"
   >#< when
   >|< ":"
   >-< indent 4 (body >-< "break;")


%%]
