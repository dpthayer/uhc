Drop bindings of which static analysis has revealed that they return AbsBottom.
Also, remove corresponding alternatives from Case expressions.

For example, if f returns AbsBottom, remove cases F/f and P/f from scrutinizations.

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[8 import({GrinCode/AbsSyn})
%%]

%%[8.wrapper
WRAPPER GrAGItf
%%]

%%[8 hs module {%{GRIN}GrinCode.Trf.DropDeadBindings}
%%]

%%[8 hs import({%{EH}Base.Common}, {%{GRIN}GRINCCommon}, {%{EH}GrinCode}, Data.Maybe) export(dropDeadBindings)
dropDeadBindings :: (GrModule,HptMap) -> GrModule
dropDeadBindings (input,hptMap)
  = let inh = Inh_GrAGItf {hptMap_Inh_GrAGItf=hptMap}
        syn = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf input)) inh
    in  grTrf_Syn_GrAGItf syn

%%]

%%[8
ATTR GrAGItf [ hptMap: HptMap | | grTrf: GrModule ]
ATTR AllNT [ hptMap: HptMap | | grTrf: SELF ]
%%]


%%[8
ATTR AllBind [ | | isDead USE {&&} {True}: Bool ]

SEM GrBind
  | Bind    lhs.isDead =  isBottom (getEnvVar @lhs.hptMap (getNr @nm))
  
SEM GrBindL
  | Cons               lhs.grTrf  =  if @hd.isDead
                                      then @tl.grTrf
                                      else @hd.grTrf : @tl.grTrf   
%%]


%%[8
ATTR GrAlt GrPatAlt GrTag [ | | isDead: Bool ]

SEM GrAlt
  | Alt    lhs.isDead = @pat.isDead
  
SEM GrPatAlt
  | LitInt
    Otherwise          lhs.isDead = False
  | * - LitInt
        Otherwise      lhs.isDead = @tag.isDead
  
SEM GrTag
  | Fun
    PApp
    App                lhs.isDead  =  isBottom (getEnvVar @lhs.hptMap (getNr @nm))
  | * - Fun PApp App   lhs.isDead  =  False

SEM GrAltL
  | Cons               lhs.grTrf  =  if @hd.isDead
                                      then @tl.grTrf
                                      else @hd.grTrf : @tl.grTrf   

%%]
