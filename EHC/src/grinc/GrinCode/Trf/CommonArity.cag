Used in SplitFetch.cag


%%[8 hs

fromJust' s Nothing = error $ "fromJust':" ++ s
fromJust' _ (Just v) = v

tagArity :: GrTag -> Map.Map Int Int -> Int
tagArity (GrTag_Fun       nm) arityMap = fromJust' ("Fun " ++ show nm ++ "niet in aritymap " ++ show arityMap)(Map.lookup (getNr nm) arityMap)
tagArity (GrTag_App       nm) arityMap = fromJust' ("App " ++ show nm ++ "niet in aritymap " ++ show arityMap)(Map.lookup (getNr nm) arityMap)
tagArity (GrTag_PApp n    nm) arityMap = fromJust' ("Pap " ++ show nm ++ "niet in aritymap " ++ show arityMap)(Map.lookup (getNr nm) arityMap) - n
tagArity (GrTag_Con ann _ nm) _        = gtannArity ann
tagArity  GrTag_Unboxed       _        = 1
tagArity  GrTag_Any           _        = 0
tagArity  GrTag_Hole          _        = 0
tagArity t                    _        = error ("CommonArity: tagArity " ++ show t)

%%]

%%[8

ATTR AllBind [ | | genArities USE {`Map.union`} {Map.empty}: {Map.Map Int Int}  ]
ATTR AllBind AllGrExpr [ arityMap : {Map.Map Int Int} | | ]

SEM GrBind
  | Bind   lhs.genArities = Map.singleton (getNr @nm) (length @argNmL)

SEM GrModule
  | Mod  bindL.arityMap = @bindL.genArities

%%]
