%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%[8 import({GrinCode/AbsSyn})
%%]

%%[8 hs module Cmm.FromGrin import({%{GRIN}GRINCCommon}, Data.List(nub), Data.Maybe, {%{EH}GrinCode}, {%{GRIN}Primitives}, Cmm.CmmBuilding) export(grin2cmm,CmmUnit(..))
grin2cmm :: HsName -> GrModule -> Bool -> CmmUnit
grin2cmm e gr emitTraceInfo = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf gr))
                                                   (Inh_GrAGItf { entryNm_Inh_GrAGItf = e
                                                                , doFunctionTrace_Inh_GrAGItf = emitTraceInfo
                                                                }
                                                   )
                              in cmmUnit_Syn_GrAGItf t
%%]

%%[8 hs import({%{EH}Base.Common} hiding "((<+>))") 
%%]
%%[8 hs import(qualified Data.Map as Map, Data.Bits)
%%]

%%[8.wrapper
WRAPPER GrAGItf
%%]

%%[8 import("../GrLastExpr","FromGrin/TagInfo","FromGrin/ValueInfo","FromGrin/ReturnSize")
%%]

%%[8 import("FromGrin/Primitives","FromGrin/ImportExport","FromGrin/Globals")
%%]

%%[8 import("FromGrin/ExceptionHandlers","FromGrin/ToCmm","FromGrin/TraceInfo")
%%]
