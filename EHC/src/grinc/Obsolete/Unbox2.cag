%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Unbox Int and Char
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 import({GrinCode/AbsSyn})
%%]
%%[8 hs import(qualified Data.Set as Set)
%%]
%%[8 hs module {%{GRIN}GrinCode.Trf.Unbox2}
%%]
%%[8 hs import({%{EH}Base.Common}, {%{EH}Base.Builtin}, {%{GRIN}GRINCCommon}, {%{EH}GrinCode})
%%]

%%[8 hs export(unbox2)
unbox2 :: (GrModule,HptMap) -> GrModule
unbox2 (input,hptMap)
  = let inh = Inh_GrAGItf {hptMap_Inh_GrAGItf=hptMap}
        syn = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf input)) inh
    in  trf_Syn_GrAGItf syn

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapper
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8.wrapper
WRAPPER GrAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation: replace #C/Int and #C/Char by #U
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
ATTR GrAGItf [ | | trf: GrModule ]
ATTR AllNT [ | | trf: SELF ]

ATTR GrAGItf AllNT [ hptMap: {HptMap} | | ]

%%]

%%[8 hs


typeCanbeUnboxed :: HsName -> Bool
typeCanbeUnboxed nm 
  =   nm == hsnInt  ||  nm == hsnChar


tagCanbeUnboxed :: HptMap -> GrTag -> Bool
tagCanbeUnboxed hptMap gt
  = case gt of
      GrTag_Con _ _ nm -> typeCanbeUnboxed nm
      _                -> False

varCanbeUnboxed :: HptMap -> HsName -> Bool
varCanbeUnboxed hptMap (HNmNr n _)
  =  case getEnvVar hptMap n of
      AbsTags set -> case Set.elems set of
                        [tag] -> tagCanbeUnboxed hptMap tag
                        _     -> False
      _           -> False
      
valCanbeUnboxed :: HptMap -> GrVal -> Bool
valCanbeUnboxed hptMap (GrVal_Var v) = varCanbeUnboxed hptMap v
valCanbeUnboxed hptMap (GrVal_Tag t) = tagCanbeUnboxed hptMap t
valCanbeUnboxed hptMap val           = error ("Unbox2: valCanbeUnboxed unexpected case" ++ show val)

%%]


%%[8

SEM GrVarL [ | | headCanbeUnboxed : {Bool} ]
  | Nil lhs. headCanbeUnboxed = False
  | Cons lhs.headCanbeUnboxed = @hd.varCanbeUnboxed
  
SEM GrVar [ | | varCanbeUnboxed : {Bool} ]
  | KnownTag  lhs.varCanbeUnboxed = tagCanbeUnboxed @lhs.hptMap @tag.trf
  | Var       lhs.varCanbeUnboxed = varCanbeUnboxed @lhs.hptMap @nm
  | Ignore    lhs.varCanbeUnboxed = False

SEM GrPatAlt
  | Node    lhs . trf   =  if tagCanbeUnboxed @lhs.hptMap @tag.trf
                            then GrPatAlt_Node GrTag_Unboxed @fldL
                            else @trf
            
SEM GrPatLam                
  | VarNode lhs . trf   =  if @fldL.headCanbeUnboxed
                            then GrPatLam_VarNode (GrVar_KnownTag GrTag_Unboxed :tail @fldL.trf)
                            else @trf

SEM GrVal
  | Node     lhs . trf  =  if tagCanbeUnboxed @lhs.hptMap @tag.trf
                            then GrVal_Node GrTag_Unboxed @fldL.trf
                            else @trf
  | VarNode  lhs . trf  =  if valCanbeUnboxed @lhs.hptMap (head @fldL.trf)
                            then GrVal_Node GrTag_Unboxed (tail @fldL.trf)
                            else @trf
                            
SEM GrExpr
  | FetchField lhs . trf = maybe @trf
                                 (\t-> if tagCanbeUnboxed @lhs.hptMap t  
                                        then GrExpr_FetchField @nm @offset (Just GrTag_Unboxed)
                                        else @trf
                                 )
                                 @mbTag
  | Case       lhs . trf = GrExpr_Case @val.trf (skipDuplicUnbox @altL.trf)
  
{
skipDuplicUnbox [] = []	
skipDuplicUnbox (a@(GrAlt_Alt (GrPatAlt_Tag GrTag_Unboxed) e):as) = a : skipEveryUnbox  as
skipDuplicUnbox (a                                           :as) = a : skipDuplicUnbox as

skipEveryUnbox  [] = []	
skipEveryUnbox  (  (GrAlt_Alt (GrPatAlt_Tag GrTag_Unboxed) e):as) =     skipEveryUnbox as
skipEveryUnbox  (a                                           :as) = a:  skipEveryUnbox as
}
  
  
  
%%]
