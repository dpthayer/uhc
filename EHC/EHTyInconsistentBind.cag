% $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to check/elimination for/of inconsistent/ binds
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6_2 hs import(EHCommon,EHTy,EHError) export(tyElimBinds,tyLElimBinds)
%%]


%%[6_2.WRAPPER import(EHTyAbsSyn)
WRAPPER TyAGItf
%%]

%%[6_2.tyElimBinds hs
tyElimBinds :: Ty -> (Ty,ErrL)
tyElimBinds ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf)
     in   (repl_Syn_TyAGItf t,errL_Syn_TyAGItf t)

tyLElimBinds :: TyL -> (TyL,ErrL)
tyLElimBinds = foldr (\t (tl,el) -> let (t',e) = tyElimBinds t in (t':tl,e++el)) ([],[])
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Check/elim
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6_2
ATTR TyAGItf AllAllTy [ | | errL USE {++} {[]}: ErrL ]
ATTR AllAllTy [ | | repl: SELF  ]
ATTR TyAGItf  [ | | repl: Ty    ]

SEM Ty
  | Bind            (lhs.repl,loc.errL)     =   case @tyL.replL of
                                                  l@(_:_:_) -> (mkTyVar @tv,[Err_InconsistentBind @lhs.self @tv l])
                                                  [t] -> (t,[])
                    lhs     .   errL        =   @errL ++ @tyL.errL
%%]

%%[6_2
ATTR TyL [ | | replL: TyL ]

SEM TyL
  | Cons            lhs     .   replL       =   @hd.repl : @tl.replL
  | Nil             lhs     .   replL       =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Orig type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[6_2
ATTR AllTy [ self: Ty | | ]

SEM TyAGItf
  | AGItf           ty      .   self        =   @ty.repl
%%]

