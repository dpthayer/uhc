%%[chapter
\chapter{Implementation}
\label{cha:implementation}
In the previous chapters we discussed the generation of Silly (\refS{sec:ehc-silly}). In order to generate executables from Silly code, a backend that outputs Low Level Virtual Machine (LLVM) assembly is added to EHC. In this chapter, we discuss the generation of LLVM code from a Silly abstract syntax tree (AST). In particular, we look at the representation of closures in the generated code (\refS{sec:impl-memory-representation}), the transformation from Silly to LLVM assembly (\refS{sec:impl-silly2llvm}), and the runtime system used (\refS{sec:impl-rts}).  

\section{Implementation of GRIN nodes}
\label{sec:impl-memory-representation}
Silly inherits nodes from GRIN. A node consists of a set of fields, whereas the first field always is a tag and the rest are payload fields. Silly implements nodes with an array. For EHC variant~8, the starting point for LLVM incorporation, possible payload values are literal integers or pointers to other nodes.

Nodes are represented in memory in an uniform way. No matter which type of values are stored in the payload field, each node is represented as a |GrWord| sequence. A |GrWord| is defined as a signed integer with exactly the same bitsize as a native pointer of the target architecture and is comparable to the C99 type \texttt{intptr\_t}. This allows us to store any possible tag or payload value in a |GrWord|. For example, on a 64 bit platform, a GrWord is a 64 bit integer. The node representation of a Haskell list cons operator, consisting of a tag, a pointer to the content, and a pointer to the next list node, is 3 |GrWord| values in size (or 24 bytes). On a 32 bit platform, where a |GrWord| is 32 bits in size, the same node would take up 12 bytes of memory.

The uniform representation wastes memory when storing a value which fits in less memory, but allows easy typing of the Silly program (see \refS{sec:impl-typing}) and makes overwriting a closure with its evaluation result type correct.

\section{Transforming Silly to LLVM assembly}
\label{sec:impl-silly2llvm}
The generation of LLVM assembly is divided in two separate tasks: 1) inferring types for Silly variables, values, and constants and 2) transforming a Silly program to a LLVM program by selecting the correct LLVM instructions. Both tasks are performed simultaneously during transformation from Silly to LLVM.

\subsection{Typing Silly}
\label{sec:impl-typing}
Early in the EHC pipeline, types occurring in a program are erased and subsequent intermediate representations are implicitly typed. LLVM assembly is strongly typed, therefore, we need to infer types from the Silly program.

\begin{figure}[htbp]
	\hsbox{
		\begin{code}
			data LLVMType
			  =  LLVMInt Int
			  |  Pointer LLVMType
			  |  Array Int LLVMType
			  |  Label
			  |  Void
		\end{code}
	}
	\caption{Data type for LLVM assembly types.}
	\label{fig:data-llvm-types}  
\end{figure}

Types are encoded by a Haskell data type, which is shown in \refF{fig:data-llvm-types}. The types that can be encoded with the data type are a subset of possible LLVM assembly types because not all are needed. The |LLVMInt| constructor corresponds to an integer value of some bit size. The |Pointer| constructor represents a pointer to another |LLVMType|, allowing any level of indirection, although currently a maximum of 2 levels is used in the generated code. We use C syntax for pointers (postfix \texttt{*}) to abbreviate the |Pointer| construct. The |Array| constructor corresponds to an array of the size of the first parameter. Array types are only used to type C strings. |Label| refers to a branch target and |Void| encodes the absence of a type.

The |LLVMInt| constructor is platform dependent, differing in bit size for architectures with different pointer sizes. To describe the type inference of Silly in a platform neutral way, we use |GrWord| as an alias for a |LLVMInt| constructor where the parameter is the bit size of a native pointer on the architecture.

Each Silly statement can be typed without contextual information like a typing environment. This is possible due to the following assumptions made in Silly:
\begin{itemize}
  \item Global variables are of the type |GrWord**|. Statically, a memory block of the size of a native pointer is allocated. In this block, a pointer to a dynamically allocated global closure is stored. This scheme is inefficient, as the global closure could be allocated statically because the size and content are known at compile time. Still the performance loss is small, as the heap allocation for global variables is very small compared to the heap allocations for local closures.
  \item Local variables are of the type |GrWord*|. A local variable is implemented as a |GrWord| of memory allocated on the stack. Local variables are used for storage of tags, integers, and pointers to closures. If a pointer is stored in a local variable, it needs to be cast to an integer first, without loss of precision. When a pointer is read from the local variable, it needs to be cast back to a pointer before it is used.

  \item Function arguments are of the type |GrWord| and the function is responsible for casting a parameter to a |GrWord*| if needed. 

The choice to pass all parameters as |GrWord| types is because of an option in  Silly to manage its own call stack (note: this option is disabled when generating LLVM code). The Silly call stack is defined in the runtime system as an array of |GrWord| elements. Function parameters have the |GrWord| type to avoid casts when pushing function arguments on the stack.  

  \item Function calls can be either a statement or a value. The statement function call is used for calling other Silly functions. These functions have the return type |Void|, as they return values in the global RP array (\refS{sec:ehc-silly}).

Value function calls are calls to foreign functions. These functions use the C calling convention and return a non-void value. The type of the return value is always a |GrWord|.
  \item Allocations are handled as a foreign function and return a pointer to the allocated memory cast to the |GrWord| type.
  \item Constant integers and tags are of the type |GrWord|.
\end{itemize}

For any semantically correct abstract syntax tree of a Silly statement, each leaf of the tree matches with one of the above cases. Each other element in the tree is typeable with the types of its children and knowledge about the node itself. An example of this process is shown in \refF{fig:silly-type-example} where we type the  values, variables, and constants of the Silly statement '\inlCode{C}{i4 := foreign call primSubInt(x78, p1[1]);}'. This statement assigns the return value of the primSubInt call to the local variable $i4$. The first parameter of the foreign function call is the local variable $x78$, whereas the second parameter is the first payload field of parameter $p1$ .In \refF{fig:silly-type-example} we show the abstract syntax tree of the statement in boxes and the synthesized type attribute $\tau$ in circles.

\begin{figure}[tbhp]
  \begin{centering}
    \input{Silly_type_example.tex}
    \caption{Bottom-up typing of a Silly statement }
    \label{fig:silly-type-example}
  \end{centering}
\end{figure}

We start the typing traversal in the left most leaf of the abstract syntax tree, the local variable $i4$. Each possible leaf value is a base case, thus we are able to deduce the type of the local variable from the known assumptions. Indeed, itÂ´s type is listed as |GrWord*|. 

The second leaf of the abstract syntax tree is the local variable $x78$. Again, local variables always have the type |GrWord*| and thus this value is given to the synthesized attribute $\tau$ of this node. The parent of the leaf is a 'Variable Value' node, which has the semantics of loading a value from a pointer. It infers its type by removing a pointer indirection of the type of its child. This results in a |GrWord| value.

The last leaf of the tree is the parameter variable $p1$. Parameters to functions are passed as a |GrWord|, making this the type of the leaf node. The parent of the leaf node is an array indexing operator, selecting the first field of its child node. For the first time, a type mismatch occurs. The indexing operator expects a pointer type as type of the child, while the child is of the type |GrWord|. The generated code for the indexing operator coerces the type of the child by interpreting the value of the child as a pointer. On this coerced argument indexing is performed and a pointer to the first field is returned, resulting in a value of the |GrWord*| type. When traversing up from the array index node, we encounter a 'Variable Value' node, which dereferences the pointer and therefore the type |GrWord| is assigned to $\tau$. 

Finally, the call node is easily typed, as foreign function calls always return a value of the |GrWord| type. This concludes the typing of all values, variables, and constructors of this example statement. 

The bottom-up type inferring algorithm is very suitable for an attribute grammar implementation and we implemented it using the Utrecht University Attribute Grammar compiler~\cite{baars:04}, a preprocessor for Haskell.

\subsection{Generation of LLVM}
\label{sec:impl-gen-llvm}
The structure of Silly and LLVM are comparable up to the statement level. Silly modules and functions are converted in their LLVM counterpart and the generation of these is trivial. Statements, values, and variables of Silly are more complicated to translate to their LLVM equivalent as they all translate to a list of LLVM statements. We discuss the bottom-up generation of code for Silly statements, values, and variables in this section.

The LLVM code generation algorithm is divided in 3 tasks, which are executed for each Silly statement, value or variable node in the syntax tree.
\begin{enumerate}
  \item Acquire the continuation variable(s) from the children of the node.
  \item Generate conversion code for the continuation variables, if they are not of the expected type.
  \item Generate LLVM code that executes the operation expressed by the node and append the code to the code generated by the children nodes. This task is trivial, as each Silly operation has a corresponding LLVM operation.
\end{enumerate}

\subsubsection{Continuation variables}
Each Silly statement transforms to a sequence of LLVM statements, forming a chain of operations semantically equal to the Silly code. Each variable and value of the Silly abstract syntax tree synthesizes an attribute containing the variable which holds the result value of the node. These variables are either global variables, virtual registers, or constants.

The leafs of the Silly abstract syntax tree form the base cases for the continuation variable attribute:
\begin{itemize}
  \item A global variable node in the syntax tree results in a LLVM global variable with the same identifier as continuation variable. This also holds for the global variable 'RP' used for the return register.
  \item The continuation variable of a local variable is a LLVM virtual register with the same identifier.
  \item Parameters result in a LLVM virtual register continuation variable which has the same identifier as the parameter node.
  \item The allocation value synthesizes a LLVM virtual register with a fresh unique identifier.
\end{itemize}

All non-leaf nodes of the Silly AST synthesize a LLVM virtual register with a fresh unique identifier as continuation variable, which contains the result of the operation encoded by the node.

\subsubsection{Conversion code}
Often types inferred for continuation variables conflict with the types expected by a Silly node. We resolve this conflict by generating LLVM code that converts the continuation variables in the required type. We assume these conversions are safe, as the Silly code is generated from type correct Haskell code.

Conflicts between the inferred and the expected types only occur when a value is loaded from memory, stored to memory, or a parameter variable is used. Memory cells are allocated as |GrWord| type, thus pointers need to be converted to integers before they can be stored. Likewise, pointer values loaded from memory are loaded as integers and need to be converted to a pointer value before they can be used. The same actions need to be performed when passing a pointer value as parameter of a function, as function parameters are passed as |GrWord| types in Silly.

\subsubsection{Example}
\refF{fig:llvm-running-example} shows the sequence of LLVM statements generated for a Silly statement. The abstract syntax tree for this statement is shown in \refF{fig:silly-type-example}. The LLVM code is generated by a bottom-up traversal of the syntax tree. 

\begin{figure}[htbp]
  \lstinputlisting[style={figureLstFootnote}, language={LLVM}]{running-example.ll}
  \caption{LLVM code generated for \inlCode{C}{i4 := foreign call primSubInt( x78, p1[1] );}}
 \label{fig:llvm-running-example}
\end{figure}

We start the traversal in the bottom-right parameter node. Parameters do not generate code, but a LLVM virtual register named $p1$ is synthesized as continuation variable. The parent of the parameter node is an array indexing node, expecting a continuation variable which has a pointer type. This expectation does not match the inferred type of the actual continuation variable it receives, thus conversion code is added. The \inlCode{LLVM}{inttoptr}operation is applied on the $p1$ register and the result is stored in virtual register $vr0$. This register is used in the semantic code generated by this node, as the pointer arithmetic is performed on $vr0$ with the operation \inlCode{LLVM}{getelementptr} and the result is stored in virtual register $vr1$. The parent of the array indexing node is a  'Variable Value' node, which loads the value of a variable. The result of this \inlCode{LLVM}{load}is stored in virtual register $vr2$.

We continue the traversal in the sub-tree that corresponds to the first argument of the function call, which is a local variable node. This node synthesizes a virtual register called $x78$, which has a pointer type, as continuation variable. The 'Variable Value' node expects a continuation variable with a pointer type, which matches the inferred type of the actual continuation variable. No conversion code is generated and the address that $x78$ points to is loaded in the virtual register $vr3$.

The call node is visited next in the traversal. Function arguments are always passed as |GrWord| types even if the values contain pointer values. In this case, all arguments are of the type |GrWord| and thus no conversion code is needed. The \inlCode{LLVM}{call}is generated and the return value is assigned to virtual register $vr4$. The final step of the traversal is the top node of the syntax tree, an assignment node. In order to store the source argument in the destination, the type of the destination must be a pointer to the type of the source. Thus if the continuation variable of the source branch is of the type |GrWord|, then the type of the destination must be |GrWord*|. If this does not hold, conversion code for the source variable is generated. In our example, the type restriction holds, and thus only a \inlCode{LLVM}{store} of $vr4$ at the address $i4$ is emitted.

\section{The Runtime System}
\label{sec:impl-rts}
Runtime systems offer services for the generated code. Examples of such services are garbage collection, primitive functions, dynamic loading, and dynamic compilation APIs. The run-time system of the naive backend offers just enough service to successful run a Haskell program: primitive functions and garbage collection. In this section we describe the design and implementation of the system and elaborate on the choices made.
  
\subsection{Implementation}
\begin{figure}[tb]
  \begin{center}
    \includegraphics[scale=0.7]{rts_structure.png}
  \end{center}
  \caption{The structure of the runtime system}
  \label{fig:rts-structure}  
\end{figure}
\refF{fig:rts-structure} describes the architecture of the runtime system. On the top level, we have multiple source files that define and export functions. These functions are compiled by a compiler for that source language. The object files are combined in a library, which the generated code refers to. The generated code and the runtime library are linked by the system linker, resulting in an executable. Although the current system is entirely implemented in C, the architecture allows us to write specific parts in an other language. This is illustrated in \refF{fig:rts-structure} by the dashed C++ and Haskell (HS) files. We are only restricted by calling convention (in our implementation the C calling convention) and marshalling data between the languages. Furthermore, this architecture allows us to use one runtime system for the C and the LLVM backend.

The design offers advantages, but also some disadvantages. The system fails to provide a clean interface for the Haskell program. This is a drawback because in LLVM code external functions must be declared. Thus, each runtime function that is used, must be either declared in the Haskell code or the declaration is inserted by the compiler. Both options are used, as the primitive functions are declared in the prelude and the garbage collection functions are added by the Silly-to-LLVM transformation. A second disadvantage is not exposing the code of the runtime functions to the LLVM compiler chain. The LLVM tools are not able to inline the runtime functions and can not analyze the code. This makes the usage of often used functions like allocation more expensive than necessary.

\subsubsection{Interaction between the runtime system and Haskell}
The services of the runtime system are available for the generated code because they use a shared calling convention, but calling functions is only useful if there is a way for the program and the runtime system to interact. We distinguish 3 different values that could be passed between the program and the runtime:

\begin{enumerate}
  \item Basic values: unboxed integers, characters, and floats.
  \item Tag values 
  \item Possible unevaluated nodes
\end{enumerate}

Pure functions that accept basic values as parameters and return a basic value (e.g. a function that multiplies 2 integers) are not problematic. Most of the runtime system consists of such functions. The types of these functions are declared in the Haskell code and thus the heap-points-to analysis uses this information for analyzing values returned by these functions. Because the heap-points-to analysis is directed only by the type of runtime functions, impure functions can break the analysis and break the generated code.

\begin{figure}[tb]
  \begin{lstlisting}[style={figureLst}, language={C}]
#define CFalse 2
#define CTrue 3
  
GrWord primGtInt(GrWord x, GrWord y)
{   
  if (x>y)
  { 
    return CTrue;
  }
  return CFalse;
} 
  \end{lstlisting}
  \caption{Primitive function |primGtInt| from the runtime system}
  \label{lst:primGtInt}  
\end{figure}

Runtime functions that accept or return tag values are a special case of the functions that accept or return basic values. Both the runtime system and the compiled Haskell program must share the same mapping between constructors and their tag values. The current implementation of this mapping can be seen in \refF{lst:primGtInt}. The unsigned integer values of the tags |CFalse| and |CTrue|, and some several other tags, are hard-coded in the runtime system (line 1 and 2) and in the compiler. The mapping of these tags is is synchronized by hand and are subject to possible synchronisation errors in the future.

The final class of runtime functions, functions that receive nodes as parameter or return nodes, are more problematic than the above cases. When a function has a node as parameter, it may be evaluated or unevaluated. A runtime function could inspect the tag of the node to determine if the node is in weak head normal form. If it is unevaluated, evaluating it with a non inlined |eval| function is an option, but makes the function impure, breaking the heaps-points-to analysis. Evaluating the arguments of runtime functions in advance solves this problem, but makes the functions more strict than they need to be. Creating a node in the runtime system and returning it to the Haskell world is problematic. The heaps-points-to analysis is unaware of this closure and this can result in missing arms in generated |eval| and |apply| functions. Currently we avoid creating closures in the runtime system, but it is desirable for later versions.

\subsection{Garbage Collection}
\label{sec:conservative-gc}
It is an option to allocate heap memory for closures, but ignore deallocation of this memory. This scheme works for the smallest toy examples, but fills the memory quickly with garbage closures for a more elaborate example. Real Haskell programs depend on a garbage collector to de-allocate obsolete closures that fill the heap.

The backend utilizes the Boehm-Demers-Weiser garbage collector~\cite{boehm88gc-c}, a conservative collector designed to work in an uncooperative environment. Conservative collectors do not need support from the language to perform their job. These collectors traverse the stack and interpret each value as a pointer. The values that these pointers point to, are recursively inspected for pointers. Each value that can be reached this way from the stack is considered live and thus not garbage. This makes garbage collection very easy to integrate in our backend. \refF{lst:llvm-gc-file} contains all code needed to plug in the garbage collection in the backend. It defines 3 wrapper functions that wrap C macro functions, because there is no way to call a C macro function in LLVM as they are replaced by their definition at link-time. By replacing the calls from |malloc| to |llvmgc_malloc| and linking in the garbage collection library, we add the collector to the backend.

\begin{figure}[tb]
  \begin{lstlisting}[style={figureLst}, language={C}]
#include <inttypes.h>
#include "gc.h"
/* Initialize the garbage collector */
void llvmgc_init()
{
  GC_INIT();
}
/* Malloc nBytes */
void* llvmgc_malloc( size_t nBytes )
{
  return GC_MALLOC( nBytes );
}
/* Allocate nBytes and add them to the garbage collection roots */
void* llvmgc_malloc_uncollectable( size_t nBytes )
{
  return GC_MALLOC_UNCOLLECTABLE( nBytes );
}
  \end{lstlisting}
  \caption{The garbage collection runtime interface}
  \label{lst:llvm-gc-file}  
\end{figure}

The generality of conservative garbage collection is also a disadvantage. Conservative collectors lack the information if a value is a pointer and perform only an educated guess. Although this is safe, it can result in memory leaks, leaving garbage uncollected. Accurate garbage collectors, collectors that rely on pointer identification information provided by the compiler, do not have this drawback. 

Another inefficiency of conservative garbage collection rises because the implementation does not abstracts over memory, instead it only abstracts over memory management. A great amount of closures on the heap have a short life-time. When the collector frees the memory used by a closure that became unreachable, it leaves the memory fragmented. When this happens often, we use more chunks of memory than needed because of the fragmentation. This problem is solved by copying collectors, which compact the heap by copying the live memory to a shadow heap. Copying changes addresses of values, requiring an update of references to values that were copied. This excludes conservative collectors, because wrong guesses are no longer safe when the value is updated with a pointer value.

We conclude that the current conservative garbage collection is not the most efficient one, but is very easy to integrate.
%%]