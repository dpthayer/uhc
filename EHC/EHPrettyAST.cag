% $Id: EHC.lag 199 2004-05-12 19:11:13Z andres $

%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printing of internal AST structure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs
ppNest :: PP a => [a] -> PP_DocL -> PP_DocL -> PP_Doc
ppNest nms attrs ps = ppNestInfo defaultEHCOpts nms attrs ps []

ppNestInfo :: PP a => EHCOpts -> [a] -> PP_DocL -> PP_DocL -> AssocL String PP_Doc -> PP_Doc
ppNestInfo opts nms attrs ps infos
  = ppListSep "" "" "_" nms
    >#< (   (if null attrs then empty else ppSpaced attrs)
        >-< (if ehcoptDebug opts then vlist (map (\(i,p) -> pp i >|< ":" >#< p) infos) else empty)
        )
    >-< indent 2 (vlist ps)

ppNm :: HsName -> PP_Doc
ppNm = text . show . show

mkInfo1 :: String -> PP_Doc -> (String,PP_Doc)
mkInfo1 = (,)
%%]

%%[1
ATTR AllNT AGItf [ | | ppAST USE {>-<} {empty} : PP_Doc ]

SEM Decl
  | Val         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Decl","Val"] [] [@patExpr.ppAST,@expr.ppAST] @info
                loc     .  info     =   [ mkInfo1 "lhs.tySigGam" (ppGam @lhs.tySigGam)
                                        ]
  | TySig       lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Decl","TySig"] [ppNm @nm] [@tyExpr.ppAST] @info
                loc     .  info     =   [ mkInfo1 "tyExpr.ty" (ppTy @tyExpr.ty)
                                        , mkInfo1 "sigTy" (ppTy @sigTy)
                                        ]

SEM Expr
  | IConst      lhs     .  ppAST    =   ppNest ["Expr","IConst"] [@pp] []
  | CConst      lhs     .  ppAST    =   ppNest ["Expr","CConst"] [@pp] []
  | Var         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Expr","Var"] [ppNm @nm] [] @info
                loc     .  info     =   [ mkInfo1 "knTy" (ppTy @lhs.knTy)
                                        ]
  | Con         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Expr","Con"] [ppNm @nm] [] @info
                loc     .  info     =   [ mkInfo1 "ty" (ppTy @ty)
                                        ]
  | Let         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Expr","Let"] [] [@decls.ppAST,@body.ppAST] @info
                loc     .  info     =   []
  | App         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Expr","App"] [] [@func.ppAST,@arg.ppAST] @info
                loc     .  info     =   [ mkInfo1 "knTy" (ppTy @lhs.knTy)
                                        ]
  | Parens      lhs     .  ppAST    =   ppNest ["Expr","Parens"] [] [@expr.ppAST]
  | AppTop      lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Expr","AppTop"] [] [@expr.ppAST] @info
                loc     .  info     =   [ mkInfo1 "knTy" (ppTy @lhs.knTy)
                                        ]
  | Lam         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Expr","Lam"] [] [@arg.ppAST,@body.ppAST] @info
                loc     .  info     =   [ mkInfo1 "knTy" (ppTy @lhs.knTy)
                                        , mkInfo1 "gam" (ppGam @arg.valGam)
                                        ]

SEM PatExpr
  | IConst      lhs     .  ppAST    =   ppNest ["PatExpr","IConst"] [@pp] []
  | CConst      lhs     .  ppAST    =   ppNest ["PatExpr","CConst"] [@pp] []
  | Var         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["PatExpr","Var"] [ppNm @nm] [] @info
                loc     .  info     =   [ mkInfo1 "knTy" (ppTy @lhs.knTy)
                                        , mkInfo1 "ty" (ppTy @ty)
                                        ]
  | VarAs       lhs     .  ppAST    =   ppNest ["PatExpr","VarAs"] [ppNm @nm] [@patExpr.ppAST]
  | Con         lhs     .  ppAST    =   ppNest ["PatExpr","Con"] [ppNm @nm] []
  | App         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["PatExpr","App"] [] [@func.ppAST,@arg.ppAST] @info
                loc     .  info     =   [ mkInfo1 "appFunNm" (ppNm @func.appFunNm)
                                        , mkInfo1 "appFunPP" (@func.appFunPP)
                                        , mkInfo1 "appFunPPL" (ppCommaList @func.appArgPPL)
                                        , mkInfo1 "appArgNm" (ppNm @arg.appFunNm)
                                        , mkInfo1 "appArgPP" (@arg.appFunPP)
                                        , mkInfo1 "appArgPPL" (ppCommaList @arg.appArgPPL)
                                        ]
  | Parens      lhs     .  ppAST    =   ppNest ["PatExpr","Parens"] [] [@patExpr.ppAST]
  | AppTop      lhs     .  ppAST    =   ppNest ["PatExpr","AppTop"] [] [@patExpr.ppAST]
  
SEM TyExpr
  | Con         lhs     .  ppAST    =   ppNest ["TyExpr","Con"] [ppNm @nm] []
  | App         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["TyExpr","App"] [] [@func.ppAST,@arg.ppAST] @info
                loc     .  info     =   [ mkInfo1 "appFunNm" (ppNm @func.appFunNm)
                                        , mkInfo1 "appFunPP" (@func.appFunPP)
                                        , mkInfo1 "appFunPPL" (ppCommaList @func.appArgPPL)
                                        , mkInfo1 "appArgNm" (ppNm @arg.appFunNm)
                                        , mkInfo1 "appArgPP" (@arg.appFunPP)
                                        , mkInfo1 "appArgPPL" (ppCommaList @arg.appArgPPL)
                                        ]
  | Parens      lhs     .  ppAST    =   ppNest ["TyExpr","Parens"] [] [@tyExpr.ppAST]
  | AppTop      lhs     .  ppAST    =   ppNestInfo @lhs.opts ["TyExpr","AppTop"] [] [@tyExpr.ppAST] @info
                loc     .  info     =   [ mkInfo1 "appFunNm" (ppNm @tyExpr.appFunNm)
                                        ]

SEM Decls
  | Nil         lhs     .  ppAST    =   ppNest ["Decls","Nil"] [] []
  | Cons        lhs     .  ppAST    =   ppNest ["Decls","Cons"] [] [@hd.ppAST,@tl.ppAST]
%%]

%%[2
SEM Decl
  | Val         loc     .  info     :=  [ mkInfo1 "lhs.tySigGam" (ppGam @lhs.tySigGam)
                                        , mkInfo1 "sigTy" (ppTy @sigTy)
                                        , mkInfo1 "patExpr.ty" (ppTy @patExpr.ty)
                                        , mkInfo1 "expr.ty" (ppTy @expr.ty)
                                        ]

SEM Expr
  | Var         loc     .  info     :=  [ mkInfo1 "knTy" (ppTy (@lhs.tyCnstr |=> @lhs.knTy))
                                        , mkInfo1 "fTy" (ppTy @fTy)
                                        , mkInfo1 "ty" (ppTy @ty)
                                        , mkInfo1 "lhs.tyCnstr" (pp @lhs.tyCnstr)
                                        ]
  | App         loc     .  info     :=  [ mkInfo1 "knTy" (ppTy (@lhs.tyCnstr |=> @lhs.knTy))
                                        , mkInfo1 "func.ty" (ppTy @func.ty)
                                        , mkInfo1 "ty" (ppTy @ty)
                                        ]
  | Lam         loc     .  info     :=  [ mkInfo1 "knTy" (ppTy (@lhs.tyCnstr |=> @lhs.knTy))
                                        , mkInfo1 "knFun" (ppTy (foTy @foKnFun))
                                        , mkInfo1 "ty" (ppTy @ty)
                                        , mkInfo1 "gam" (ppGam @arg.valGam)
                                        ]
%%]

%%[3
SEM TyExpr
  | Var         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["TyExpr","Var"] [ppNm @nm] [] @info
                loc     .  info     =   []
%%]

%%[4
SEM TyExpr
  | Quant       lhs     .  ppAST    =   ppNest ["TyExpr","Quant"] [text (showTyQu @qu),ppNm @tyVar] [@tyExpr.ppAST]
%%]

%%[5
SEM Decl
  | Data        lhs     .  ppAST    =   ppNestInfo @lhs.opts ["Decl","Data"] [ppNm @tyNm] [@tyVars.ppAST,@constrs.ppAST] @info
                loc     .  info     =   []

SEM Expr
  | Case        lhs     .  ppAST    =   ppNest ["Expr","Case"] [] [@expr.ppAST,@alts.ppAST]

SEM CaseAlt
  | Pat         lhs     .  ppAST    =   ppNest ["CaseAlt","Pat"] [] [@patExpr.ppAST,@expr.ppAST]

SEM CaseAlts
  | Nil         lhs     .  ppAST    =   ppNest ["CaseAlts","Nil"] [] []
  | Cons        lhs     .  ppAST    =   ppNestInfo @lhs.opts ["CaseAlts","Cons"] [] [@hd.ppAST,@tl.ppAST] @info
                loc     .  info     =   [ mkInfo1 "fiOpts" (pp (show @lhs.fiOpts))
                                        ]

SEM TyExprs
  | Nil         lhs     .  ppAST    =   ppNest ["TyExprs","Nil"] [] []
  | Cons        lhs     .  ppAST    =   ppNest ["TyExprs","Cons"] [] [@hd.ppAST,@tl.ppAST]

SEM TyVar
  | Var         lhs     .  ppAST    =   ppNestInfo @lhs.opts ["TyVar","Var"] [ppNm @nm] [] @info
                loc     .  info     =   []

SEM TyVars
  | Nil         lhs     .  ppAST    =   ppNest ["TyVars","Nil"] [] []
  | Cons        lhs     .  ppAST    =   ppNest ["TyVars","Cons"] [] [@hd.ppAST,@tl.ppAST]

SEM DataConstr
  | Constr      loc     .  ppAST    =   ppNest ["DataConstr","Constr"] [ppNm @conNm] [@fields.ppAST]

SEM DataConstrs
  | Nil         lhs     .  ppAST    =   ppNest ["DataConstrs","Nil"] [] []
  | Cons        lhs     .  ppAST    =   ppNest ["DataConstrs","Cons"] [] [@hd.ppAST,@tl.ppAST]
%%]

%%[6
SEM TyVar
  | Var         loc     .  info     :=  [ mkInfo1 "tgi" (pp @tgi)
                                        ]
SEM TyExpr
  | Var         loc     .  info     :=  [ mkInfo1 "tgi" (pp @tgi)
                                        ]
SEM Decl
  | Data        loc     .  info     :=  [ mkInfo1 "dataKi" (ppTy @dataKi)
                                        , mkInfo1 "lhs.tyGam" (ppGam @lhs.tyGam)
                                        ]
%%]

%%[7
SEM Expr
  | Rec         loc     .  ppAST    =   ppNest ["Expr","Rec"] [] [@recExpr.ppAST]

SEM PatExpr
  | Rec         loc     .  ppAST    =   ppNest ["PatExpr","Rec"] [] [@recPatExpr.ppAST]

SEM TyExpr
  | Row         loc     .  ppAST    =   ppNest ["TyExpr","Row"] [] [@rowTyExpr.ppAST]

SEM RecExpr
  | Empty       loc     .  ppAST    =   ppNest ["RecExpr","Empty"] [] []
  | Ext         loc     .  ppAST    =   ppNest ["RecExpr","Ext"] [ppNm @nm] [@recExpr.ppAST,@expr.ppAST]

SEM RecPatExpr
  | Empty       loc     .  ppAST    =   ppNest ["RecPatExpr","Empty"] [] []
  | Ext         loc     .  ppAST    =   ppNest ["RecPatExpr","Ext"] [ppNm @nm] [@recPatExpr.ppAST,@patExpr.ppAST]

SEM RowTyExpr
  | Empty       loc     .  ppAST    =   ppNest ["RowTyExpr","Empty"] [] []
  | Ext         loc     .  ppAST    =   ppNest ["RowTyExpr","Ext"] [ppNm @nm] [@rowTyExpr.ppAST,@tyExpr.ppAST]

SEM DataField
  | Field       loc     .  ppAST    =   ppNest ["DataField","Field"] [pp (maybe [] (map ppNm) @mbLabels)] [@tyExpr.ppAST]

SEM DataFields
  | Nil         lhs     .  ppAST    =   ppNest ["DataFields","Nil"] [] []
  | Cons        lhs     .  ppAST    =   ppNest ["DataFields","Cons"] [] [@hd.ppAST,@tl.ppAST]
%%]

%%[8
SEM Decl
  | FFI         loc     .  ppAST    =   ppNestInfo @lhs.opts ["Decl","FFI"] [pp (show @impEnt),ppNm @nm] [@tyExpr.ppAST] @info
                        .  info     =   []
%%]

%%[9
SEM RowTyExpr
  | Var         loc     .  ppAST    =   ppNest ["RowTyExpr","Var"] [ppNm @nm] []

SEM TyExpr
  | Pred        loc     .  ppAST    =   ppNest ["TyExpr","Pred"] [] [@prExpr.ppAST]

SEM PrExpr
  | Class       loc     .  ppAST    =   ppNest ["PrExpr","Class"] [ppNm @nm] [@tyExprs.ppAST]
  | Lacks       loc     .  ppAST    =   ppNest ["PrExpr","Lacks"] [ppNm @nm] [@rowTyExpr.ppAST]
  | Equal       loc     .  ppAST    =   ppNest ["PrExpr","Equal"] [ppNm @nm] [@tyExpr.ppAST]

SEM Decl
  | Class       loc     .  ppAST    =   ppNestInfo @lhs.opts ["Decl","Class"] [] [@ctxtPrExprs.ppAST,@prExpr.ppAST,@funcDeps.ppAST,@decls.ppAST] @info
                        .  info     =   []
  | Instance    loc     .  ppAST    =   ppNestInfo @lhs.opts ["Decl","Instance"] (maybe [] (\n -> [ppNm n]) @mbNm) [@ctxtPrExprs.ppAST,@prExpr.ppAST,@decls.ppAST] @info
                        .  info     =   [ mkInfo1 "ctxtToInstTy" (ppTy @ctxtToInstTy)
                                        , mkInfo1 "instTyRec" (ppTy @instTyRec)
                                        ]

SEM FuncDep
  | Dep         loc     .  ppAST    =   ppNest ["FuncDep","Dep"] [] [@fromTvs.ppAST,@toTvs.ppAST]

SEM FuncDeps
  | Nil         lhs     .  ppAST    =   ppNest ["FuncDeps","Nil"] [] []
  | Cons        lhs     .  ppAST    =   ppNest ["FuncDeps","Cons"] [] [@hd.ppAST,@tl.ppAST]

SEM Expr
  | Let         loc     .  info     :=  [ mkInfo1 "gathSubsPredL" (ppCommaList @gathSubsPredL)
                                        , mkInfo1 "cbindL" (ppAssocL . map (\(CBind_Bind n v) -> (n,v)) $ @cbindL)
                                        , mkInfo1 "csubst" (ppAssocL . fmToList $ @csubst)
                                        , mkInfo1 "remPrOccL" (ppCommaList @remPrOccL)
                                        ]
%%]



