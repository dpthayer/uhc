-------------------------------------------------------------------------
-- Generate LaTeX's from attr bindings
-------------------------------------------------------------------------

{
module TrfAS2GenLaTeX
  ( as2LaTeX
  )
  where

import Data.Maybe
import Data.Char
import Data.List
import qualified Data.Set as Set
import qualified Data.Map as Map
import Utils
import Opts
import Common
import KeywParser( propsSynInhMp )
import ExprUtils
import ARuleUtils
import FmGam
import RwExprGam
import ECnstrGam
import RulerAbsSyn2
import RulerAdmin

-- for ppDbg
import UU.Pretty
import PPUtils
}

-------------------------------------------------------------------------
-- Inclusion of split off parts
-------------------------------------------------------------------------

INCLUDE "RulerAbsSyn2AG.ag"
INCLUDE "RulerAbsSynCommonAG.ag"
INCLUDE "RulerAS2Opts.ag"

INCLUDE "TrfAS2CommonAG.ag"

INCLUDE "ExprAbsSynAG.ag"
INCLUDE "ExprSelfAG.ag"

INCLUDE "ARuleAbsSynAG.ag"
INCLUDE "ARuleSelfAG.ag"

-------------------------------------------------------------------------
-- Interfacing to AST
-------------------------------------------------------------------------

WRAPPER AGItf 

{
as2LaTeX :: Opts -> ScGam Expr -> FmGam Expr -> RwExprGam -> Decls -> (Decls,PP_Doc,[Err])
as2LaTeX o scg fmg rwg r
  = (self_Syn_AGItf r2,ppDbg_Syn_AGItf r2,errL_Syn_AGItf r2)
  where r1 = sem_AGItf (AGItf_AGItf r)
        r2 = wrap_AGItf r1
                (Inh_AGItf {opts_Inh_AGItf = o, fmGam_Inh_AGItf = fmg, rwGam_Inh_AGItf = rwg, scGam_Inh_AGItf = scg})
}

-------------------------------------------------------------------------
-- Replica
-------------------------------------------------------------------------

SEM RlDecl
  | Rl              lhs.self                =   let 
                                                in  RlDecl_LTX @fullNm @rlNm @lhs.vwNm @pos @preJds.self @postJds.self

SEM Jd
  | Expr			lhs.self				=	Jd_LTX @nm @scNm @expr.self


